
TinyML_Classifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000112c  0800ad20  0800ad20  0000bd20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be4c  0800be4c  0000d904  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be4c  0800be4c  0000ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be54  0800be54  0000d904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be54  0800be54  0000ce54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be58  0800be58  0000ce58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000904  20000000  0800be5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000920  0800c760  0000d920  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20000c8c  0800c760  0000dc8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d904  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f431  00000000  00000000  0000d934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a14  00000000  00000000  0001cd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0001f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000883  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023611  00000000  00000000  00020b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc62  00000000  00000000  00044174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd5d  00000000  00000000  00053dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00121b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e4  00000000  00000000  00121bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00125da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000920 	.word	0x20000920
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800acf4 	.word	0x0800acf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000924 	.word	0x20000924
 80001cc:	0800acf4 	.word	0x0800acf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <MX_GPIO_Init+0x8c>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_GPIO_Init+0x8c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a10      	ldr	r2, [pc, #64]	@ (80010ac <MX_GPIO_Init+0x8c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <MX_GPIO_Init+0x8c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2108      	movs	r1, #8
 8001082:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <MX_GPIO_Init+0x90>)
 8001084:	f000 ffdc 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001088:	2308      	movs	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_GPIO_Init+0x90>)
 80010a0:	f000 fe64 	bl	8001d6c <HAL_GPIO_Init>

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000400 	.word	0x48000400

080010b4 <uart_read_line>:
/* USER CODE END PV */

void SystemClock_Config(void);
void Error_Handler(void);

void uart_read_line(char *buffer, size_t max_len) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint8_t ch;
  size_t idx = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  while (1) {
    HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 80010c2:	f107 010b 	add.w	r1, r7, #11
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	2201      	movs	r2, #1
 80010cc:	4819      	ldr	r0, [pc, #100]	@ (8001134 <uart_read_line+0x80>)
 80010ce:	f002 fa3a 	bl	8003546 <HAL_UART_Receive>
    if (ch == '\r' || ch == '\n') break;
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	2b0d      	cmp	r3, #13
 80010d6:	d01d      	beq.n	8001114 <uart_read_line+0x60>
 80010d8:	7afb      	ldrb	r3, [r7, #11]
 80010da:	2b0a      	cmp	r3, #10
 80010dc:	d01a      	beq.n	8001114 <uart_read_line+0x60>
    if (ch >= 32 && ch <= 126 && idx < max_len - 1) {
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b1f      	cmp	r3, #31
 80010e2:	d9ee      	bls.n	80010c2 <uart_read_line+0xe>
 80010e4:	7afb      	ldrb	r3, [r7, #11]
 80010e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80010e8:	d8eb      	bhi.n	80010c2 <uart_read_line+0xe>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d2e6      	bcs.n	80010c2 <uart_read_line+0xe>
      buffer[idx++] = ch;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60fa      	str	r2, [r7, #12]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	7afa      	ldrb	r2, [r7, #11]
 8001100:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001102:	f107 010b 	add.w	r1, r7, #11
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	2201      	movs	r2, #1
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <uart_read_line+0x80>)
 800110e:	f002 f991 	bl	8003434 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart2, &ch, 1, HAL_MAX_DELAY);
 8001112:	e7d6      	b.n	80010c2 <uart_read_line+0xe>
    }
  }
  buffer[idx] = '\0';
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	2202      	movs	r2, #2
 8001124:	4904      	ldr	r1, [pc, #16]	@ (8001138 <uart_read_line+0x84>)
 8001126:	4803      	ldr	r0, [pc, #12]	@ (8001134 <uart_read_line+0x80>)
 8001128:	f002 f984 	bl	8003434 <HAL_UART_Transmit>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000948 	.word	0x20000948
 8001138:	0800ad20 	.word	0x0800ad20

0800113c <trim_trailing_whitespace>:

void trim_trailing_whitespace(char *str) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  int len = strlen(str);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f893 	bl	8000270 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	60fb      	str	r3, [r7, #12]
  while (len > 0 && (str[len - 1] == '\r' || str[len - 1] == '\n' || str[len - 1] == ' ' || str[len - 1] == '\t')) {
 800114e:	e007      	b.n	8001160 <trim_trailing_whitespace+0x24>
    str[--len] = '\0';
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3b01      	subs	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4413      	add	r3, r2
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  while (len > 0 && (str[len - 1] == '\r' || str[len - 1] == '\n' || str[len - 1] == ' ' || str[len - 1] == '\t')) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd1b      	ble.n	800119e <trim_trailing_whitespace+0x62>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3b01      	subs	r3, #1
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b0d      	cmp	r3, #13
 8001172:	d0ed      	beq.n	8001150 <trim_trailing_whitespace+0x14>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3b01      	subs	r3, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b0a      	cmp	r3, #10
 8001180:	d0e6      	beq.n	8001150 <trim_trailing_whitespace+0x14>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3b01      	subs	r3, #1
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b20      	cmp	r3, #32
 800118e:	d0df      	beq.n	8001150 <trim_trailing_whitespace+0x14>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3b01      	subs	r3, #1
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b09      	cmp	r3, #9
 800119c:	d0d8      	beq.n	8001150 <trim_trailing_whitespace+0x14>
  }
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <uart_flush_input>:

void uart_flush_input(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  uint8_t dump;
  while (HAL_UART_Receive(&huart2, &dump, 1, 0) == HAL_OK);
 80011ae:	bf00      	nop
 80011b0:	1df9      	adds	r1, r7, #7
 80011b2:	2300      	movs	r3, #0
 80011b4:	2201      	movs	r2, #1
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <uart_flush_input+0x24>)
 80011b8:	f002 f9c5 	bl	8003546 <HAL_UART_Receive>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f6      	beq.n	80011b0 <uart_flush_input+0x8>
}
 80011c2:	bf00      	nop
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000948 	.word	0x20000948

080011d0 <main>:

int main(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	@ 0x70
 80011d4:	af02      	add	r7, sp, #8
  HAL_Init();
 80011d6:	f000 fba0 	bl	800191a <HAL_Init>
  SystemClock_Config();
 80011da:	f000 f96b 	bl	80014b4 <SystemClock_Config>
  MX_GPIO_Init();
 80011de:	f7ff ff1f 	bl	8001020 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e2:	f000 facf 	bl	8001784 <MX_USART2_UART_Init>

  HAL_UART_Transmit(&huart2, (uint8_t *)"\033[2J\033[H", 7, HAL_MAX_DELAY);  // Clear terminal
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	2207      	movs	r2, #7
 80011ec:	499a      	ldr	r1, [pc, #616]	@ (8001458 <main+0x288>)
 80011ee:	489b      	ldr	r0, [pc, #620]	@ (800145c <main+0x28c>)
 80011f0:	f002 f920 	bl	8003434 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nX-CUBE-AI: Initialization...\r\n", 31, HAL_MAX_DELAY);
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	221f      	movs	r2, #31
 80011fa:	4999      	ldr	r1, [pc, #612]	@ (8001460 <main+0x290>)
 80011fc:	4897      	ldr	r0, [pc, #604]	@ (800145c <main+0x28c>)
 80011fe:	f002 f919 	bl	8003434 <HAL_UART_Transmit>
  MX_X_CUBE_AI_Init();
 8001202:	f003 fafd 	bl	8004800 <MX_X_CUBE_AI_Init>
  while (1) {
    char rx_buf[32];
    char *endptr;

    // TEMPERATURE
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nEnter Temperature (°C): ", 27, HAL_MAX_DELAY);
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	221b      	movs	r2, #27
 800120c:	4995      	ldr	r1, [pc, #596]	@ (8001464 <main+0x294>)
 800120e:	4893      	ldr	r0, [pc, #588]	@ (800145c <main+0x28c>)
 8001210:	f002 f910 	bl	8003434 <HAL_UART_Transmit>
    memset(rx_buf, 0, sizeof(rx_buf));
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 f852 	bl	80082c4 <memset>
    uart_read_line(rx_buf, sizeof(rx_buf));
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2120      	movs	r1, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff45 	bl	80010b4 <uart_read_line>
    uart_flush_input();
 800122a:	f7ff ffbd 	bl	80011a8 <uart_flush_input>
    trim_trailing_whitespace(rx_buf);
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff83 	bl	800113c <trim_trailing_whitespace>
    user_temp = strtof(rx_buf, &endptr);
 8001236:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f006 f946 	bl	80074d0 <strtof>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	4b87      	ldr	r3, [pc, #540]	@ (8001468 <main+0x298>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
    if (endptr == rx_buf || *endptr != '\0') {
 800124e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	429a      	cmp	r2, r3
 8001254:	d003      	beq.n	800125e <main+0x8e>
 8001256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d007      	beq.n	800126e <main+0x9e>
      HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid temperature. Try again.\r\n", 33, HAL_MAX_DELAY);
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2221      	movs	r2, #33	@ 0x21
 8001264:	4981      	ldr	r1, [pc, #516]	@ (800146c <main+0x29c>)
 8001266:	487d      	ldr	r0, [pc, #500]	@ (800145c <main+0x28c>)
 8001268:	f002 f8e4 	bl	8003434 <HAL_UART_Transmit>
      continue;
 800126c:	e0f2      	b.n	8001454 <main+0x284>
    }

    // HUMIDITY
    HAL_UART_Transmit(&huart2, (uint8_t *)"Enter Humidity (%): ", 21, HAL_MAX_DELAY);
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	2215      	movs	r2, #21
 8001274:	497e      	ldr	r1, [pc, #504]	@ (8001470 <main+0x2a0>)
 8001276:	4879      	ldr	r0, [pc, #484]	@ (800145c <main+0x28c>)
 8001278:	f002 f8dc 	bl	8003434 <HAL_UART_Transmit>
    memset(rx_buf, 0, sizeof(rx_buf));
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2220      	movs	r2, #32
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f007 f81e 	bl	80082c4 <memset>
    uart_read_line(rx_buf, sizeof(rx_buf));
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2120      	movs	r1, #32
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff11 	bl	80010b4 <uart_read_line>
    uart_flush_input();
 8001292:	f7ff ff89 	bl	80011a8 <uart_flush_input>
    trim_trailing_whitespace(rx_buf);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff4f 	bl	800113c <trim_trailing_whitespace>
    user_humid = strtof(rx_buf, &endptr);
 800129e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 f912 	bl	80074d0 <strtof>
 80012ac:	eef0 7a40 	vmov.f32	s15, s0
 80012b0:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <main+0x2a4>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]
    if (endptr == rx_buf || *endptr != '\0') {
 80012b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d003      	beq.n	80012c6 <main+0xf6>
 80012be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <main+0x106>
      HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid humidity. Try again.\r\n", 31, HAL_MAX_DELAY);
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	221f      	movs	r2, #31
 80012cc:	496a      	ldr	r1, [pc, #424]	@ (8001478 <main+0x2a8>)
 80012ce:	4863      	ldr	r0, [pc, #396]	@ (800145c <main+0x28c>)
 80012d0:	f002 f8b0 	bl	8003434 <HAL_UART_Transmit>
      continue;
 80012d4:	e0be      	b.n	8001454 <main+0x284>
    }

    // Clamp to match training range
    if (user_temp < 0) user_temp = 0;
 80012d6:	4b64      	ldr	r3, [pc, #400]	@ (8001468 <main+0x298>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	d503      	bpl.n	80012ee <main+0x11e>
 80012e6:	4b60      	ldr	r3, [pc, #384]	@ (8001468 <main+0x298>)
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
    if (user_temp > 45) user_temp = 45;
 80012ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001468 <main+0x298>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 800147c <main+0x2ac>
 80012f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	dd02      	ble.n	8001308 <main+0x138>
 8001302:	4b59      	ldr	r3, [pc, #356]	@ (8001468 <main+0x298>)
 8001304:	4a5e      	ldr	r2, [pc, #376]	@ (8001480 <main+0x2b0>)
 8001306:	601a      	str	r2, [r3, #0]
    if (user_humid < 10) user_humid = 10;
 8001308:	4b5a      	ldr	r3, [pc, #360]	@ (8001474 <main+0x2a4>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d502      	bpl.n	8001322 <main+0x152>
 800131c:	4b55      	ldr	r3, [pc, #340]	@ (8001474 <main+0x2a4>)
 800131e:	4a59      	ldr	r2, [pc, #356]	@ (8001484 <main+0x2b4>)
 8001320:	601a      	str	r2, [r3, #0]
    if (user_humid > 100) user_humid = 100;
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <main+0x2a4>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001488 <main+0x2b8>
 800132c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	dd02      	ble.n	800133c <main+0x16c>
 8001336:	4b4f      	ldr	r3, [pc, #316]	@ (8001474 <main+0x2a4>)
 8001338:	4a54      	ldr	r2, [pc, #336]	@ (800148c <main+0x2bc>)
 800133a:	601a      	str	r2, [r3, #0]

    // Normalize before feeding to model
    user_temp /= 100.0f;
 800133c:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <main+0x298>)
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001488 <main+0x2b8>
 8001346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134a:	4b47      	ldr	r3, [pc, #284]	@ (8001468 <main+0x298>)
 800134c:	edc3 7a00 	vstr	s15, [r3]
    user_humid /= 100.0f;
 8001350:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <main+0x2a4>)
 8001352:	ed93 7a00 	vldr	s14, [r3]
 8001356:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001488 <main+0x2b8>
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	4b45      	ldr	r3, [pc, #276]	@ (8001474 <main+0x2a4>)
 8001360:	edc3 7a00 	vstr	s15, [r3]

    // Run inference
    MX_X_CUBE_AI_Process();
 8001364:	f003 fa5a 	bl	800481c <MX_X_CUBE_AI_Process>

    // Output
    char msg[64];
    snprintf(msg, sizeof(msg), "Model Output: %.3f\r\n", ai_result);
 8001368:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <main+0x2c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800137a:	e9cd 2300 	strd	r2, r3, [sp]
 800137e:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <main+0x2c4>)
 8001380:	2140      	movs	r1, #64	@ 0x40
 8001382:	f006 fe91 	bl	80080a8 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff70 	bl	8000270 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	482f      	ldr	r0, [pc, #188]	@ (800145c <main+0x28c>)
 800139e:	f002 f849 	bl	8003434 <HAL_UART_Transmit>

    snprintf(msg, sizeof(msg), "Comfort Score: %.1f%%\r\n", ai_result * 100.0f);
 80013a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <main+0x2c0>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001488 <main+0x2b8>
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	ee17 0a90 	vmov	r0, s15
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80013c0:	e9cd 2300 	strd	r2, r3, [sp]
 80013c4:	4a34      	ldr	r2, [pc, #208]	@ (8001498 <main+0x2c8>)
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	f006 fe6e 	bl	80080a8 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ff4d 	bl	8000270 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	481e      	ldr	r0, [pc, #120]	@ (800145c <main+0x28c>)
 80013e4:	f002 f826 	bl	8003434 <HAL_UART_Transmit>

    if (ai_result >= 0.66f)
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <main+0x2c0>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800149c <main+0x2cc>
 80013f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	db07      	blt.n	800140c <main+0x23c>
      HAL_UART_Transmit(&huart2, (uint8_t *)"-> Comfortable ✅\r\n", 20, HAL_MAX_DELAY);
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	2214      	movs	r2, #20
 8001402:	4927      	ldr	r1, [pc, #156]	@ (80014a0 <main+0x2d0>)
 8001404:	4815      	ldr	r0, [pc, #84]	@ (800145c <main+0x28c>)
 8001406:	f002 f815 	bl	8003434 <HAL_UART_Transmit>
 800140a:	e018      	b.n	800143e <main+0x26e>
    else if (ai_result >= 0.33f)
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <main+0x2c0>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80014a4 <main+0x2d4>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	db07      	blt.n	8001430 <main+0x260>
      HAL_UART_Transmit(&huart2, (uint8_t *)"-> Neutral ⚠️\r\n", 18, HAL_MAX_DELAY);
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2212      	movs	r2, #18
 8001426:	4920      	ldr	r1, [pc, #128]	@ (80014a8 <main+0x2d8>)
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <main+0x28c>)
 800142a:	f002 f803 	bl	8003434 <HAL_UART_Transmit>
 800142e:	e006      	b.n	800143e <main+0x26e>
    else
      HAL_UART_Transmit(&huart2, (uint8_t *)"-> Uncomfortable ❌\r\n", 24, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2218      	movs	r2, #24
 8001436:	491d      	ldr	r1, [pc, #116]	@ (80014ac <main+0x2dc>)
 8001438:	4808      	ldr	r0, [pc, #32]	@ (800145c <main+0x28c>)
 800143a:	f001 fffb 	bl	8003434 <HAL_UART_Transmit>

    HAL_UART_Transmit(&huart2, (uint8_t *)"Hint: Ideal = 25°C, 55% Humidity\r\n\r\n", 36, HAL_MAX_DELAY);
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	2224      	movs	r2, #36	@ 0x24
 8001444:	491a      	ldr	r1, [pc, #104]	@ (80014b0 <main+0x2e0>)
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <main+0x28c>)
 8001448:	f001 fff4 	bl	8003434 <HAL_UART_Transmit>

    HAL_Delay(1000);
 800144c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001450:	f000 fad8 	bl	8001a04 <HAL_Delay>
  while (1) {
 8001454:	e6d7      	b.n	8001206 <main+0x36>
 8001456:	bf00      	nop
 8001458:	0800ad24 	.word	0x0800ad24
 800145c:	20000948 	.word	0x20000948
 8001460:	0800ad2c 	.word	0x0800ad2c
 8001464:	0800ad50 	.word	0x0800ad50
 8001468:	2000093c 	.word	0x2000093c
 800146c:	0800ad6c 	.word	0x0800ad6c
 8001470:	0800ad90 	.word	0x0800ad90
 8001474:	20000940 	.word	0x20000940
 8001478:	0800ada8 	.word	0x0800ada8
 800147c:	42340000 	.word	0x42340000
 8001480:	42340000 	.word	0x42340000
 8001484:	41200000 	.word	0x41200000
 8001488:	42c80000 	.word	0x42c80000
 800148c:	42c80000 	.word	0x42c80000
 8001490:	200009d4 	.word	0x200009d4
 8001494:	0800adc8 	.word	0x0800adc8
 8001498:	0800ade0 	.word	0x0800ade0
 800149c:	3f28f5c3 	.word	0x3f28f5c3
 80014a0:	0800adf8 	.word	0x0800adf8
 80014a4:	3ea8f5c3 	.word	0x3ea8f5c3
 80014a8:	0800ae10 	.word	0x0800ae10
 80014ac:	0800ae24 	.word	0x0800ae24
 80014b0:	0800ae3c 	.word	0x0800ae3c

080014b4 <SystemClock_Config>:
  }
}

void SystemClock_Config(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b096      	sub	sp, #88	@ 0x58
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2244      	movs	r2, #68	@ 0x44
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fefe 	bl	80082c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014da:	f000 fdd7 	bl	800208c <HAL_PWREx_ControlVoltageScaling>

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014de:	2310      	movs	r3, #16
 80014e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014ea:	2360      	movs	r3, #96	@ 0x60
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014fa:	2328      	movs	r3, #40	@ 0x28
 80014fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014fe:	2307      	movs	r3, #7
 8001500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	657b      	str	r3, [r7, #84]	@ 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fe12 	bl	8002138 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001514:	230f      	movs	r3, #15
 8001516:	603b      	str	r3, [r7, #0]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2303      	movs	r3, #3
 800151a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001528:	463b      	mov	r3, r7
 800152a:	2104      	movs	r1, #4
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fa17 	bl	8002960 <HAL_RCC_ClockConfig>

  HAL_RCCEx_EnableMSIPLLMode();
 8001532:	f001 fe2f 	bl	8003194 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001536:	bf00      	nop
 8001538:	3758      	adds	r7, #88	@ 0x58
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <Error_Handler>:

void Error_Handler(void) {
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001542:	b672      	cpsid	i
}
 8001544:	bf00      	nop
  __disable_irq();
  while (1) {}
 8001546:	bf00      	nop
 8001548:	e7fd      	b.n	8001546 <Error_Handler+0x8>
	...

0800154c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_MspInit+0x44>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001556:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	@ 0x60
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_MspInit+0x44>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	6593      	str	r3, [r2, #88]	@ 0x58
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <NMI_Handler+0x4>

0800159c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <MemManage_Handler+0x4>

080015ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <UsageFault_Handler+0x4>

080015bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f9eb 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015f8:	4802      	ldr	r0, [pc, #8]	@ (8001604 <USART2_IRQHandler+0x10>)
 80015fa:	f002 f86d 	bl	80036d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000948 	.word	0x20000948

08001608 <_write>:
#include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include "usart.h"  // Required for huart2

int _write(int file, char *ptr, int len) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	b29a      	uxth	r2, r3
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	4804      	ldr	r0, [pc, #16]	@ (8001630 <_write+0x28>)
 8001620:	f001 ff08 	bl	8003434 <HAL_UART_Transmit>
    return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000948 	.word	0x20000948

08001634 <_read>:

int _read(int file, char *ptr, int len) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
    errno = ENOSYS;
 8001640:	f006 feb4 	bl	80083ac <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2258      	movs	r2, #88	@ 0x58
 8001648:	601a      	str	r2, [r3, #0]
    return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file) {
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
    errno = ENOSYS;
 800165e:	f006 fea5 	bl	80083ac <__errno>
 8001662:	4603      	mov	r3, r0
 8001664:	2258      	movs	r2, #88	@ 0x58
 8001666:	601a      	str	r2, [r3, #0]
    return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001684:	605a      	str	r2, [r3, #4]
    return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_isatty>:

int _isatty(int file) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
    return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80016aa:	b480      	push	{r7}
 80016ac:	b085      	sub	sp, #20
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
    return 0;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_getpid>:

int _getpid(void) {
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
    return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_kill>:

int _kill(int pid, int sig) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
    errno = ENOSYS;
 80016de:	f006 fe65 	bl	80083ac <__errno>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2258      	movs	r2, #88	@ 0x58
 80016e6:	601a      	str	r2, [r3, #0]
    return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	@ (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f006 fe42 	bl	80083ac <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000c000 	.word	0x2000c000
 8001754:	00000800 	.word	0x00000800
 8001758:	20000944 	.word	0x20000944
 800175c:	20000c90 	.word	0x20000c90

08001760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <SystemInit+0x20>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	4a05      	ldr	r2, [pc, #20]	@ (8001780 <SystemInit+0x20>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 800178a:	4a15      	ldr	r2, [pc, #84]	@ (80017e0 <MX_USART2_UART_Init+0x5c>)
 800178c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ba:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_USART2_UART_Init+0x58>)
 80017c8:	f001 fde6 	bl	8003398 <HAL_UART_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017d2:	f7ff feb4 	bl	800153e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000948 	.word	0x20000948
 80017e0:	40004400 	.word	0x40004400

080017e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	@ 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2254      	movs	r2, #84	@ 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f006 fd5d 	bl	80082c4 <memset>
  if(uartHandle->Instance==USART2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2c      	ldr	r2, [pc, #176]	@ (80018c0 <HAL_UART_MspInit+0xdc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d150      	bne.n	80018b6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001814:	2302      	movs	r3, #2
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f001 fac1 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff fe87 	bl	800153e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001830:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	4a23      	ldr	r2, [pc, #140]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 8001836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800183a:	6593      	str	r3, [r2, #88]	@ 0x58
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184c:	4a1d      	ldr	r2, [pc, #116]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_UART_MspInit+0xe0>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001860:	2304      	movs	r3, #4
 8001862:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001870:	2307      	movs	r3, #7
 8001872:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187e:	f000 fa75 	bl	8001d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001886:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001894:	2303      	movs	r3, #3
 8001896:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f000 fa63 	bl	8001d6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2026      	movs	r0, #38	@ 0x26
 80018ac:	f000 f9a9 	bl	8001c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b0:	2026      	movs	r0, #38	@ 0x26
 80018b2:	f000 f9c2 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	@ 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000

080018c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001900 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018cc:	f7ff ff48 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopForever+0x6>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopForever+0xe>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopForever+0x16>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f6:	f006 fd5f 	bl	80083b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018fa:	f7ff fc69 	bl	80011d0 <main>

080018fe <LoopForever>:

LoopForever:
    b LoopForever
 80018fe:	e7fe      	b.n	80018fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001900:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000904 	.word	0x20000904
  ldr r2, =_sidata
 800190c:	0800be5c 	.word	0x0800be5c
  ldr r2, =_sbss
 8001910:	20000920 	.word	0x20000920
  ldr r4, =_ebss
 8001914:	20000c8c 	.word	0x20000c8c

08001918 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC1_IRQHandler>

0800191a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001920:	2300      	movs	r3, #0
 8001922:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f961 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f80e 	bl	800194c <HAL_InitTick>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	e001      	b.n	8001940 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800193c:	f7ff fe06 	bl	800154c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001940:	79fb      	ldrb	r3, [r7, #7]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_InitTick+0x6c>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_InitTick+0x70>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_InitTick+0x6c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f96d 	bl	8001c56 <HAL_SYSTICK_Config>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d809      	bhi.n	800199c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f937 	bl	8001c02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001994:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <HAL_InitTick+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e007      	b.n	80019ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e004      	b.n	80019ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	e001      	b.n	80019ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200009d0 	.word	0x200009d0

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200009d0 	.word	0x200009d0

08001a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a0c:	f7ff ffee 	bl	80019ec <HAL_GetTick>
 8001a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1c:	d005      	beq.n	8001a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_Delay+0x44>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2a:	bf00      	nop
 8001a2c:	f7ff ffde 	bl	80019ec <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d8f7      	bhi.n	8001a2c <HAL_Delay+0x28>
  {
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	@ (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	@ (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	@ (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	@ 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d008      	beq.n	8001c98 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e022      	b.n	8001cde <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 020e 	bic.w	r2, r2, #14
 8001ca6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0201 	bic.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	f003 021c 	and.w	r2, r3, #28
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d005      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e029      	b.n	8001d62 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 020e 	bic.w	r2, r2, #14
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f003 021c 	and.w	r2, r3, #28
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
    }
  }
  return status;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e148      	b.n	800200e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	2101      	movs	r1, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 813a 	beq.w	8002008 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d005      	beq.n	8001dac <HAL_GPIO_Init+0x40>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d017      	beq.n	8001e4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d123      	bne.n	8001e9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	08da      	lsrs	r2, r3, #3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	08da      	lsrs	r2, r3, #3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3208      	adds	r2, #8
 8001e98:	6939      	ldr	r1, [r7, #16]
 8001e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0203 	and.w	r2, r3, #3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8094 	beq.w	8002008 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee0:	4b52      	ldr	r3, [pc, #328]	@ (800202c <HAL_GPIO_Init+0x2c0>)
 8001ee2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee4:	4a51      	ldr	r2, [pc, #324]	@ (800202c <HAL_GPIO_Init+0x2c0>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eec:	4b4f      	ldr	r3, [pc, #316]	@ (800202c <HAL_GPIO_Init+0x2c0>)
 8001eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8002030 <HAL_GPIO_Init+0x2c4>)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	220f      	movs	r2, #15
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f22:	d00d      	beq.n	8001f40 <HAL_GPIO_Init+0x1d4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a43      	ldr	r2, [pc, #268]	@ (8002034 <HAL_GPIO_Init+0x2c8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_Init+0x1d0>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a42      	ldr	r2, [pc, #264]	@ (8002038 <HAL_GPIO_Init+0x2cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_GPIO_Init+0x1cc>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e004      	b.n	8001f42 <HAL_GPIO_Init+0x1d6>
 8001f38:	2307      	movs	r3, #7
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x1d6>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <HAL_GPIO_Init+0x1d6>
 8001f40:	2300      	movs	r3, #0
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	f002 0203 	and.w	r2, r2, #3
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	4093      	lsls	r3, r2
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f52:	4937      	ldr	r1, [pc, #220]	@ (8002030 <HAL_GPIO_Init+0x2c4>)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f60:	4b36      	ldr	r3, [pc, #216]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f84:	4a2d      	ldr	r2, [pc, #180]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fae:	4a23      	ldr	r2, [pc, #140]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd8:	4a18      	ldr	r2, [pc, #96]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001fde:	4b17      	ldr	r3, [pc, #92]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002002:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <HAL_GPIO_Init+0x2d0>)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	f47f aeaf 	bne.w	8001d7c <HAL_GPIO_Init+0x10>
  }
}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	40021000 	.word	0x40021000
 8002030:	40010000 	.word	0x40010000
 8002034:	48000400 	.word	0x48000400
 8002038:	48000800 	.word	0x48000800
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800205c:	e002      	b.n	8002064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <HAL_PWREx_GetVoltageRange+0x18>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40007000 	.word	0x40007000

0800208c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800209a:	d130      	bne.n	80020fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800209c:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a8:	d038      	beq.n	800211c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020b2:	4a1e      	ldr	r2, [pc, #120]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2232      	movs	r2, #50	@ 0x32
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002134 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	3301      	adds	r3, #1
 80020ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d0:	e002      	b.n	80020d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	695b      	ldr	r3, [r3, #20]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e4:	d102      	bne.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f2      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020f8:	d110      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e00f      	b.n	800211e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fe:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210a:	d007      	beq.n	800211c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800210c:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002114:	4a05      	ldr	r2, [pc, #20]	@ (800212c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40007000 	.word	0x40007000
 8002130:	20000000 	.word	0x20000000
 8002134:	431bde83 	.word	0x431bde83

08002138 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f000 bc02 	b.w	8002950 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214c:	4b96      	ldr	r3, [pc, #600]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002156:	4b94      	ldr	r3, [pc, #592]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80e4 	beq.w	8002336 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_RCC_OscConfig+0x4c>
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2b0c      	cmp	r3, #12
 8002178:	f040 808b 	bne.w	8002292 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b01      	cmp	r3, #1
 8002180:	f040 8087 	bne.w	8002292 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002184:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_OscConfig+0x64>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e3d9      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1a      	ldr	r2, [r3, #32]
 80021a0:	4b81      	ldr	r3, [pc, #516]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_RCC_OscConfig+0x7e>
 80021ac:	4b7e      	ldr	r3, [pc, #504]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021b4:	e005      	b.n	80021c2 <HAL_RCC_OscConfig+0x8a>
 80021b6:	4b7c      	ldr	r3, [pc, #496]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d223      	bcs.n	800220e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fd8c 	bl	8002ce8 <RCC_SetFlashLatencyFromMSIRange>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e3ba      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021da:	4b73      	ldr	r3, [pc, #460]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a72      	ldr	r2, [pc, #456]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	4b70      	ldr	r3, [pc, #448]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	496d      	ldr	r1, [pc, #436]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f8:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	4968      	ldr	r1, [pc, #416]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e025      	b.n	800225a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800220e:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a65      	ldr	r2, [pc, #404]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4960      	ldr	r1, [pc, #384]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800222c:	4b5e      	ldr	r3, [pc, #376]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	495b      	ldr	r1, [pc, #364]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fd4c 	bl	8002ce8 <RCC_SetFlashLatencyFromMSIRange>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e37a      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800225a:	f000 fc81 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 800225e:	4602      	mov	r2, r0
 8002260:	4b51      	ldr	r3, [pc, #324]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	4950      	ldr	r1, [pc, #320]	@ (80023ac <HAL_RCC_OscConfig+0x274>)
 800226c:	5ccb      	ldrb	r3, [r1, r3]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	fa22 f303 	lsr.w	r3, r2, r3
 8002276:	4a4e      	ldr	r2, [pc, #312]	@ (80023b0 <HAL_RCC_OscConfig+0x278>)
 8002278:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800227a:	4b4e      	ldr	r3, [pc, #312]	@ (80023b4 <HAL_RCC_OscConfig+0x27c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fb64 	bl	800194c <HAL_InitTick>
 8002284:	4603      	mov	r3, r0
 8002286:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d052      	beq.n	8002334 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	e35e      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d032      	beq.n	8002300 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800229a:	4b43      	ldr	r3, [pc, #268]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a42      	ldr	r2, [pc, #264]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022a6:	f7ff fba1 	bl	80019ec <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ae:	f7ff fb9d 	bl	80019ec <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e347      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022c0:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022cc:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a35      	ldr	r2, [pc, #212]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	4b33      	ldr	r3, [pc, #204]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	4930      	ldr	r1, [pc, #192]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ea:	4b2f      	ldr	r3, [pc, #188]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
 80022fe:	e01a      	b.n	8002336 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002300:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800230c:	f7ff fb6e 	bl	80019ec <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002314:	f7ff fb6a 	bl	80019ec <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e314      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x1dc>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d073      	beq.n	800242a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x21c>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d10e      	bne.n	800236c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d10b      	bne.n	800236c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d063      	beq.n	8002428 <HAL_RCC_OscConfig+0x2f0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d15f      	bne.n	8002428 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e2f1      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d106      	bne.n	8002384 <HAL_RCC_OscConfig+0x24c>
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e025      	b.n	80023d0 <HAL_RCC_OscConfig+0x298>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800238c:	d114      	bne.n	80023b8 <HAL_RCC_OscConfig+0x280>
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a05      	ldr	r2, [pc, #20]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 8002394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a02      	ldr	r2, [pc, #8]	@ (80023a8 <HAL_RCC_OscConfig+0x270>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e013      	b.n	80023d0 <HAL_RCC_OscConfig+0x298>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	0800af74 	.word	0x0800af74
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004
 80023b8:	4ba0      	ldr	r3, [pc, #640]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a9f      	ldr	r2, [pc, #636]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80023be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b9d      	ldr	r3, [pc, #628]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a9c      	ldr	r2, [pc, #624]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80023ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7ff fb08 	bl	80019ec <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e0:	f7ff fb04 	bl	80019ec <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	@ 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e2ae      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f2:	4b92      	ldr	r3, [pc, #584]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x2a8>
 80023fe:	e014      	b.n	800242a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7ff faf4 	bl	80019ec <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002408:	f7ff faf0 	bl	80019ec <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b64      	cmp	r3, #100	@ 0x64
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e29a      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800241a:	4b88      	ldr	r3, [pc, #544]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x2d0>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d060      	beq.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b04      	cmp	r3, #4
 800243a:	d005      	beq.n	8002448 <HAL_RCC_OscConfig+0x310>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d119      	bne.n	8002476 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d116      	bne.n	8002476 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	4b7c      	ldr	r3, [pc, #496]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x328>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e277      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b76      	ldr	r3, [pc, #472]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	4973      	ldr	r1, [pc, #460]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002474:	e040      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d023      	beq.n	80024c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800247e:	4b6f      	ldr	r3, [pc, #444]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6e      	ldr	r2, [pc, #440]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7ff faaf 	bl	80019ec <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002492:	f7ff faab 	bl	80019ec <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e255      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a4:	4b65      	ldr	r3, [pc, #404]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b0:	4b62      	ldr	r3, [pc, #392]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	061b      	lsls	r3, r3, #24
 80024be:	495f      	ldr	r1, [pc, #380]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
 80024c4:	e018      	b.n	80024f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024c6:	4b5d      	ldr	r3, [pc, #372]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a5c      	ldr	r2, [pc, #368]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff fa8b 	bl	80019ec <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff fa87 	bl	80019ec <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e231      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024ec:	4b53      	ldr	r3, [pc, #332]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d03c      	beq.n	800257e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01c      	beq.n	8002546 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250c:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002512:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff fa66 	bl	80019ec <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7ff fa62 	bl	80019ec <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e20c      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002536:	4b41      	ldr	r3, [pc, #260]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ef      	beq.n	8002524 <HAL_RCC_OscConfig+0x3ec>
 8002544:	e01b      	b.n	800257e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002546:	4b3d      	ldr	r3, [pc, #244]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254c:	4a3b      	ldr	r2, [pc, #236]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7ff fa49 	bl	80019ec <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255e:	f7ff fa45 	bl	80019ec <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e1ef      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002570:	4b32      	ldr	r3, [pc, #200]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ef      	bne.n	800255e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80a6 	beq.w	80026d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800258c:	2300      	movs	r3, #0
 800258e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002590:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	4a26      	ldr	r2, [pc, #152]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80025a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a8:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b8:	4b21      	ldr	r3, [pc, #132]	@ (8002640 <HAL_RCC_OscConfig+0x508>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d118      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <HAL_RCC_OscConfig+0x508>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002640 <HAL_RCC_OscConfig+0x508>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025d0:	f7ff fa0c 	bl	80019ec <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d8:	f7ff fa08 	bl	80019ec <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1b2      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_RCC_OscConfig+0x508>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x4d8>
 80025fe:	4b0f      	ldr	r3, [pc, #60]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800260e:	e029      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d115      	bne.n	8002644 <HAL_RCC_OscConfig+0x50c>
 8002618:	4b08      	ldr	r3, [pc, #32]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	4a03      	ldr	r2, [pc, #12]	@ (800263c <HAL_RCC_OscConfig+0x504>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002638:	e014      	b.n	8002664 <HAL_RCC_OscConfig+0x52c>
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	4b9a      	ldr	r3, [pc, #616]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	4a99      	ldr	r2, [pc, #612]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002654:	4b96      	ldr	r3, [pc, #600]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a95      	ldr	r2, [pc, #596]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d016      	beq.n	800269a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f9be 	bl	80019ec <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7ff f9ba 	bl	80019ec <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e162      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	4b89      	ldr	r3, [pc, #548]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ed      	beq.n	8002674 <HAL_RCC_OscConfig+0x53c>
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7ff f9a7 	bl	80019ec <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7ff f9a3 	bl	80019ec <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e14b      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b8:	4b7d      	ldr	r3, [pc, #500]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ed      	bne.n	80026a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c6:	7ffb      	ldrb	r3, [r7, #31]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026cc:	4b78      	ldr	r3, [pc, #480]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d0:	4a77      	ldr	r2, [pc, #476]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80026d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0320 	and.w	r3, r3, #32
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d03c      	beq.n	800275e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d01c      	beq.n	8002726 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026ec:	4b70      	ldr	r3, [pc, #448]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80026ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026f2:	4a6f      	ldr	r2, [pc, #444]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff f976 	bl	80019ec <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002704:	f7ff f972 	bl	80019ec <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e11c      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002716:	4b66      	ldr	r3, [pc, #408]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002718:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ef      	beq.n	8002704 <HAL_RCC_OscConfig+0x5cc>
 8002724:	e01b      	b.n	800275e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002726:	4b62      	ldr	r3, [pc, #392]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002728:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800272c:	4a60      	ldr	r2, [pc, #384]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7ff f959 	bl	80019ec <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800273e:	f7ff f955 	bl	80019ec <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0ff      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002750:	4b57      	ldr	r3, [pc, #348]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002752:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1ef      	bne.n	800273e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 80f3 	beq.w	800294e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276c:	2b02      	cmp	r3, #2
 800276e:	f040 80c9 	bne.w	8002904 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002772:	4b4f      	ldr	r3, [pc, #316]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f003 0203 	and.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	429a      	cmp	r2, r3
 8002784:	d12c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	3b01      	subs	r3, #1
 8002792:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d123      	bne.n	80027e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d11b      	bne.n	80027e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d113      	bne.n	80027e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d109      	bne.n	80027e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	3b01      	subs	r3, #1
 80027da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d06b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d062      	beq.n	80028ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027e6:	4b32      	ldr	r3, [pc, #200]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0ac      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f6:	4b2e      	ldr	r3, [pc, #184]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a2d      	ldr	r2, [pc, #180]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80027fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002800:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002802:	f7ff f8f3 	bl	80019ec <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff f8ef 	bl	80019ec <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e099      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800281c:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002828:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <HAL_RCC_OscConfig+0x77c>)
 800282e:	4013      	ands	r3, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002838:	3a01      	subs	r2, #1
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002842:	0212      	lsls	r2, r2, #8
 8002844:	4311      	orrs	r1, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800284a:	0852      	lsrs	r2, r2, #1
 800284c:	3a01      	subs	r2, #1
 800284e:	0552      	lsls	r2, r2, #21
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002856:	0852      	lsrs	r2, r2, #1
 8002858:	3a01      	subs	r2, #1
 800285a:	0652      	lsls	r2, r2, #25
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002862:	06d2      	lsls	r2, r2, #27
 8002864:	430a      	orrs	r2, r1
 8002866:	4912      	ldr	r1, [pc, #72]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002868:	4313      	orrs	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800286c:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a0f      	ldr	r2, [pc, #60]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 8002872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002878:	4b0d      	ldr	r3, [pc, #52]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a0c      	ldr	r2, [pc, #48]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 800287e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002884:	f7ff f8b2 	bl	80019ec <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288c:	f7ff f8ae 	bl	80019ec <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e058      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <HAL_RCC_OscConfig+0x778>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028aa:	e050      	b.n	800294e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e04f      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
 80028b0:	40021000 	.word	0x40021000
 80028b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d144      	bne.n	800294e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028c4:	4b24      	ldr	r3, [pc, #144]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a23      	ldr	r2, [pc, #140]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d0:	4b21      	ldr	r3, [pc, #132]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a20      	ldr	r2, [pc, #128]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028dc:	f7ff f886 	bl	80019ec <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff f882 	bl	80019ec <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e02c      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x7ac>
 8002902:	e024      	b.n	800294e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d01f      	beq.n	800294a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b13      	ldr	r3, [pc, #76]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 8002910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7ff f869 	bl	80019ec <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291e:	f7ff f865 	bl	80019ec <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e00f      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1f0      	bne.n	800291e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800293c:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4905      	ldr	r1, [pc, #20]	@ (8002958 <HAL_RCC_OscConfig+0x820>)
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_RCC_OscConfig+0x824>)
 8002944:	4013      	ands	r3, r2
 8002946:	60cb      	str	r3, [r1, #12]
 8002948:	e001      	b.n	800294e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	feeefffc 	.word	0xfeeefffc

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0e7      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b75      	ldr	r3, [pc, #468]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b72      	ldr	r3, [pc, #456]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4970      	ldr	r1, [pc, #448]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cf      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b66      	ldr	r3, [pc, #408]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029bc:	429a      	cmp	r2, r3
 80029be:	d908      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4960      	ldr	r1, [pc, #384]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04c      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d121      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0a6      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	4b54      	ldr	r3, [pc, #336]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09a      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a26:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e086      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b46      	ldr	r3, [pc, #280]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4943      	ldr	r1, [pc, #268]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe ffd0 	bl	80019ec <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe ffcc 	bl	80019ec <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e06e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b3a      	ldr	r3, [pc, #232]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d208      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	492b      	ldr	r1, [pc, #172]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa6:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d210      	bcs.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab4:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4923      	ldr	r1, [pc, #140]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e036      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4910      	ldr	r1, [pc, #64]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b14:	f000 f824 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	490b      	ldr	r1, [pc, #44]	@ (8002b54 <HAL_RCC_ClockConfig+0x1f4>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_RCC_ClockConfig+0x1fc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ff07 	bl	800194c <HAL_InitTick>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	0800af74 	.word	0x0800af74
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b94:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba0:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be4:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d134      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d003      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xac>
 8002c04:	e005      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c08:	617b      	str	r3, [r7, #20]
      break;
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0e:	617b      	str	r3, [r7, #20]
      break;
 8002c10:	e002      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	617b      	str	r3, [r7, #20]
      break;
 8002c16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	0e5b      	lsrs	r3, r3, #25
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c58:	69bb      	ldr	r3, [r7, #24]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	0800af8c 	.word	0x0800af8c
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200

08002c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4904      	ldr	r1, [pc, #16]	@ (8002cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	0800af84 	.word	0x0800af84

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cc0:	f7ff ffda 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0adb      	lsrs	r3, r3, #11
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4904      	ldr	r1, [pc, #16]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	0800af84 	.word	0x0800af84

08002ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f9b6 	bl	8002070 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
 8002d06:	e014      	b.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d14:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d20:	f7ff f9a6 	bl	8002070 <HAL_PWREx_GetVoltageRange>
 8002d24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d38:	d10b      	bne.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d919      	bls.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d44:	d902      	bls.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d46:	2302      	movs	r3, #2
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e013      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e010      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b80      	cmp	r3, #128	@ 0x80
 8002d56:	d902      	bls.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d58:	2303      	movs	r3, #3
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e00a      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b80      	cmp	r3, #128	@ 0x80
 8002d62:	d102      	bne.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d64:	2302      	movs	r3, #2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e004      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b70      	cmp	r3, #112	@ 0x70
 8002d6e:	d101      	bne.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	4909      	ldr	r1, [pc, #36]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40022000 	.word	0x40022000

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db4:	2300      	movs	r3, #0
 8002db6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d031      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dcc:	d01a      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002dce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dd2:	d814      	bhi.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dd8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ddc:	d10f      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002dde:	4b5d      	ldr	r3, [pc, #372]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dea:	e00c      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3304      	adds	r3, #4
 8002df0:	2100      	movs	r1, #0
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f9de 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfc:	e003      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	74fb      	strb	r3, [r7, #19]
      break;
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e06:	7cfb      	ldrb	r3, [r7, #19]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e0c:	4b51      	ldr	r3, [pc, #324]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	494e      	ldr	r1, [pc, #312]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 809e 	beq.w	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e3a:	4b46      	ldr	r3, [pc, #280]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e50:	4b40      	ldr	r3, [pc, #256]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	4a3f      	ldr	r2, [pc, #252]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a39      	ldr	r2, [pc, #228]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fdb8 	bl	80019ec <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e7e:	e009      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe fdb4 	bl	80019ec <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	74fb      	strb	r3, [r7, #19]
        break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e94:	4b30      	ldr	r3, [pc, #192]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ef      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d15a      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002eb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01e      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d019      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ec2:	4b24      	ldr	r3, [pc, #144]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ecc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ece:	4b21      	ldr	r3, [pc, #132]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eee:	4a19      	ldr	r2, [pc, #100]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d016      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7fe fd74 	bl	80019ec <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	e00b      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fd70 	bl	80019ec <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d902      	bls.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f1e:	e006      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f20:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0ec      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f34:	4b07      	ldr	r3, [pc, #28]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f42:	4904      	ldr	r1, [pc, #16]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002f4a:	e009      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	74bb      	strb	r3, [r7, #18]
 8002f50:	e006      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f60:	7c7b      	ldrb	r3, [r7, #17]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f66:	4b8a      	ldr	r3, [pc, #552]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	4a89      	ldr	r2, [pc, #548]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f7e:	4b84      	ldr	r3, [pc, #528]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f84:	f023 0203 	bic.w	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4980      	ldr	r1, [pc, #512]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa0:	4b7b      	ldr	r3, [pc, #492]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f023 020c 	bic.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	4978      	ldr	r1, [pc, #480]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc2:	4b73      	ldr	r3, [pc, #460]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd0:	496f      	ldr	r1, [pc, #444]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff2:	4967      	ldr	r1, [pc, #412]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003006:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	495e      	ldr	r1, [pc, #376]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003028:	4b59      	ldr	r3, [pc, #356]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003036:	4956      	ldr	r1, [pc, #344]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800304a:	4b51      	ldr	r3, [pc, #324]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800304c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003050:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	494d      	ldr	r1, [pc, #308]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d028      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800306c:	4b48      	ldr	r3, [pc, #288]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	4945      	ldr	r1, [pc, #276]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800308a:	d106      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800308c:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a3f      	ldr	r2, [pc, #252]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003096:	60d3      	str	r3, [r2, #12]
 8003098:	e011      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030a2:	d10c      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f882 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d028      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030ca:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d8:	492d      	ldr	r1, [pc, #180]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ea:	4b29      	ldr	r3, [pc, #164]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	4a28      	ldr	r2, [pc, #160]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030f4:	60d3      	str	r3, [r2, #12]
 80030f6:	e011      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003100:	d10c      	bne.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f853 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 800310e:	4603      	mov	r3, r0
 8003110:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003112:	7cfb      	ldrb	r3, [r7, #19]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003118:	7cfb      	ldrb	r3, [r7, #19]
 800311a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01c      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003128:	4b19      	ldr	r3, [pc, #100]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003136:	4916      	ldr	r1, [pc, #88]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003142:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003146:	d10c      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2102      	movs	r1, #2
 800314e:	4618      	mov	r0, r3
 8003150:	f000 f830 	bl	80031b4 <RCCEx_PLLSAI1_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800315e:	7cfb      	ldrb	r3, [r7, #19]
 8003160:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003174:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317c:	4904      	ldr	r1, [pc, #16]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003184:	7cbb      	ldrb	r3, [r7, #18]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a04      	ldr	r2, [pc, #16]	@ (80031b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6013      	str	r3, [r2, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000

080031b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031c2:	4b74      	ldr	r3, [pc, #464]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d018      	beq.n	8003200 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ce:	4b71      	ldr	r3, [pc, #452]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0203 	and.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10d      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
       ||
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80031e6:	4b6b      	ldr	r3, [pc, #428]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	091b      	lsrs	r3, r3, #4
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
       ||
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d047      	beq.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	e044      	b.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d018      	beq.n	800323a <RCCEx_PLLSAI1_Config+0x86>
 8003208:	2b03      	cmp	r3, #3
 800320a:	d825      	bhi.n	8003258 <RCCEx_PLLSAI1_Config+0xa4>
 800320c:	2b01      	cmp	r3, #1
 800320e:	d002      	beq.n	8003216 <RCCEx_PLLSAI1_Config+0x62>
 8003210:	2b02      	cmp	r3, #2
 8003212:	d009      	beq.n	8003228 <RCCEx_PLLSAI1_Config+0x74>
 8003214:	e020      	b.n	8003258 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003216:	4b5f      	ldr	r3, [pc, #380]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d11d      	bne.n	800325e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003226:	e01a      	b.n	800325e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003228:	4b5a      	ldr	r3, [pc, #360]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e013      	b.n	8003262 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800323a:	4b56      	ldr	r3, [pc, #344]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003246:	4b53      	ldr	r3, [pc, #332]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003256:	e006      	b.n	8003266 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
      break;
 800325c:	e004      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800325e:	bf00      	nop
 8003260:	e002      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003266:	bf00      	nop
    }

    if(status == HAL_OK)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10d      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800326e:	4b49      	ldr	r3, [pc, #292]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	3b01      	subs	r3, #1
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	430b      	orrs	r3, r1
 8003284:	4943      	ldr	r1, [pc, #268]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d17c      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003290:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a3f      	ldr	r2, [pc, #252]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fe fba6 	bl	80019ec <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a4:	f7fe fba2 	bl	80019ec <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e005      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032b8:	4b36      	ldr	r3, [pc, #216]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ef      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d15f      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d110      	bne.n	80032f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d0:	4b30      	ldr	r3, [pc, #192]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80032d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6892      	ldr	r2, [r2, #8]
 80032e0:	0211      	lsls	r1, r2, #8
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68d2      	ldr	r2, [r2, #12]
 80032e6:	06d2      	lsls	r2, r2, #27
 80032e8:	430a      	orrs	r2, r1
 80032ea:	492a      	ldr	r1, [pc, #168]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	610b      	str	r3, [r1, #16]
 80032f0:	e027      	b.n	8003342 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d112      	bne.n	800331e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b26      	ldr	r3, [pc, #152]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6912      	ldr	r2, [r2, #16]
 800330e:	0852      	lsrs	r2, r2, #1
 8003310:	3a01      	subs	r2, #1
 8003312:	0552      	lsls	r2, r2, #21
 8003314:	430a      	orrs	r2, r1
 8003316:	491f      	ldr	r1, [pc, #124]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003318:	4313      	orrs	r3, r2
 800331a:	610b      	str	r3, [r1, #16]
 800331c:	e011      	b.n	8003342 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800331e:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003326:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	0211      	lsls	r1, r2, #8
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6952      	ldr	r2, [r2, #20]
 8003334:	0852      	lsrs	r2, r2, #1
 8003336:	3a01      	subs	r2, #1
 8003338:	0652      	lsls	r2, r2, #25
 800333a:	430a      	orrs	r2, r1
 800333c:	4915      	ldr	r1, [pc, #84]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003342:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a13      	ldr	r2, [pc, #76]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800334c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fb4d 	bl	80019ec <HAL_GetTick>
 8003352:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003354:	e009      	b.n	800336a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003356:	f7fe fb49 	bl	80019ec <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d902      	bls.n	800336a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	73fb      	strb	r3, [r7, #15]
          break;
 8003368:	e005      	b.n	8003376 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ef      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003376:	7bfb      	ldrb	r3, [r7, #15]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800337c:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	4903      	ldr	r1, [pc, #12]	@ (8003394 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003386:	4313      	orrs	r3, r2
 8003388:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000

08003398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e040      	b.n	800342c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe fa12 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0201 	bic.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fecc 	bl	800417c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fc9d 	bl	8003d24 <UART_SetConfig>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01b      	b.n	800342c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003402:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003412:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 ff4b 	bl	80042c0 <UART_CheckIdleState>
 800342a:	4603      	mov	r3, r0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	603b      	str	r3, [r7, #0]
 8003440:	4613      	mov	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003448:	2b20      	cmp	r3, #32
 800344a:	d177      	bne.n	800353c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_UART_Transmit+0x24>
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e070      	b.n	800353e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2221      	movs	r2, #33	@ 0x21
 8003468:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800346a:	f7fe fabf 	bl	80019ec <HAL_GetTick>
 800346e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003488:	d108      	bne.n	800349c <HAL_UART_Transmit+0x68>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	e003      	b.n	80034a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034a4:	e02f      	b.n	8003506 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	2200      	movs	r2, #0
 80034ae:	2180      	movs	r1, #128	@ 0x80
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 ffad 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e03b      	b.n	800353e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	881a      	ldrh	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d8:	b292      	uxth	r2, r2
 80034da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	3302      	adds	r3, #2
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e007      	b.n	80034f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1c9      	bne.n	80034a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2140      	movs	r1, #64	@ 0x40
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 ff77 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e005      	b.n	800353e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	e000      	b.n	800353e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800353c:	2302      	movs	r3, #2
  }
}
 800353e:	4618      	mov	r0, r3
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b08a      	sub	sp, #40	@ 0x28
 800354a:	af02      	add	r7, sp, #8
 800354c:	60f8      	str	r0, [r7, #12]
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800355c:	2b20      	cmp	r3, #32
 800355e:	f040 80b6 	bne.w	80036ce <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_UART_Receive+0x28>
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0ae      	b.n	80036d0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2222      	movs	r2, #34	@ 0x22
 800357e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003588:	f7fe fa30 	bl	80019ec <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	d10e      	bne.n	80035c6 <HAL_UART_Receive+0x80>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_Receive+0x76>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80035b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035ba:	e02d      	b.n	8003618 <HAL_UART_Receive+0xd2>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	22ff      	movs	r2, #255	@ 0xff
 80035c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035c4:	e028      	b.n	8003618 <HAL_UART_Receive+0xd2>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10d      	bne.n	80035ea <HAL_UART_Receive+0xa4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <HAL_UART_Receive+0x9a>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	22ff      	movs	r2, #255	@ 0xff
 80035da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035de:	e01b      	b.n	8003618 <HAL_UART_Receive+0xd2>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	227f      	movs	r2, #127	@ 0x7f
 80035e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035e8:	e016      	b.n	8003618 <HAL_UART_Receive+0xd2>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035f2:	d10d      	bne.n	8003610 <HAL_UART_Receive+0xca>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_UART_Receive+0xc0>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	227f      	movs	r2, #127	@ 0x7f
 8003600:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003604:	e008      	b.n	8003618 <HAL_UART_Receive+0xd2>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	223f      	movs	r2, #63	@ 0x3f
 800360a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800360e:	e003      	b.n	8003618 <HAL_UART_Receive+0xd2>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800361e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d108      	bne.n	800363c <HAL_UART_Receive+0xf6>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e003      	b.n	8003644 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003644:	e037      	b.n	80036b6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2120      	movs	r1, #32
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fedd 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e033      	b.n	80036d0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003674:	b29a      	uxth	r2, r3
 8003676:	8a7b      	ldrh	r3, [r7, #18]
 8003678:	4013      	ands	r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	3302      	adds	r3, #2
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	e00d      	b.n	80036a4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800368e:	b29b      	uxth	r3, r3
 8003690:	b2da      	uxtb	r2, r3
 8003692:	8a7b      	ldrh	r3, [r7, #18]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	4013      	ands	r3, r2
 8003698:	b2da      	uxtb	r2, r3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1c1      	bne.n	8003646 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0ba      	sub	sp, #232	@ 0xe8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003702:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003706:	4013      	ands	r3, r2
 8003708:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800370c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d115      	bne.n	8003740 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003724:	f003 0320 	and.w	r3, r3, #32
 8003728:	2b00      	cmp	r3, #0
 800372a:	d009      	beq.n	8003740 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 82ca 	beq.w	8003cca <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
      }
      return;
 800373e:	e2c4      	b.n	8003cca <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 8117 	beq.w	8003978 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800374a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800375a:	4b85      	ldr	r3, [pc, #532]	@ (8003970 <HAL_UART_IRQHandler+0x298>)
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 810a 	beq.w	8003978 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	d011      	beq.n	8003794 <HAL_UART_IRQHandler+0xbc>
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378a:	f043 0201 	orr.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d011      	beq.n	80037c4 <HAL_UART_IRQHandler+0xec>
 80037a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2202      	movs	r2, #2
 80037b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ba:	f043 0204 	orr.w	r2, r3, #4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d011      	beq.n	80037f4 <HAL_UART_IRQHandler+0x11c>
 80037d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2204      	movs	r2, #4
 80037e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037ea:	f043 0202 	orr.w	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d017      	beq.n	8003830 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800380c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003810:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003826:	f043 0208 	orr.w	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003838:	2b00      	cmp	r3, #0
 800383a:	d012      	beq.n	8003862 <HAL_UART_IRQHandler+0x18a>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8230 	beq.w	8003cce <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d007      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800389c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04f      	beq.n	800395a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fe15 	bl	80044ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d141      	bne.n	8003952 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1d9      	bne.n	80038ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003926:	4a13      	ldr	r2, [pc, #76]	@ (8003974 <HAL_UART_IRQHandler+0x29c>)
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f9db 	bl	8001cea <HAL_DMA_Abort_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d017      	beq.n	800396a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003944:	4610      	mov	r0, r2
 8003946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e00f      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9d4 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e00b      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9d0 	bl	8003cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e007      	b.n	800396a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9cc 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003968:	e1b1      	b.n	8003cce <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396a:	bf00      	nop
    return;
 800396c:	e1af      	b.n	8003cce <HAL_UART_IRQHandler+0x5f6>
 800396e:	bf00      	nop
 8003970:	04000120 	.word	0x04000120
 8003974:	080045b3 	.word	0x080045b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800397c:	2b01      	cmp	r3, #1
 800397e:	f040 816a 	bne.w	8003c56 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 8163 	beq.w	8003c56 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 815c 	beq.w	8003c56 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2210      	movs	r2, #16
 80039a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	f040 80d4 	bne.w	8003b5e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80ad 	beq.w	8003b26 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f080 80a5 	bcs.w	8003b26 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 8086 	bne.w	8003b04 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a26:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1da      	bne.n	80039f8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3308      	adds	r3, #8
 8003a48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3308      	adds	r3, #8
 8003a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e1      	bne.n	8003a42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3308      	adds	r3, #8
 8003a84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aa2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aa4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aa8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e3      	bne.n	8003a7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad4:	f023 0310 	bic.w	r3, r3, #16
 8003ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ae8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e4      	bne.n	8003ac4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe f8b5 	bl	8001c6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8f4 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b24:	e0d5      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b30:	429a      	cmp	r2, r3
 8003b32:	f040 80ce 	bne.w	8003cd2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	f040 80c5 	bne.w	8003cd2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8d8 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
      return;
 8003b5c:	e0b9      	b.n	8003cd2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80ab 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 80a6 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b92:	e853 3f00 	ldrex	r3, [r3]
 8003b96:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e4      	bne.n	8003b8a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3308      	adds	r3, #8
 8003be0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003be4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e3      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f023 0310 	bic.w	r3, r3, #16
 8003c20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c2e:	61fb      	str	r3, [r7, #28]
 8003c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	69b9      	ldr	r1, [r7, #24]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e4      	bne.n	8003c0c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f85c 	bl	8003d0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c54:	e03f      	b.n	8003cd6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5a8>
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fcda 	bl	8004632 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c7e:	e02d      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01c      	beq.n	8003cda <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
    }
    return;
 8003ca8:	e017      	b.n	8003cda <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_UART_IRQHandler+0x604>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00c      	beq.n	8003cdc <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc8b 	bl	80045de <UART_EndTransmit_IT>
    return;
 8003cc8:	e008      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cca:	bf00      	nop
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
    return;
 8003cce:	bf00      	nop
 8003cd0:	e004      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cd2:	bf00      	nop
 8003cd4:	e002      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_IRQHandler+0x604>
    return;
 8003cda:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003cdc:	37e8      	adds	r7, #232	@ 0xe8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop

08003ce4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d28:	b08a      	sub	sp, #40	@ 0x28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4bb4      	ldr	r3, [pc, #720]	@ (8004024 <UART_SetConfig+0x300>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4aa9      	ldr	r2, [pc, #676]	@ (8004028 <UART_SetConfig+0x304>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4aa0      	ldr	r2, [pc, #640]	@ (800402c <UART_SetConfig+0x308>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d126      	bne.n	8003dfc <UART_SetConfig+0xd8>
 8003dae:	4ba0      	ldr	r3, [pc, #640]	@ (8004030 <UART_SetConfig+0x30c>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d81b      	bhi.n	8003df4 <UART_SetConfig+0xd0>
 8003dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc4 <UART_SetConfig+0xa0>)
 8003dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc2:	bf00      	nop
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dda:	e080      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003de2:	e07c      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dea:	e078      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003df2:	e074      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dfa:	e070      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a8c      	ldr	r2, [pc, #560]	@ (8004034 <UART_SetConfig+0x310>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d138      	bne.n	8003e78 <UART_SetConfig+0x154>
 8003e06:	4b8a      	ldr	r3, [pc, #552]	@ (8004030 <UART_SetConfig+0x30c>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d82d      	bhi.n	8003e70 <UART_SetConfig+0x14c>
 8003e14:	a201      	add	r2, pc, #4	@ (adr r2, 8003e1c <UART_SetConfig+0xf8>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e56:	e042      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e5e:	e03e      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e66:	e03a      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6e:	e036      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e76:	e032      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004028 <UART_SetConfig+0x304>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d12a      	bne.n	8003ed8 <UART_SetConfig+0x1b4>
 8003e82:	4b6b      	ldr	r3, [pc, #428]	@ (8004030 <UART_SetConfig+0x30c>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e90:	d01a      	beq.n	8003ec8 <UART_SetConfig+0x1a4>
 8003e92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e96:	d81b      	bhi.n	8003ed0 <UART_SetConfig+0x1ac>
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e9c:	d00c      	beq.n	8003eb8 <UART_SetConfig+0x194>
 8003e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea2:	d815      	bhi.n	8003ed0 <UART_SetConfig+0x1ac>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <UART_SetConfig+0x18c>
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eac:	d008      	beq.n	8003ec0 <UART_SetConfig+0x19c>
 8003eae:	e00f      	b.n	8003ed0 <UART_SetConfig+0x1ac>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e012      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e00e      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e00a      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ece:	e006      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e002      	b.n	8003ede <UART_SetConfig+0x1ba>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a51      	ldr	r2, [pc, #324]	@ (8004028 <UART_SetConfig+0x304>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d17a      	bne.n	8003fde <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d824      	bhi.n	8003f3a <UART_SetConfig+0x216>
 8003ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef8 <UART_SetConfig+0x1d4>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f3b 	.word	0x08003f3b
 8003f00:	08003f25 	.word	0x08003f25
 8003f04:	08003f3b 	.word	0x08003f3b
 8003f08:	08003f2b 	.word	0x08003f2b
 8003f0c:	08003f3b 	.word	0x08003f3b
 8003f10:	08003f3b 	.word	0x08003f3b
 8003f14:	08003f3b 	.word	0x08003f3b
 8003f18:	08003f33 	.word	0x08003f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe feb8 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8003f20:	61f8      	str	r0, [r7, #28]
        break;
 8003f22:	e010      	b.n	8003f46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f24:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <UART_SetConfig+0x314>)
 8003f26:	61fb      	str	r3, [r7, #28]
        break;
 8003f28:	e00d      	b.n	8003f46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2a:	f7fe fe19 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8003f2e:	61f8      	str	r0, [r7, #28]
        break;
 8003f30:	e009      	b.n	8003f46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f36:	61fb      	str	r3, [r7, #28]
        break;
 8003f38:	e005      	b.n	8003f46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8107 	beq.w	800415c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	4413      	add	r3, r2
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d305      	bcc.n	8003f6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d903      	bls.n	8003f72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003f70:	e0f4      	b.n	800415c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2200      	movs	r2, #0
 8003f76:	461c      	mov	r4, r3
 8003f78:	4615      	mov	r5, r2
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	f04f 0300 	mov.w	r3, #0
 8003f82:	022b      	lsls	r3, r5, #8
 8003f84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f88:	0222      	lsls	r2, r4, #8
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	6849      	ldr	r1, [r1, #4]
 8003f8e:	0849      	lsrs	r1, r1, #1
 8003f90:	2000      	movs	r0, #0
 8003f92:	4688      	mov	r8, r1
 8003f94:	4681      	mov	r9, r0
 8003f96:	eb12 0a08 	adds.w	sl, r2, r8
 8003f9a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fac:	4650      	mov	r0, sl
 8003fae:	4659      	mov	r1, fp
 8003fb0:	f7fc fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fc2:	d308      	bcc.n	8003fd6 <UART_SetConfig+0x2b2>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fca:	d204      	bcs.n	8003fd6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	e0c2      	b.n	800415c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fdc:	e0be      	b.n	800415c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe6:	d16a      	bne.n	80040be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d834      	bhi.n	800405a <UART_SetConfig+0x336>
 8003ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <UART_SetConfig+0x2d4>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	0800403d 	.word	0x0800403d
 8004000:	08004045 	.word	0x08004045
 8004004:	0800405b 	.word	0x0800405b
 8004008:	0800404b 	.word	0x0800404b
 800400c:	0800405b 	.word	0x0800405b
 8004010:	0800405b 	.word	0x0800405b
 8004014:	0800405b 	.word	0x0800405b
 8004018:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401c:	f7fe fe38 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e020      	b.n	8004066 <UART_SetConfig+0x342>
 8004024:	efff69f3 	.word	0xefff69f3
 8004028:	40008000 	.word	0x40008000
 800402c:	40013800 	.word	0x40013800
 8004030:	40021000 	.word	0x40021000
 8004034:	40004400 	.word	0x40004400
 8004038:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7fe fe3e 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 8004040:	61f8      	str	r0, [r7, #28]
        break;
 8004042:	e010      	b.n	8004066 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b4c      	ldr	r3, [pc, #304]	@ (8004178 <UART_SetConfig+0x454>)
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e00d      	b.n	8004066 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7fe fd89 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 800404e:	61f8      	str	r0, [r7, #28]
        break;
 8004050:	e009      	b.n	8004066 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	61fb      	str	r3, [r7, #28]
        break;
 8004058:	e005      	b.n	8004066 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d077      	beq.n	800415c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005a      	lsls	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	441a      	add	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004080:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0f      	cmp	r3, #15
 8004086:	d916      	bls.n	80040b6 <UART_SetConfig+0x392>
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408e:	d212      	bcs.n	80040b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	b29b      	uxth	r3, r3
 8004094:	f023 030f 	bic.w	r3, r3, #15
 8004098:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	8afb      	ldrh	r3, [r7, #22]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	8afa      	ldrh	r2, [r7, #22]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e052      	b.n	800415c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040bc:	e04e      	b.n	800415c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d827      	bhi.n	8004116 <UART_SetConfig+0x3f2>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <UART_SetConfig+0x3a8>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	080040f9 	.word	0x080040f9
 80040d4:	08004101 	.word	0x08004101
 80040d8:	08004117 	.word	0x08004117
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004117 	.word	0x08004117
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004117 	.word	0x08004117
 80040ec:	0800410f 	.word	0x0800410f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f0:	f7fe fdce 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80040f4:	61f8      	str	r0, [r7, #28]
        break;
 80040f6:	e014      	b.n	8004122 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f8:	f7fe fde0 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 80040fc:	61f8      	str	r0, [r7, #28]
        break;
 80040fe:	e010      	b.n	8004122 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004100:	4b1d      	ldr	r3, [pc, #116]	@ (8004178 <UART_SetConfig+0x454>)
 8004102:	61fb      	str	r3, [r7, #28]
        break;
 8004104:	e00d      	b.n	8004122 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004106:	f7fe fd2b 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 800410a:	61f8      	str	r0, [r7, #28]
        break;
 800410c:	e009      	b.n	8004122 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004112:	61fb      	str	r3, [r7, #28]
        break;
 8004114:	e005      	b.n	8004122 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004120:	bf00      	nop
    }

    if (pclk != 0U)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d019      	beq.n	800415c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	441a      	add	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d909      	bls.n	8004156 <UART_SetConfig+0x432>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d205      	bcs.n	8004156 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	e002      	b.n	800415c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004168:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	@ 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	00f42400 	.word	0x00f42400

0800417c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01a      	beq.n	8004292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800427a:	d10a      	bne.n	8004292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b098      	sub	sp, #96	@ 0x60
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d0:	f7fd fb8c 	bl	80019ec <HAL_GetTick>
 80042d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d12e      	bne.n	8004342 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f88c 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d021      	beq.n	8004342 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800430c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004312:	653b      	str	r3, [r7, #80]	@ 0x50
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800431c:	647b      	str	r3, [r7, #68]	@ 0x44
 800431e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800432a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e6      	bne.n	80042fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e062      	b.n	8004408 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b04      	cmp	r3, #4
 800434e:	d149      	bne.n	80043e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f856 	bl	8004410 <UART_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03c      	beq.n	80043e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	623b      	str	r3, [r7, #32]
   return(result);
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800437e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004388:	633b      	str	r3, [r7, #48]	@ 0x30
 800438a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800438e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043bc:	61fa      	str	r2, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e011      	b.n	8004408 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3758      	adds	r7, #88	@ 0x58
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004420:	e04f      	b.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d04b      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fd fadf 	bl	80019ec <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <UART_WaitOnFlagUntilTimeout+0x30>
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e04e      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d037      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b80      	cmp	r3, #128	@ 0x80
 8004456:	d034      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b40      	cmp	r3, #64	@ 0x40
 800445c:	d031      	beq.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69db      	ldr	r3, [r3, #28]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d110      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2208      	movs	r2, #8
 8004472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f838 	bl	80044ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2208      	movs	r2, #8
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e029      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800449c:	d111      	bne.n	80044c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f81e 	bl	80044ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e00f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	bf0c      	ite	eq
 80044d2:	2301      	moveq	r3, #1
 80044d4:	2300      	movne	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d0a0      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b095      	sub	sp, #84	@ 0x54
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004506:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004510:	643b      	str	r3, [r7, #64]	@ 0x40
 8004512:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004516:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800451e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e6      	bne.n	80044f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	61fb      	str	r3, [r7, #28]
   return(result);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f023 0301 	bic.w	r3, r3, #1
 800453a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3308      	adds	r3, #8
 8004542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004544:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800454a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e5      	bne.n	8004524 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800455c:	2b01      	cmp	r3, #1
 800455e:	d118      	bne.n	8004592 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	60bb      	str	r3, [r7, #8]
   return(result);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f023 0310 	bic.w	r3, r3, #16
 8004574:	647b      	str	r3, [r7, #68]	@ 0x44
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e6      	bne.n	8004560 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045a6:	bf00      	nop
 80045a8:	3754      	adds	r7, #84	@ 0x54
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fb91 	bl	8003cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b088      	sub	sp, #32
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6979      	ldr	r1, [r7, #20]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	613b      	str	r3, [r7, #16]
   return(result);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e6      	bne.n	80045e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2220      	movs	r2, #32
 800461c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff fb5d 	bl	8003ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800462a:	bf00      	nop
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <ai_log_err>:
static ai_handle network = AI_HANDLE_NULL;
static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  if (fct)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d009      	beq.n	800466c <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct, err.type, err.code);
 8004658:	793b      	ldrb	r3, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4807      	ldr	r0, [pc, #28]	@ (8004684 <ai_log_err+0x3c>)
 8004666:	f003 fcaf 	bl	8007fc8 <iprintf>
 800466a:	e009      	b.n	8004680 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 800466c:	793b      	ldrb	r3, [r7, #4]
 800466e:	4619      	mov	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8004676:	461a      	mov	r2, r3
 8004678:	4803      	ldr	r0, [pc, #12]	@ (8004688 <ai_log_err+0x40>)
 800467a:	f003 fca5 	bl	8007fc8 <iprintf>
  while (1);
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <ai_log_err+0x38>
 8004684:	0800ae64 	.word	0x0800ae64
 8004688:	0800ae98 	.word	0x0800ae98

0800468c <ai_boostrap>:
}

static int ai_boostrap(ai_handle *act_addr)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  ai_error err;

  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004694:	2200      	movs	r2, #0
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4828      	ldr	r0, [pc, #160]	@ (800473c <ai_boostrap+0xb0>)
 800469a:	f000 fa17 	bl	8004acc <ai_network_create_and_init>
 800469e:	4603      	mov	r3, r0
 80046a0:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 80046a2:	7b3b      	ldrb	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d006      	beq.n	80046b6 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 80046a8:	4925      	ldr	r1, [pc, #148]	@ (8004740 <ai_boostrap+0xb4>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff ffcc 	bl	8004648 <ai_log_err>
    return -1;
 80046b0:	f04f 33ff 	mov.w	r3, #4294967295
 80046b4:	e03e      	b.n	8004734 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 80046b6:	4b21      	ldr	r3, [pc, #132]	@ (800473c <ai_boostrap+0xb0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 fa83 	bl	8004bc8 <ai_network_inputs_get>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <ai_boostrap+0xb8>)
 80046c6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80046c8:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <ai_boostrap+0xb0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fa94 	bl	8004bfc <ai_network_outputs_get>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <ai_boostrap+0xbc>)
 80046d8:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  for (int idx = 0; idx < AI_NETWORK_IN_NUM; idx++) {
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e00f      	b.n	8004700 <ai_boostrap+0x74>
    data_ins[idx] = ai_input[idx].data;
 80046e0:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <ai_boostrap+0xb8>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4613      	mov	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4916      	ldr	r1, [pc, #88]	@ (800474c <ai_boostrap+0xc0>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx = 0; idx < AI_NETWORK_IN_NUM; idx++) {
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	3301      	adds	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	ddec      	ble.n	80046e0 <ai_boostrap+0x54>
    ai_input[idx].data = data_ins[idx];
  }
#endif

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  for (int idx = 0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e00f      	b.n	800472c <ai_boostrap+0xa0>
    data_outs[idx] = ai_output[idx].data;
 800470c:	4b0e      	ldr	r3, [pc, #56]	@ (8004748 <ai_boostrap+0xbc>)
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4613      	mov	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	490c      	ldr	r1, [pc, #48]	@ (8004750 <ai_boostrap+0xc4>)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx = 0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3301      	adds	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	ddec      	ble.n	800470c <ai_boostrap+0x80>
  for (int idx = 0; idx < AI_NETWORK_OUT_NUM; idx++) {
    ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000aa0 	.word	0x20000aa0
 8004740:	0800aec8 	.word	0x0800aec8
 8004744:	20000aa4 	.word	0x20000aa4
 8004748:	20000aa8 	.word	0x20000aa8
 800474c:	200009d8 	.word	0x200009d8
 8004750:	200009dc 	.word	0x200009dc

08004754 <ai_run>:

static int ai_run(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
  ai_i32 batch;
  batch = ai_network_run(network, ai_input, ai_output);
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <ai_run+0x44>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a0f      	ldr	r2, [pc, #60]	@ (800479c <ai_run+0x48>)
 8004760:	6811      	ldr	r1, [r2, #0]
 8004762:	4a0f      	ldr	r2, [pc, #60]	@ (80047a0 <ai_run+0x4c>)
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fa9e 	bl	8004ca8 <ai_network_run>
 800476c:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d00c      	beq.n	800478e <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network), "ai_network_run");
 8004774:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <ai_run+0x44>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f000 f985 	bl	8004a88 <ai_network_get_error>
 800477e:	4603      	mov	r3, r0
 8004780:	4908      	ldr	r1, [pc, #32]	@ (80047a4 <ai_run+0x50>)
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff ff60 	bl	8004648 <ai_log_err>
    return -1;
 8004788:	f04f 33ff 	mov.w	r3, #4294967295
 800478c:	e000      	b.n	8004790 <ai_run+0x3c>
  }
  return 0;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000aa0 	.word	0x20000aa0
 800479c:	20000aa4 	.word	0x20000aa4
 80047a0:	20000aa8 	.word	0x20000aa8
 80047a4:	0800aee4 	.word	0x0800aee4

080047a8 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  ((ai_float *)data[0])[0] = user_temp;  // Already normalized in main.c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <acquire_and_process_data+0x2c>)
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	601a      	str	r2, [r3, #0]
  ((ai_float *)data[0])[1] = user_humid;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3304      	adds	r3, #4
 80047c0:	4a05      	ldr	r2, [pc, #20]	@ (80047d8 <acquire_and_process_data+0x30>)
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	601a      	str	r2, [r3, #0]
  return 0;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	2000093c 	.word	0x2000093c
 80047d8:	20000940 	.word	0x20000940

080047dc <post_process>:

int post_process(ai_i8* data[])
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  ai_result = ((ai_float *)data[0])[0];
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a04      	ldr	r2, [pc, #16]	@ (80047fc <post_process+0x20>)
 80047ec:	6013      	str	r3, [r2, #0]
  return 0;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	200009d4 	.word	0x200009d4

08004800 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  printf("\r\nTEMPLATE - initialization\r\n");
 8004804:	4803      	ldr	r0, [pc, #12]	@ (8004814 <MX_X_CUBE_AI_Init+0x14>)
 8004806:	f003 fc47 	bl	8008098 <puts>
  ai_boostrap(data_activations0);
 800480a:	4803      	ldr	r0, [pc, #12]	@ (8004818 <MX_X_CUBE_AI_Init+0x18>)
 800480c:	f7ff ff3e 	bl	800468c <ai_boostrap>
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	0800aef4 	.word	0x0800aef4
 8004818:	2000000c 	.word	0x2000000c

0800481c <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
  int res = -1;
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	607b      	str	r3, [r7, #4]
  printf("TEMPLATE - run - main loop\r\n");
 8004828:	4814      	ldr	r0, [pc, #80]	@ (800487c <MX_X_CUBE_AI_Process+0x60>)
 800482a:	f003 fc35 	bl	8008098 <puts>

  if (network) {
 800482e:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <MX_X_CUBE_AI_Process+0x64>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <MX_X_CUBE_AI_Process+0x3c>
    res = acquire_and_process_data(data_ins);
 8004836:	4813      	ldr	r0, [pc, #76]	@ (8004884 <MX_X_CUBE_AI_Process+0x68>)
 8004838:	f7ff ffb6 	bl	80047a8 <acquire_and_process_data>
 800483c:	6078      	str	r0, [r7, #4]
    if (res == 0)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <MX_X_CUBE_AI_Process+0x2e>
      res = ai_run();
 8004844:	f7ff ff86 	bl	8004754 <ai_run>
 8004848:	6078      	str	r0, [r7, #4]
    if (res == 0)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <MX_X_CUBE_AI_Process+0x3c>
      res = post_process(data_outs);
 8004850:	480d      	ldr	r0, [pc, #52]	@ (8004888 <MX_X_CUBE_AI_Process+0x6c>)
 8004852:	f7ff ffc3 	bl	80047dc <post_process>
 8004856:	6078      	str	r0, [r7, #4]
  }

  if (res) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = { AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK };
 800485e:	2311      	movs	r3, #17
 8004860:	703b      	strb	r3, [r7, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2210      	movs	r2, #16
 8004866:	f362 231f 	bfi	r3, r2, #8, #24
 800486a:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 800486c:	4907      	ldr	r1, [pc, #28]	@ (800488c <MX_X_CUBE_AI_Process+0x70>)
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f7ff feea 	bl	8004648 <ai_log_err>
  }
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	0800af14 	.word	0x0800af14
 8004880:	20000aa0 	.word	0x20000aa0
 8004884:	200009d8 	.word	0x200009d8
 8004888:	200009dc 	.word	0x200009dc
 800488c:	0800af30 	.word	0x0800af30

08004890 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	2101      	movs	r1, #1
 800489e:	482a      	ldr	r0, [pc, #168]	@ (8004948 <network_configure_activations+0xb8>)
 80048a0:	f000 fadc 	bl	8004e5c <ai_platform_get_activations_map>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d043      	beq.n	8004932 <network_configure_activations+0xa2>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor0_output_array.data = AI_PTR(g_network_activations_map[0] + 56);
 80048aa:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <network_configure_activations+0xb8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3338      	adds	r3, #56	@ 0x38
 80048b0:	4a26      	ldr	r2, [pc, #152]	@ (800494c <network_configure_activations+0xbc>)
 80048b2:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 56);
 80048b4:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <network_configure_activations+0xb8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3338      	adds	r3, #56	@ 0x38
 80048ba:	4a24      	ldr	r2, [pc, #144]	@ (800494c <network_configure_activations+0xbc>)
 80048bc:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 80048be:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <network_configure_activations+0xb8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3340      	adds	r3, #64	@ 0x40
 80048c4:	4a22      	ldr	r2, [pc, #136]	@ (8004950 <network_configure_activations+0xc0>)
 80048c6:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 80048c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <network_configure_activations+0xb8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3340      	adds	r3, #64	@ 0x40
 80048ce:	4a20      	ldr	r2, [pc, #128]	@ (8004950 <network_configure_activations+0xc0>)
 80048d0:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <network_configure_activations+0xb8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3340      	adds	r3, #64	@ 0x40
 80048d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004954 <network_configure_activations+0xc4>)
 80048da:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 80048dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004948 <network_configure_activations+0xb8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3340      	adds	r3, #64	@ 0x40
 80048e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004954 <network_configure_activations+0xc4>)
 80048e4:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80048e6:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <network_configure_activations+0xb8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004958 <network_configure_activations+0xc8>)
 80048ec:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80048ee:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <network_configure_activations+0xb8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a19      	ldr	r2, [pc, #100]	@ (8004958 <network_configure_activations+0xc8>)
 80048f4:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 64);
 80048f6:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <network_configure_activations+0xb8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3340      	adds	r3, #64	@ 0x40
 80048fc:	4a17      	ldr	r2, [pc, #92]	@ (800495c <network_configure_activations+0xcc>)
 80048fe:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 64);
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <network_configure_activations+0xb8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3340      	adds	r3, #64	@ 0x40
 8004906:	4a15      	ldr	r2, [pc, #84]	@ (800495c <network_configure_activations+0xcc>)
 8004908:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800490a:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <network_configure_activations+0xb8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a14      	ldr	r2, [pc, #80]	@ (8004960 <network_configure_activations+0xd0>)
 8004910:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004912:	4b0d      	ldr	r3, [pc, #52]	@ (8004948 <network_configure_activations+0xb8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	@ (8004960 <network_configure_activations+0xd0>)
 8004918:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(g_network_activations_map[0] + 4);
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <network_configure_activations+0xb8>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3304      	adds	r3, #4
 8004920:	4a10      	ldr	r2, [pc, #64]	@ (8004964 <network_configure_activations+0xd4>)
 8004922:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 4);
 8004924:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <network_configure_activations+0xb8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3304      	adds	r3, #4
 800492a:	4a0e      	ldr	r2, [pc, #56]	@ (8004964 <network_configure_activations+0xd4>)
 800492c:	60d3      	str	r3, [r2, #12]
    return true;
 800492e:	2301      	movs	r3, #1
 8004930:	e005      	b.n	800493e <network_configure_activations+0xae>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004932:	2213      	movs	r2, #19
 8004934:	2130      	movs	r1, #48	@ 0x30
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fb12 	bl	8004f60 <ai_platform_network_set_error>
  return false;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000aac 	.word	0x20000aac
 800494c:	20000010 	.word	0x20000010
 8004950:	20000020 	.word	0x20000020
 8004954:	20000030 	.word	0x20000030
 8004958:	20000040 	.word	0x20000040
 800495c:	20000050 	.word	0x20000050
 8004960:	20000060 	.word	0x20000060
 8004964:	20000070 	.word	0x20000070

08004968 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	2101      	movs	r1, #1
 8004976:	483d      	ldr	r0, [pc, #244]	@ (8004a6c <network_configure_weights+0x104>)
 8004978:	f000 fa1c 	bl	8004db4 <ai_platform_get_weights_map>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d069      	beq.n	8004a56 <network_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004982:	4b3b      	ldr	r3, [pc, #236]	@ (8004a70 <network_configure_weights+0x108>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800498a:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <network_configure_weights+0x108>)
 800498c:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800498e:	4b37      	ldr	r3, [pc, #220]	@ (8004a6c <network_configure_weights+0x104>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a37      	ldr	r2, [pc, #220]	@ (8004a70 <network_configure_weights+0x108>)
 8004994:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004996:	4b35      	ldr	r3, [pc, #212]	@ (8004a6c <network_configure_weights+0x104>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a35      	ldr	r2, [pc, #212]	@ (8004a70 <network_configure_weights+0x108>)
 800499c:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800499e:	4b35      	ldr	r3, [pc, #212]	@ (8004a74 <network_configure_weights+0x10c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049a6:	4a33      	ldr	r2, [pc, #204]	@ (8004a74 <network_configure_weights+0x10c>)
 80049a8:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 256);
 80049aa:	4b30      	ldr	r3, [pc, #192]	@ (8004a6c <network_configure_weights+0x104>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049b2:	4a30      	ldr	r2, [pc, #192]	@ (8004a74 <network_configure_weights+0x10c>)
 80049b4:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 256);
 80049b6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a6c <network_configure_weights+0x104>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049be:	4a2d      	ldr	r2, [pc, #180]	@ (8004a74 <network_configure_weights+0x10c>)
 80049c0:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80049c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <network_configure_weights+0x110>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <network_configure_weights+0x110>)
 80049cc:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 384);
 80049ce:	4b27      	ldr	r3, [pc, #156]	@ (8004a6c <network_configure_weights+0x104>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80049d6:	4a28      	ldr	r2, [pc, #160]	@ (8004a78 <network_configure_weights+0x110>)
 80049d8:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 384);
 80049da:	4b24      	ldr	r3, [pc, #144]	@ (8004a6c <network_configure_weights+0x104>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80049e2:	4a25      	ldr	r2, [pc, #148]	@ (8004a78 <network_configure_weights+0x110>)
 80049e4:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80049e6:	4b25      	ldr	r3, [pc, #148]	@ (8004a7c <network_configure_weights+0x114>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049ee:	4a23      	ldr	r2, [pc, #140]	@ (8004a7c <network_configure_weights+0x114>)
 80049f0:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 2432);
 80049f2:	4b1e      	ldr	r3, [pc, #120]	@ (8004a6c <network_configure_weights+0x104>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 80049fa:	4a20      	ldr	r2, [pc, #128]	@ (8004a7c <network_configure_weights+0x114>)
 80049fc:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2432);
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <network_configure_weights+0x104>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f503 6318 	add.w	r3, r3, #2432	@ 0x980
 8004a06:	4a1d      	ldr	r2, [pc, #116]	@ (8004a7c <network_configure_weights+0x114>)
 8004a08:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <network_configure_weights+0x118>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a12:	4a1b      	ldr	r2, [pc, #108]	@ (8004a80 <network_configure_weights+0x118>)
 8004a14:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 2496);
 8004a16:	4b15      	ldr	r3, [pc, #84]	@ (8004a6c <network_configure_weights+0x104>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 8004a1e:	4a18      	ldr	r2, [pc, #96]	@ (8004a80 <network_configure_weights+0x118>)
 8004a20:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 2496);
 8004a22:	4b12      	ldr	r3, [pc, #72]	@ (8004a6c <network_configure_weights+0x104>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f503 631c 	add.w	r3, r3, #2496	@ 0x9c0
 8004a2a:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <network_configure_weights+0x118>)
 8004a2c:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <network_configure_weights+0x11c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a36:	4a13      	ldr	r2, [pc, #76]	@ (8004a84 <network_configure_weights+0x11c>)
 8004a38:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 2560);
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a6c <network_configure_weights+0x104>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8004a42:	4a10      	ldr	r2, [pc, #64]	@ (8004a84 <network_configure_weights+0x11c>)
 8004a44:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2560);
 8004a46:	4b09      	ldr	r3, [pc, #36]	@ (8004a6c <network_configure_weights+0x104>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 6320 	add.w	r3, r3, #2560	@ 0xa00
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004a84 <network_configure_weights+0x11c>)
 8004a50:	60d3      	str	r3, [r2, #12]
    return true;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e005      	b.n	8004a62 <network_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004a56:	2212      	movs	r2, #18
 8004a58:	2130      	movs	r1, #48	@ 0x30
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa80 	bl	8004f60 <ai_platform_network_set_error>
  return false;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000ab0 	.word	0x20000ab0
 8004a70:	20000080 	.word	0x20000080
 8004a74:	20000090 	.word	0x20000090
 8004a78:	200000a0 	.word	0x200000a0
 8004a7c:	200000b0 	.word	0x200000b0
 8004a80:	200000c0 	.word	0x200000c0
 8004a84:	200000d0 	.word	0x200000d0

08004a88 <ai_network_get_error>:
}


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa59 	bl	8004f48 <ai_platform_network_get_error>
 8004a96:	4603      	mov	r3, r0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004aaa:	2300      	movs	r3, #0
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	2305      	movs	r3, #5
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <ai_network_create+0x28>)
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fb41 	bl	8005140 <ai_platform_network_create>
 8004abe:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000698 	.word	0x20000698

08004acc <ai_network_create_and_init>:


AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b094      	sub	sp, #80	@ 0x50
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004ad8:	2100      	movs	r1, #0
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff ffe0 	bl	8004aa0 <ai_network_create>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8004ae4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <ai_network_create_and_init+0x24>
    return err;
 8004aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aee:	e067      	b.n	8004bc0 <ai_network_create_and_init+0xf4>
  }
  
  if (ai_network_data_params_get(&params) != true) {
 8004af0:	f107 0310 	add.w	r3, r7, #16
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 f8e7 	bl	8004cc8 <ai_network_data_params_get>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f083 0301 	eor.w	r3, r3, #1
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <ai_network_create_and_init+0x4c>
    err = ai_network_get_error(*network);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ffbc 	bl	8004a88 <ai_network_get_error>
 8004b10:	4603      	mov	r3, r0
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8004b14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b16:	e053      	b.n	8004bc0 <ai_network_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b1e:	e012      	b.n	8004b46 <ai_network_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004b20:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8004b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	f107 0310 	add.w	r3, r7, #16
 8004b34:	330c      	adds	r3, #12
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f92c 	bl	8004d94 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004b3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b40:	3301      	adds	r3, #1
 8004b42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <ai_network_create_and_init+0x8a>
 8004b4c:	8bfb      	ldrh	r3, [r7, #30]
 8004b4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d3e4      	bcc.n	8004b20 <ai_network_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b5c:	e012      	b.n	8004b84 <ai_network_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004b5e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8004b62:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	3304      	adds	r3, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f90d 	bl	8004d94 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004b7a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b7e:	3301      	adds	r3, #1
 8004b80:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <ai_network_create_and_init+0xc8>
 8004b8a:	8afb      	ldrh	r3, [r7, #22]
 8004b8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d3e4      	bcc.n	8004b5e <ai_network_create_and_init+0x92>
  }
#endif
  if (ai_network_init(*network, &params) != true) {
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f107 0210 	add.w	r2, r7, #16
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f846 	bl	8004c30 <ai_network_init>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f083 0301 	eor.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <ai_network_create_and_init+0xf2>
    err = ai_network_get_error(*network);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff67 	bl	8004a88 <ai_network_get_error>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3750      	adds	r7, #80	@ 0x50
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <ai_network_inputs_get+0x2c>)
 8004bda:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a06      	ldr	r2, [pc, #24]	@ (8004bf8 <ai_network_inputs_get+0x30>)
 8004be0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f9c1 	bl	8004f6c <ai_platform_inputs_get>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000698 	.word	0x20000698
 8004bf8:	a1c00100 	.word	0xa1c00100

08004bfc <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <ai_network_outputs_get+0x2c>)
 8004c0e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a06      	ldr	r2, [pc, #24]	@ (8004c2c <ai_network_outputs_get+0x30>)
 8004c14:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fa1d 	bl	8005058 <ai_platform_outputs_get>
 8004c1e:	4603      	mov	r3, r0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000698 	.word	0x20000698
 8004c2c:	a1c00100 	.word	0xa1c00100

08004c30 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fac1 	bl	80051c4 <ai_platform_network_init>
 8004c42:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8004c44:	2301      	movs	r3, #1
 8004c46:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <ai_network_init+0x22>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e026      	b.n	8004ca0 <ai_network_init+0x70>
  ok &= network_configure_weights(net_ctx, params);
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fe87 	bl	8004968 <network_configure_weights>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	7afb      	ldrb	r3, [r7, #11]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fe0e 	bl	8004890 <network_configure_activations>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	7afb      	ldrb	r3, [r7, #11]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fb6a 	bl	8005360 <ai_platform_network_post_init>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	461a      	mov	r2, r3
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fb81 	bl	80053c0 <ai_platform_network_process>
 8004cbe:	4603      	mov	r3, r0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b086      	sub	sp, #24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <ai_network_data_params_get+0x12>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e016      	b.n	8004d08 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8004cda:	4a0d      	ldr	r2, [pc, #52]	@ (8004d10 <ai_network_data_params_get+0x48>)
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ce4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8004d14 <ai_network_data_params_get+0x4c>)
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cf2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004cf6:	f107 0210 	add.w	r2, r7, #16
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8ff 	bl	8004f04 <ai_platform_bind_network_params>
 8004d06:	4603      	mov	r3, r0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	0800af64 	.word	0x0800af64
 8004d14:	0800af6c 	.word	0x0800af6c

08004d18 <ai_buffer_get_size>:
 8004d18:	b378      	cbz	r0, 8004d7a <ai_buffer_get_size+0x62>
 8004d1a:	b410      	push	{r4}
 8004d1c:	6803      	ldr	r3, [r0, #0]
 8004d1e:	4a17      	ldr	r2, [pc, #92]	@ (8004d7c <ai_buffer_get_size+0x64>)
 8004d20:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004d24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d01e      	beq.n	8004d6a <ai_buffer_get_size+0x52>
 8004d2c:	6984      	ldr	r4, [r0, #24]
 8004d2e:	6862      	ldr	r2, [r4, #4]
 8004d30:	7d03      	ldrb	r3, [r0, #20]
 8004d32:	6941      	ldr	r1, [r0, #20]
 8004d34:	f1a3 0301 	sub.w	r3, r3, #1
 8004d38:	fab3 f383 	clz	r3, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004d42:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004d46:	da0b      	bge.n	8004d60 <ai_buffer_get_size+0x48>
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <ai_buffer_get_size+0x3a>
 8004d4c:	2802      	cmp	r0, #2
 8004d4e:	d007      	beq.n	8004d60 <ai_buffer_get_size+0x48>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4298      	cmp	r0, r3
 8004d5a:	fb01 f202 	mul.w	r2, r1, r2
 8004d5e:	d1f3      	bne.n	8004d48 <ai_buffer_get_size+0x30>
 8004d60:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	d0de      	beq.n	8004d2c <ai_buffer_get_size+0x14>
 8004d6e:	6984      	ldr	r4, [r0, #24]
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	321f      	adds	r2, #31
 8004d74:	f022 021f 	bic.w	r2, r2, #31
 8004d78:	e7da      	b.n	8004d30 <ai_buffer_get_size+0x18>
 8004d7a:	4770      	bx	lr
 8004d7c:	000400c0 	.word	0x000400c0

08004d80 <ai_buffer_array_sane>:
 8004d80:	b138      	cbz	r0, 8004d92 <ai_buffer_array_sane+0x12>
 8004d82:	6843      	ldr	r3, [r0, #4]
 8004d84:	b123      	cbz	r3, 8004d90 <ai_buffer_array_sane+0x10>
 8004d86:	8840      	ldrh	r0, [r0, #2]
 8004d88:	3800      	subs	r0, #0
 8004d8a:	bf18      	it	ne
 8004d8c:	2001      	movne	r0, #1
 8004d8e:	4770      	bx	lr
 8004d90:	4618      	mov	r0, r3
 8004d92:	4770      	bx	lr

08004d94 <ai_buffer_array_item_set_address>:
 8004d94:	b150      	cbz	r0, 8004dac <ai_buffer_array_item_set_address+0x18>
 8004d96:	6843      	ldr	r3, [r0, #4]
 8004d98:	b14b      	cbz	r3, 8004dae <ai_buffer_array_item_set_address+0x1a>
 8004d9a:	8840      	ldrh	r0, [r0, #2]
 8004d9c:	b900      	cbnz	r0, 8004da0 <ai_buffer_array_item_set_address+0xc>
 8004d9e:	4770      	bx	lr
 8004da0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004da4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004da8:	2001      	movs	r0, #1
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	4770      	bx	lr
 8004dae:	4618      	mov	r0, r3
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop

08004db4 <ai_platform_get_weights_map>:
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d037      	beq.n	8004e28 <ai_platform_get_weights_map+0x74>
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	b1a0      	cbz	r0, 8004de8 <ai_platform_get_weights_map+0x34>
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	b191      	cbz	r1, 8004de8 <ai_platform_get_weights_map+0x34>
 8004dc2:	4b25      	ldr	r3, [pc, #148]	@ (8004e58 <ai_platform_get_weights_map+0xa4>)
 8004dc4:	6810      	ldr	r0, [r2, #0]
 8004dc6:	4298      	cmp	r0, r3
 8004dc8:	4615      	mov	r5, r2
 8004dca:	d00f      	beq.n	8004dec <ai_platform_get_weights_map+0x38>
 8004dcc:	6855      	ldr	r5, [r2, #4]
 8004dce:	b15d      	cbz	r5, 8004de8 <ai_platform_get_weights_map+0x34>
 8004dd0:	682e      	ldr	r6, [r5, #0]
 8004dd2:	429e      	cmp	r6, r3
 8004dd4:	d02a      	beq.n	8004e2c <ai_platform_get_weights_map+0x78>
 8004dd6:	f1a1 0001 	sub.w	r0, r1, #1
 8004dda:	6025      	str	r5, [r4, #0]
 8004ddc:	fab0 f080 	clz	r0, r0
 8004de0:	0940      	lsrs	r0, r0, #5
 8004de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de4:	42a7      	cmp	r7, r4
 8004de6:	d034      	beq.n	8004e52 <ai_platform_get_weights_map+0x9e>
 8004de8:	2000      	movs	r0, #0
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dec:	1d10      	adds	r0, r2, #4
 8004dee:	f7ff ffc7 	bl	8004d80 <ai_buffer_array_sane>
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d0f8      	beq.n	8004de8 <ai_platform_get_weights_map+0x34>
 8004df6:	88eb      	ldrh	r3, [r5, #6]
 8004df8:	429f      	cmp	r7, r3
 8004dfa:	d1f5      	bne.n	8004de8 <ai_platform_get_weights_map+0x34>
 8004dfc:	f04f 0c00 	mov.w	ip, #0
 8004e00:	1f20      	subs	r0, r4, #4
 8004e02:	46e6      	mov	lr, ip
 8004e04:	68ab      	ldr	r3, [r5, #8]
 8004e06:	4463      	add	r3, ip
 8004e08:	f10c 0c1c 	add.w	ip, ip, #28
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b12b      	cbz	r3, 8004e1c <ai_platform_get_weights_map+0x68>
 8004e10:	f10e 0e01 	add.w	lr, lr, #1
 8004e14:	4577      	cmp	r7, lr
 8004e16:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e1a:	d1f3      	bne.n	8004e04 <ai_platform_get_weights_map+0x50>
 8004e1c:	eba7 000e 	sub.w	r0, r7, lr
 8004e20:	fab0 f080 	clz	r0, r0
 8004e24:	0940      	lsrs	r0, r0, #5
 8004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e28:	2000      	movs	r0, #0
 8004e2a:	4770      	bx	lr
 8004e2c:	1f20      	subs	r0, r4, #4
 8004e2e:	462a      	mov	r2, r5
 8004e30:	2400      	movs	r4, #0
 8004e32:	e000      	b.n	8004e36 <ai_platform_get_weights_map+0x82>
 8004e34:	461c      	mov	r4, r3
 8004e36:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004e3a:	42b3      	cmp	r3, r6
 8004e3c:	d0d2      	beq.n	8004de4 <ai_platform_get_weights_map+0x30>
 8004e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e42:	1c63      	adds	r3, r4, #1
 8004e44:	429f      	cmp	r7, r3
 8004e46:	d1f5      	bne.n	8004e34 <ai_platform_get_weights_map+0x80>
 8004e48:	3402      	adds	r4, #2
 8004e4a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004e4e:	42b3      	cmp	r3, r6
 8004e50:	d1ca      	bne.n	8004de8 <ai_platform_get_weights_map+0x34>
 8004e52:	2001      	movs	r0, #1
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	a1facade 	.word	0xa1facade

08004e5c <ai_platform_get_activations_map>:
 8004e5c:	2a00      	cmp	r2, #0
 8004e5e:	d038      	beq.n	8004ed2 <ai_platform_get_activations_map+0x76>
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	4604      	mov	r4, r0
 8004e64:	b1a0      	cbz	r0, 8004e90 <ai_platform_get_activations_map+0x34>
 8004e66:	460f      	mov	r7, r1
 8004e68:	b191      	cbz	r1, 8004e90 <ai_platform_get_activations_map+0x34>
 8004e6a:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <ai_platform_get_activations_map+0xa4>)
 8004e6c:	6810      	ldr	r0, [r2, #0]
 8004e6e:	4298      	cmp	r0, r3
 8004e70:	4615      	mov	r5, r2
 8004e72:	d00f      	beq.n	8004e94 <ai_platform_get_activations_map+0x38>
 8004e74:	6a15      	ldr	r5, [r2, #32]
 8004e76:	b15d      	cbz	r5, 8004e90 <ai_platform_get_activations_map+0x34>
 8004e78:	682e      	ldr	r6, [r5, #0]
 8004e7a:	429e      	cmp	r6, r3
 8004e7c:	d02b      	beq.n	8004ed6 <ai_platform_get_activations_map+0x7a>
 8004e7e:	f1a1 0001 	sub.w	r0, r1, #1
 8004e82:	6025      	str	r5, [r4, #0]
 8004e84:	fab0 f080 	clz	r0, r0
 8004e88:	0940      	lsrs	r0, r0, #5
 8004e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e8c:	42a7      	cmp	r7, r4
 8004e8e:	d035      	beq.n	8004efc <ai_platform_get_activations_map+0xa0>
 8004e90:	2000      	movs	r0, #0
 8004e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e94:	f102 000c 	add.w	r0, r2, #12
 8004e98:	f7ff ff72 	bl	8004d80 <ai_buffer_array_sane>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d0f7      	beq.n	8004e90 <ai_platform_get_activations_map+0x34>
 8004ea0:	89eb      	ldrh	r3, [r5, #14]
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	d1f4      	bne.n	8004e90 <ai_platform_get_activations_map+0x34>
 8004ea6:	f04f 0c00 	mov.w	ip, #0
 8004eaa:	1f20      	subs	r0, r4, #4
 8004eac:	46e6      	mov	lr, ip
 8004eae:	692b      	ldr	r3, [r5, #16]
 8004eb0:	4463      	add	r3, ip
 8004eb2:	f10c 0c1c 	add.w	ip, ip, #28
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b12b      	cbz	r3, 8004ec6 <ai_platform_get_activations_map+0x6a>
 8004eba:	f10e 0e01 	add.w	lr, lr, #1
 8004ebe:	4577      	cmp	r7, lr
 8004ec0:	f840 3f04 	str.w	r3, [r0, #4]!
 8004ec4:	d1f3      	bne.n	8004eae <ai_platform_get_activations_map+0x52>
 8004ec6:	eba7 000e 	sub.w	r0, r7, lr
 8004eca:	fab0 f080 	clz	r0, r0
 8004ece:	0940      	lsrs	r0, r0, #5
 8004ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	4770      	bx	lr
 8004ed6:	1f20      	subs	r0, r4, #4
 8004ed8:	462a      	mov	r2, r5
 8004eda:	2400      	movs	r4, #0
 8004edc:	e000      	b.n	8004ee0 <ai_platform_get_activations_map+0x84>
 8004ede:	461c      	mov	r4, r3
 8004ee0:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004ee4:	42b3      	cmp	r3, r6
 8004ee6:	d0d1      	beq.n	8004e8c <ai_platform_get_activations_map+0x30>
 8004ee8:	f840 3f04 	str.w	r3, [r0, #4]!
 8004eec:	1c63      	adds	r3, r4, #1
 8004eee:	429f      	cmp	r7, r3
 8004ef0:	d1f5      	bne.n	8004ede <ai_platform_get_activations_map+0x82>
 8004ef2:	3402      	adds	r4, #2
 8004ef4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004ef8:	42b3      	cmp	r3, r6
 8004efa:	d1c9      	bne.n	8004e90 <ai_platform_get_activations_map+0x34>
 8004efc:	2001      	movs	r0, #1
 8004efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f00:	a1facade 	.word	0xa1facade

08004f04 <ai_platform_bind_network_params>:
 8004f04:	b1a0      	cbz	r0, 8004f30 <ai_platform_bind_network_params+0x2c>
 8004f06:	b1b1      	cbz	r1, 8004f36 <ai_platform_bind_network_params+0x32>
 8004f08:	b1c2      	cbz	r2, 8004f3c <ai_platform_bind_network_params+0x38>
 8004f0a:	b410      	push	{r4}
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4c0d      	ldr	r4, [pc, #52]	@ (8004f44 <ai_platform_bind_network_params+0x40>)
 8004f10:	f843 4b04 	str.w	r4, [r3], #4
 8004f14:	f100 0c0c 	add.w	ip, r0, #12
 8004f18:	c903      	ldmia	r1, {r0, r1}
 8004f1a:	e883 0003 	stmia.w	r3, {r0, r1}
 8004f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f22:	e88c 0003 	stmia.w	ip, {r0, r1}
 8004f26:	2301      	movs	r3, #1
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	4603      	mov	r3, r0
 8004f32:	4618      	mov	r0, r3
 8004f34:	4770      	bx	lr
 8004f36:	460b      	mov	r3, r1
 8004f38:	4618      	mov	r0, r3
 8004f3a:	4770      	bx	lr
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	a1facade 	.word	0xa1facade

08004f48 <ai_platform_network_get_error>:
 8004f48:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <ai_platform_network_get_error+0x14>)
 8004f4a:	6802      	ldr	r2, [r0, #0]
 8004f4c:	4393      	bics	r3, r2
 8004f4e:	d102      	bne.n	8004f56 <ai_platform_network_get_error+0xe>
 8004f50:	300c      	adds	r0, #12
 8004f52:	f000 bc77 	b.w	8005844 <core_get_error>
 8004f56:	f241 0010 	movw	r0, #4112	@ 0x1010
 8004f5a:	4770      	bx	lr
 8004f5c:	a1c00100 	.word	0xa1c00100

08004f60 <ai_platform_network_set_error>:
 8004f60:	b110      	cbz	r0, 8004f68 <ai_platform_network_set_error+0x8>
 8004f62:	300c      	adds	r0, #12
 8004f64:	f000 bc74 	b.w	8005850 <core_set_error>
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop

08004f6c <ai_platform_inputs_get>:
 8004f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f70:	4b38      	ldr	r3, [pc, #224]	@ (8005054 <ai_platform_inputs_get+0xe8>)
 8004f72:	6802      	ldr	r2, [r0, #0]
 8004f74:	b085      	sub	sp, #20
 8004f76:	4393      	bics	r3, r2
 8004f78:	9003      	str	r0, [sp, #12]
 8004f7a:	9102      	str	r1, [sp, #8]
 8004f7c:	d160      	bne.n	8005040 <ai_platform_inputs_get+0xd4>
 8004f7e:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d04f      	beq.n	8005024 <ai_platform_inputs_get+0xb8>
 8004f84:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8004f88:	f1ba 0f00 	cmp.w	sl, #0
 8004f8c:	d04a      	beq.n	8005024 <ai_platform_inputs_get+0xb8>
 8004f8e:	f04f 0b00 	mov.w	fp, #0
 8004f92:	465d      	mov	r5, fp
 8004f94:	e016      	b.n	8004fc4 <ai_platform_inputs_get+0x58>
 8004f96:	9901      	ldr	r1, [sp, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	507a      	str	r2, [r7, r1]
 8004f9c:	69b1      	ldr	r1, [r6, #24]
 8004f9e:	684e      	ldr	r6, [r1, #4]
 8004fa0:	60a3      	str	r3, [r4, #8]
 8004fa2:	f04f 0201 	mov.w	r2, #1
 8004fa6:	7522      	strb	r2, [r4, #20]
 8004fa8:	6961      	ldr	r1, [r4, #20]
 8004faa:	6020      	str	r0, [r4, #0]
 8004fac:	f369 211f 	bfi	r1, r9, #8, #24
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8004fb6:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8004fba:	f8c4 c004 	str.w	ip, [r4, #4]
 8004fbe:	3501      	adds	r5, #1
 8004fc0:	f10b 0b1c 	add.w	fp, fp, #28
 8004fc4:	f8ba 3000 	ldrh.w	r3, [sl]
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	b2aa      	uxth	r2, r5
 8004fcc:	d93c      	bls.n	8005048 <ai_platform_inputs_get+0xdc>
 8004fce:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004fd2:	00e9      	lsls	r1, r5, #3
 8004fd4:	9101      	str	r1, [sp, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d036      	beq.n	8005048 <ai_platform_inputs_get+0xdc>
 8004fda:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004fde:	2e00      	cmp	r6, #0
 8004fe0:	d032      	beq.n	8005048 <ai_platform_inputs_get+0xdc>
 8004fe2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004fe6:	69b2      	ldr	r2, [r6, #24]
 8004fe8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004fec:	6810      	ldr	r0, [r2, #0]
 8004fee:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004ff2:	68b3      	ldr	r3, [r6, #8]
 8004ff4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004ff8:	f001 fae4 	bl	80065c4 <ai_array_to_buffer_fmt>
 8004ffc:	69b1      	ldr	r1, [r6, #24]
 8004ffe:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005002:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8005006:	445c      	add	r4, fp
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0c8      	beq.n	8004f9e <ai_platform_inputs_get+0x32>
 800500c:	2100      	movs	r1, #0
 800500e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8005012:	6831      	ldr	r1, [r6, #0]
 8005014:	6059      	str	r1, [r3, #4]
 8005016:	b111      	cbz	r1, 800501e <ai_platform_inputs_get+0xb2>
 8005018:	8849      	ldrh	r1, [r1, #2]
 800501a:	2900      	cmp	r1, #0
 800501c:	d1bb      	bne.n	8004f96 <ai_platform_inputs_get+0x2a>
 800501e:	69b1      	ldr	r1, [r6, #24]
 8005020:	2300      	movs	r3, #0
 8005022:	e7bc      	b.n	8004f9e <ai_platform_inputs_get+0x32>
 8005024:	9803      	ldr	r0, [sp, #12]
 8005026:	2218      	movs	r2, #24
 8005028:	2111      	movs	r1, #17
 800502a:	300c      	adds	r0, #12
 800502c:	f000 fc10 	bl	8005850 <core_set_error>
 8005030:	2200      	movs	r2, #0
 8005032:	4610      	mov	r0, r2
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	b103      	cbz	r3, 800503a <ai_platform_inputs_get+0xce>
 8005038:	801a      	strh	r2, [r3, #0]
 800503a:	b005      	add	sp, #20
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	2000      	movs	r0, #0
 8005042:	b005      	add	sp, #20
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005048:	2a00      	cmp	r2, #0
 800504a:	d0eb      	beq.n	8005024 <ai_platform_inputs_get+0xb8>
 800504c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005050:	6858      	ldr	r0, [r3, #4]
 8005052:	e7ef      	b.n	8005034 <ai_platform_inputs_get+0xc8>
 8005054:	a1c00100 	.word	0xa1c00100

08005058 <ai_platform_outputs_get>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	4b37      	ldr	r3, [pc, #220]	@ (800513c <ai_platform_outputs_get+0xe4>)
 800505e:	6802      	ldr	r2, [r0, #0]
 8005060:	b085      	sub	sp, #20
 8005062:	4393      	bics	r3, r2
 8005064:	9003      	str	r0, [sp, #12]
 8005066:	9102      	str	r1, [sp, #8]
 8005068:	d15d      	bne.n	8005126 <ai_platform_outputs_get+0xce>
 800506a:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800506c:	2b01      	cmp	r3, #1
 800506e:	d94c      	bls.n	800510a <ai_platform_outputs_get+0xb2>
 8005070:	f04f 0b00 	mov.w	fp, #0
 8005074:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005078:	465d      	mov	r5, fp
 800507a:	46d8      	mov	r8, fp
 800507c:	e016      	b.n	80050ac <ai_platform_outputs_get+0x54>
 800507e:	9a01      	ldr	r2, [sp, #4]
 8005080:	2101      	movs	r1, #1
 8005082:	50b9      	str	r1, [r7, r2]
 8005084:	69b2      	ldr	r2, [r6, #24]
 8005086:	6856      	ldr	r6, [r2, #4]
 8005088:	6020      	str	r0, [r4, #0]
 800508a:	f04f 0201 	mov.w	r2, #1
 800508e:	7522      	strb	r2, [r4, #20]
 8005090:	6960      	ldr	r0, [r4, #20]
 8005092:	f8c4 c004 	str.w	ip, [r4, #4]
 8005096:	f369 201f 	bfi	r0, r9, #8, #24
 800509a:	e9c4 6004 	strd	r6, r0, [r4, #16]
 800509e:	e9c4 3802 	strd	r3, r8, [r4, #8]
 80050a2:	9b00      	ldr	r3, [sp, #0]
 80050a4:	61a3      	str	r3, [r4, #24]
 80050a6:	3501      	adds	r5, #1
 80050a8:	f10b 0b1c 	add.w	fp, fp, #28
 80050ac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	b2aa      	uxth	r2, r5
 80050b4:	d93b      	bls.n	800512e <ai_platform_outputs_get+0xd6>
 80050b6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80050ba:	00e9      	lsls	r1, r5, #3
 80050bc:	9101      	str	r1, [sp, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d035      	beq.n	800512e <ai_platform_outputs_get+0xd6>
 80050c2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	d031      	beq.n	800512e <ai_platform_outputs_get+0xd6>
 80050ca:	f8da 3014 	ldr.w	r3, [sl, #20]
 80050ce:	69b2      	ldr	r2, [r6, #24]
 80050d0:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80050d4:	68b3      	ldr	r3, [r6, #8]
 80050d6:	6810      	ldr	r0, [r2, #0]
 80050d8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80050dc:	68f3      	ldr	r3, [r6, #12]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	f001 fa70 	bl	80065c4 <ai_array_to_buffer_fmt>
 80050e4:	69b2      	ldr	r2, [r6, #24]
 80050e6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80050ea:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80050ee:	445c      	add	r4, fp
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0c8      	beq.n	8005086 <ai_platform_outputs_get+0x2e>
 80050f4:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 80050f8:	6832      	ldr	r2, [r6, #0]
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	b112      	cbz	r2, 8005104 <ai_platform_outputs_get+0xac>
 80050fe:	8852      	ldrh	r2, [r2, #2]
 8005100:	2a00      	cmp	r2, #0
 8005102:	d1bc      	bne.n	800507e <ai_platform_outputs_get+0x26>
 8005104:	69b2      	ldr	r2, [r6, #24]
 8005106:	2300      	movs	r3, #0
 8005108:	e7bd      	b.n	8005086 <ai_platform_outputs_get+0x2e>
 800510a:	9803      	ldr	r0, [sp, #12]
 800510c:	2218      	movs	r2, #24
 800510e:	2111      	movs	r1, #17
 8005110:	300c      	adds	r0, #12
 8005112:	f000 fb9d 	bl	8005850 <core_set_error>
 8005116:	2200      	movs	r2, #0
 8005118:	4610      	mov	r0, r2
 800511a:	9b02      	ldr	r3, [sp, #8]
 800511c:	b103      	cbz	r3, 8005120 <ai_platform_outputs_get+0xc8>
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	b005      	add	sp, #20
 8005122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005126:	2000      	movs	r0, #0
 8005128:	b005      	add	sp, #20
 800512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512e:	2a00      	cmp	r2, #0
 8005130:	d0eb      	beq.n	800510a <ai_platform_outputs_get+0xb2>
 8005132:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005136:	6858      	ldr	r0, [r3, #4]
 8005138:	e7ef      	b.n	800511a <ai_platform_outputs_get+0xc2>
 800513a:	bf00      	nop
 800513c:	a1c00100 	.word	0xa1c00100

08005140 <ai_platform_network_create>:
 8005140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005144:	b083      	sub	sp, #12
 8005146:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 800514a:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800514e:	b320      	cbz	r0, 800519a <ai_platform_network_create+0x5a>
 8005150:	6002      	str	r2, [r0, #0]
 8005152:	4616      	mov	r6, r2
 8005154:	461f      	mov	r7, r3
 8005156:	4604      	mov	r4, r0
 8005158:	f000 fb72 	bl	8005840 <core_init>
 800515c:	b970      	cbnz	r0, 800517c <ai_platform_network_create+0x3c>
 800515e:	2530      	movs	r5, #48	@ 0x30
 8005160:	2300      	movs	r3, #0
 8005162:	6023      	str	r3, [r4, #0]
 8005164:	2410      	movs	r4, #16
 8005166:	4642      	mov	r2, r8
 8005168:	4649      	mov	r1, r9
 800516a:	4638      	mov	r0, r7
 800516c:	f001 faac 	bl	80066c8 <ai_version_get>
 8005170:	60b0      	str	r0, [r6, #8]
 8005172:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8005176:	b003      	add	sp, #12
 8005178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800517c:	2200      	movs	r2, #0
 800517e:	4649      	mov	r1, r9
 8005180:	4638      	mov	r0, r7
 8005182:	f001 faa1 	bl	80066c8 <ai_version_get>
 8005186:	2200      	movs	r2, #0
 8005188:	4605      	mov	r5, r0
 800518a:	2105      	movs	r1, #5
 800518c:	2001      	movs	r0, #1
 800518e:	f001 fa9b 	bl	80066c8 <ai_version_get>
 8005192:	4285      	cmp	r5, r0
 8005194:	d008      	beq.n	80051a8 <ai_platform_network_create+0x68>
 8005196:	2501      	movs	r5, #1
 8005198:	e7e2      	b.n	8005160 <ai_platform_network_create+0x20>
 800519a:	2510      	movs	r5, #16
 800519c:	462c      	mov	r4, r5
 800519e:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80051a2:	b003      	add	sp, #12
 80051a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051a8:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <ai_platform_network_create+0x80>)
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	a801      	add	r0, sp, #4
 80051ae:	f000 fb5b 	bl	8005868 <ai_check_custom_types>
 80051b2:	b110      	cbz	r0, 80051ba <ai_platform_network_create+0x7a>
 80051b4:	2400      	movs	r4, #0
 80051b6:	4625      	mov	r5, r4
 80051b8:	e7d5      	b.n	8005166 <ai_platform_network_create+0x26>
 80051ba:	2502      	movs	r5, #2
 80051bc:	e7d0      	b.n	8005160 <ai_platform_network_create+0x20>
 80051be:	bf00      	nop
 80051c0:	84048403 	.word	0x84048403

080051c4 <ai_platform_network_init>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	4b63      	ldr	r3, [pc, #396]	@ (8005358 <ai_platform_network_init+0x194>)
 80051ca:	6802      	ldr	r2, [r0, #0]
 80051cc:	4393      	bics	r3, r2
 80051ce:	b083      	sub	sp, #12
 80051d0:	d156      	bne.n	8005280 <ai_platform_network_init+0xbc>
 80051d2:	4604      	mov	r4, r0
 80051d4:	460f      	mov	r7, r1
 80051d6:	2900      	cmp	r1, #0
 80051d8:	f000 80a9 	beq.w	800532e <ai_platform_network_init+0x16a>
 80051dc:	680b      	ldr	r3, [r1, #0]
 80051de:	495f      	ldr	r1, [pc, #380]	@ (800535c <ai_platform_network_init+0x198>)
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d113      	bne.n	800520c <ai_platform_network_init+0x48>
 80051e4:	495c      	ldr	r1, [pc, #368]	@ (8005358 <ai_platform_network_init+0x194>)
 80051e6:	89bd      	ldrh	r5, [r7, #12]
 80051e8:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80051ec:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80051f0:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80051f4:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80051f8:	68be      	ldr	r6, [r7, #8]
 80051fa:	428a      	cmp	r2, r1
 80051fc:	d02c      	beq.n	8005258 <ai_platform_network_init+0x94>
 80051fe:	2303      	movs	r3, #3
 8005200:	6123      	str	r3, [r4, #16]
 8005202:	4627      	mov	r7, r4
 8005204:	4638      	mov	r0, r7
 8005206:	b003      	add	sp, #12
 8005208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800520c:	2101      	movs	r1, #1
 800520e:	4638      	mov	r0, r7
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8005216:	f7ff fd7f 	bl	8004d18 <ai_buffer_get_size>
 800521a:	f107 081c 	add.w	r8, r7, #28
 800521e:	4605      	mov	r5, r0
 8005220:	2101      	movs	r1, #1
 8005222:	4640      	mov	r0, r8
 8005224:	463e      	mov	r6, r7
 8005226:	6a3f      	ldr	r7, [r7, #32]
 8005228:	f7ff fd76 	bl	8004d18 <ai_buffer_get_size>
 800522c:	2d00      	cmp	r5, #0
 800522e:	9b01      	ldr	r3, [sp, #4]
 8005230:	bf0a      	itet	eq
 8005232:	46a9      	moveq	r9, r5
 8005234:	f04f 0901 	movne.w	r9, #1
 8005238:	462e      	moveq	r6, r5
 800523a:	b330      	cbz	r0, 800528a <ai_platform_network_init+0xc6>
 800523c:	2f00      	cmp	r7, #0
 800523e:	f000 8084 	beq.w	800534a <ai_platform_network_init+0x186>
 8005242:	f04f 0a01 	mov.w	sl, #1
 8005246:	f1bb 0f00 	cmp.w	fp, #0
 800524a:	d021      	beq.n	8005290 <ai_platform_network_init+0xcc>
 800524c:	2500      	movs	r5, #0
 800524e:	6822      	ldr	r2, [r4, #0]
 8005250:	4941      	ldr	r1, [pc, #260]	@ (8005358 <ai_platform_network_init+0x194>)
 8005252:	428a      	cmp	r2, r1
 8005254:	46ab      	mov	fp, r5
 8005256:	d1d2      	bne.n	80051fe <ai_platform_network_init+0x3a>
 8005258:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 800525a:	454a      	cmp	r2, r9
 800525c:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <ai_platform_network_init+0x198>)
 800525e:	d221      	bcs.n	80052a4 <ai_platform_network_init+0xe0>
 8005260:	4293      	cmp	r3, r2
 8005262:	d15c      	bne.n	800531e <ai_platform_network_init+0x15a>
 8005264:	6266      	str	r6, [r4, #36]	@ 0x24
 8005266:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 800526a:	f8a4 b020 	strh.w	fp, [r4, #32]
 800526e:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 8005272:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 8005276:	8525      	strh	r5, [r4, #40]	@ 0x28
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fb1f 	bl	80058bc <ai_layers_init_all>
 800527e:	e7be      	b.n	80051fe <ai_platform_network_init+0x3a>
 8005280:	2700      	movs	r7, #0
 8005282:	4638      	mov	r0, r7
 8005284:	b003      	add	sp, #12
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528a:	4680      	mov	r8, r0
 800528c:	4682      	mov	sl, r0
 800528e:	e7da      	b.n	8005246 <ai_platform_network_init+0x82>
 8005290:	2d00      	cmp	r5, #0
 8005292:	d0dc      	beq.n	800524e <ai_platform_network_init+0x8a>
 8005294:	2212      	movs	r2, #18
 8005296:	2110      	movs	r1, #16
 8005298:	f104 000c 	add.w	r0, r4, #12
 800529c:	f000 fad8 	bl	8005850 <core_set_error>
 80052a0:	465f      	mov	r7, fp
 80052a2:	e7af      	b.n	8005204 <ai_platform_network_init+0x40>
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d0dd      	beq.n	8005264 <ai_platform_network_init+0xa0>
 80052a8:	f1b9 0f00 	cmp.w	r9, #0
 80052ac:	d018      	beq.n	80052e0 <ai_platform_network_init+0x11c>
 80052ae:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80052b8:	2700      	movs	r7, #0
 80052ba:	4699      	mov	r9, r3
 80052bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052be:	eb06 0e07 	add.w	lr, r6, r7
 80052c2:	eb03 0c07 	add.w	ip, r3, r7
 80052c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80052ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80052ce:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80052d2:	371c      	adds	r7, #28
 80052d4:	45b9      	cmp	r9, r7
 80052d6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80052da:	d1ef      	bne.n	80052bc <ai_platform_network_init+0xf8>
 80052dc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80052e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80052e2:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80052e6:	4553      	cmp	r3, sl
 80052e8:	f8a4 b020 	strh.w	fp, [r4, #32]
 80052ec:	d325      	bcc.n	800533a <ai_platform_network_init+0x176>
 80052ee:	f1ba 0f00 	cmp.w	sl, #0
 80052f2:	d0be      	beq.n	8005272 <ai_platform_network_init+0xae>
 80052f4:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80052f8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80052fc:	f04f 0c00 	mov.w	ip, #0
 8005300:	eb08 070c 	add.w	r7, r8, ip
 8005304:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8005306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005308:	4466      	add	r6, ip
 800530a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800530c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005310:	f10c 0c1c 	add.w	ip, ip, #28
 8005314:	45f4      	cmp	ip, lr
 8005316:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800531a:	d1f1      	bne.n	8005300 <ai_platform_network_init+0x13c>
 800531c:	e7a9      	b.n	8005272 <ai_platform_network_init+0xae>
 800531e:	2212      	movs	r2, #18
 8005320:	2116      	movs	r1, #22
 8005322:	f104 000c 	add.w	r0, r4, #12
 8005326:	f000 fa93 	bl	8005850 <core_set_error>
 800532a:	2700      	movs	r7, #0
 800532c:	e76a      	b.n	8005204 <ai_platform_network_init+0x40>
 800532e:	2211      	movs	r2, #17
 8005330:	2110      	movs	r1, #16
 8005332:	300c      	adds	r0, #12
 8005334:	f000 fa8c 	bl	8005850 <core_set_error>
 8005338:	e764      	b.n	8005204 <ai_platform_network_init+0x40>
 800533a:	2213      	movs	r2, #19
 800533c:	2116      	movs	r1, #22
 800533e:	f104 000c 	add.w	r0, r4, #12
 8005342:	f000 fa85 	bl	8005850 <core_set_error>
 8005346:	2700      	movs	r7, #0
 8005348:	e75c      	b.n	8005204 <ai_platform_network_init+0x40>
 800534a:	2213      	movs	r2, #19
 800534c:	2110      	movs	r1, #16
 800534e:	f104 000c 	add.w	r0, r4, #12
 8005352:	f000 fa7d 	bl	8005850 <core_set_error>
 8005356:	e755      	b.n	8005204 <ai_platform_network_init+0x40>
 8005358:	a1c00100 	.word	0xa1c00100
 800535c:	a1facade 	.word	0xa1facade

08005360 <ai_platform_network_post_init>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4b16      	ldr	r3, [pc, #88]	@ (80053bc <ai_platform_network_post_init+0x5c>)
 8005364:	6802      	ldr	r2, [r0, #0]
 8005366:	ea02 0103 	and.w	r1, r2, r3
 800536a:	4393      	bics	r3, r2
 800536c:	d108      	bne.n	8005380 <ai_platform_network_post_init+0x20>
 800536e:	6903      	ldr	r3, [r0, #16]
 8005370:	f013 0502 	ands.w	r5, r3, #2
 8005374:	4604      	mov	r4, r0
 8005376:	d005      	beq.n	8005384 <ai_platform_network_post_init+0x24>
 8005378:	428a      	cmp	r2, r1
 800537a:	d00a      	beq.n	8005392 <ai_platform_network_post_init+0x32>
 800537c:	2001      	movs	r0, #1
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	2000      	movs	r0, #0
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	2210      	movs	r2, #16
 8005386:	2111      	movs	r1, #17
 8005388:	300c      	adds	r0, #12
 800538a:	f000 fa61 	bl	8005850 <core_set_error>
 800538e:	4628      	mov	r0, r5
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	f000 faa1 	bl	80058d8 <ai_layers_post_init_all>
 8005396:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0ef      	beq.n	800537c <ai_platform_network_post_init+0x1c>
 800539c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800539e:	e008      	b.n	80053b2 <ai_platform_network_post_init+0x52>
 80053a0:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 80053a4:	4798      	blx	r3
 80053a6:	692b      	ldr	r3, [r5, #16]
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	d0e7      	beq.n	800537c <ai_platform_network_post_init+0x1c>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0e5      	beq.n	800537c <ai_platform_network_post_init+0x1c>
 80053b0:	461d      	mov	r5, r3
 80053b2:	4629      	mov	r1, r5
 80053b4:	2000      	movs	r0, #0
 80053b6:	2d00      	cmp	r5, #0
 80053b8:	d1f2      	bne.n	80053a0 <ai_platform_network_post_init+0x40>
 80053ba:	e7df      	b.n	800537c <ai_platform_network_post_init+0x1c>
 80053bc:	a1c00100 	.word	0xa1c00100

080053c0 <ai_platform_network_process>:
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c4:	4bb5      	ldr	r3, [pc, #724]	@ (800569c <ai_platform_network_process+0x2dc>)
 80053c6:	4605      	mov	r5, r0
 80053c8:	6800      	ldr	r0, [r0, #0]
 80053ca:	b085      	sub	sp, #20
 80053cc:	4383      	bics	r3, r0
 80053ce:	9202      	str	r2, [sp, #8]
 80053d0:	f040 8140 	bne.w	8005654 <ai_platform_network_process+0x294>
 80053d4:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8125 	beq.w	8005626 <ai_platform_network_process+0x266>
 80053dc:	692b      	ldr	r3, [r5, #16]
 80053de:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	2700      	movs	r7, #0
 80053e8:	2b03      	cmp	r3, #3
 80053ea:	61af      	str	r7, [r5, #24]
 80053ec:	f040 8137 	bne.w	800565e <ai_platform_network_process+0x29e>
 80053f0:	2900      	cmp	r1, #0
 80053f2:	f000 811e 	beq.w	8005632 <ai_platform_network_process+0x272>
 80053f6:	f1ba 0f00 	cmp.w	sl, #0
 80053fa:	f000 811a 	beq.w	8005632 <ai_platform_network_process+0x272>
 80053fe:	f8ba 3000 	ldrh.w	r3, [sl]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8115 	beq.w	8005632 <ai_platform_network_process+0x272>
 8005408:	698b      	ldr	r3, [r1, #24]
 800540a:	9503      	str	r5, [sp, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	460e      	mov	r6, r1
 8005412:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d072      	beq.n	8005500 <ai_platform_network_process+0x140>
 800541a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800541e:	2c00      	cmp	r4, #0
 8005420:	d06e      	beq.n	8005500 <ai_platform_network_process+0x140>
 8005422:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005426:	f8d3 9000 	ldr.w	r9, [r3]
 800542a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 800542e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8005432:	f000 81d3 	beq.w	80057dc <ai_platform_network_process+0x41c>
 8005436:	69a3      	ldr	r3, [r4, #24]
 8005438:	2101      	movs	r1, #1
 800543a:	4630      	mov	r0, r6
 800543c:	685d      	ldr	r5, [r3, #4]
 800543e:	f7ff fc6b 	bl	8004d18 <ai_buffer_get_size>
 8005442:	4285      	cmp	r5, r0
 8005444:	f0c0 8116 	bcc.w	8005674 <ai_platform_network_process+0x2b4>
 8005448:	68e0      	ldr	r0, [r4, #12]
 800544a:	69b1      	ldr	r1, [r6, #24]
 800544c:	68c2      	ldr	r2, [r0, #12]
 800544e:	68cb      	ldr	r3, [r1, #12]
 8005450:	429a      	cmp	r2, r3
 8005452:	f040 810f 	bne.w	8005674 <ai_platform_network_process+0x2b4>
 8005456:	6882      	ldr	r2, [r0, #8]
 8005458:	688b      	ldr	r3, [r1, #8]
 800545a:	429a      	cmp	r2, r3
 800545c:	f040 810a 	bne.w	8005674 <ai_platform_network_process+0x2b4>
 8005460:	6842      	ldr	r2, [r0, #4]
 8005462:	684b      	ldr	r3, [r1, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	f040 8105 	bne.w	8005674 <ai_platform_network_process+0x2b4>
 800546a:	69a3      	ldr	r3, [r4, #24]
 800546c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005470:	f001 f918 	bl	80066a4 <ai_array_get_data_byte_size>
 8005474:	4605      	mov	r5, r0
 8005476:	4620      	mov	r0, r4
 8005478:	f001 f92c 	bl	80066d4 <get_tensor_byte_size>
 800547c:	4285      	cmp	r5, r0
 800547e:	f0c0 80f9 	bcc.w	8005674 <ai_platform_network_process+0x2b4>
 8005482:	69a3      	ldr	r3, [r4, #24]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f001 f89d 	bl	80065c4 <ai_array_to_buffer_fmt>
 800548a:	6833      	ldr	r3, [r6, #0]
 800548c:	4058      	eors	r0, r3
 800548e:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005492:	f040 81a5 	bne.w	80057e0 <ai_platform_network_process+0x420>
 8005496:	6873      	ldr	r3, [r6, #4]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 819f 	beq.w	80057dc <ai_platform_network_process+0x41c>
 800549e:	69b3      	ldr	r3, [r6, #24]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 81a5 	beq.w	80057f2 <ai_platform_network_process+0x432>
 80054a8:	9a01      	ldr	r2, [sp, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	bf38      	it	cc
 80054ae:	461a      	movcc	r2, r3
 80054b0:	4620      	mov	r0, r4
 80054b2:	9201      	str	r2, [sp, #4]
 80054b4:	f001 f90e 	bl	80066d4 <get_tensor_byte_size>
 80054b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80054bc:	69b3      	ldr	r3, [r6, #24]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	fb00 f303 	mul.w	r3, r0, r3
 80054c4:	f8c8 300c 	str.w	r3, [r8, #12]
 80054c8:	6871      	ldr	r1, [r6, #4]
 80054ca:	f8c8 1004 	str.w	r1, [r8, #4]
 80054ce:	440b      	add	r3, r1
 80054d0:	f849 300b 	str.w	r3, [r9, fp]
 80054d4:	69a0      	ldr	r0, [r4, #24]
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	009a      	lsls	r2, r3, #2
 80054da:	f107 0701 	add.w	r7, r7, #1
 80054de:	f106 061c 	add.w	r6, r6, #28
 80054e2:	f100 80b1 	bmi.w	8005648 <ai_platform_network_process+0x288>
 80054e6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	4419      	add	r1, r3
 80054ee:	6081      	str	r1, [r0, #8]
 80054f0:	69a3      	ldr	r3, [r4, #24]
 80054f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	f8ba 3000 	ldrh.w	r3, [sl]
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	d888      	bhi.n	8005412 <ai_platform_network_process+0x52>
 8005500:	9d03      	ldr	r5, [sp, #12]
 8005502:	9b02      	ldr	r3, [sp, #8]
 8005504:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 817c 	beq.w	8005804 <ai_platform_network_process+0x444>
 800550c:	2a01      	cmp	r2, #1
 800550e:	f240 80bd 	bls.w	800568c <ai_platform_network_process+0x2cc>
 8005512:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8005516:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80b6 	beq.w	800568c <ai_platform_network_process+0x2cc>
 8005520:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005524:	2700      	movs	r7, #0
 8005526:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 80bd 	beq.w	80056aa <ai_platform_network_process+0x2ea>
 8005530:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8005534:	2e00      	cmp	r6, #0
 8005536:	f000 80b8 	beq.w	80056aa <ai_platform_network_process+0x2ea>
 800553a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800553e:	681c      	ldr	r4, [r3, #0]
 8005540:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8005544:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005548:	f000 8160 	beq.w	800580c <ai_platform_network_process+0x44c>
 800554c:	69b3      	ldr	r3, [r6, #24]
 800554e:	2101      	movs	r1, #1
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	4658      	mov	r0, fp
 8005556:	f7ff fbdf 	bl	8004d18 <ai_buffer_get_size>
 800555a:	9b02      	ldr	r3, [sp, #8]
 800555c:	4283      	cmp	r3, r0
 800555e:	f0c0 8095 	bcc.w	800568c <ai_platform_network_process+0x2cc>
 8005562:	68f0      	ldr	r0, [r6, #12]
 8005564:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005568:	68c2      	ldr	r2, [r0, #12]
 800556a:	68cb      	ldr	r3, [r1, #12]
 800556c:	429a      	cmp	r2, r3
 800556e:	f040 808d 	bne.w	800568c <ai_platform_network_process+0x2cc>
 8005572:	6882      	ldr	r2, [r0, #8]
 8005574:	688b      	ldr	r3, [r1, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	f040 8088 	bne.w	800568c <ai_platform_network_process+0x2cc>
 800557c:	6842      	ldr	r2, [r0, #4]
 800557e:	684b      	ldr	r3, [r1, #4]
 8005580:	429a      	cmp	r2, r3
 8005582:	f040 8083 	bne.w	800568c <ai_platform_network_process+0x2cc>
 8005586:	69b3      	ldr	r3, [r6, #24]
 8005588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800558c:	f001 f88a 	bl	80066a4 <ai_array_get_data_byte_size>
 8005590:	9002      	str	r0, [sp, #8]
 8005592:	4630      	mov	r0, r6
 8005594:	f001 f89e 	bl	80066d4 <get_tensor_byte_size>
 8005598:	9b02      	ldr	r3, [sp, #8]
 800559a:	4283      	cmp	r3, r0
 800559c:	d376      	bcc.n	800568c <ai_platform_network_process+0x2cc>
 800559e:	69b3      	ldr	r3, [r6, #24]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	f001 f80f 	bl	80065c4 <ai_array_to_buffer_fmt>
 80055a6:	f8db 3000 	ldr.w	r3, [fp]
 80055aa:	4058      	eors	r0, r3
 80055ac:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 80055b0:	f040 8134 	bne.w	800581c <ai_platform_network_process+0x45c>
 80055b4:	f8db 3004 	ldr.w	r3, [fp, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8127 	beq.w	800580c <ai_platform_network_process+0x44c>
 80055be:	f8db 3018 	ldr.w	r3, [fp, #24]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8133 	beq.w	8005830 <ai_platform_network_process+0x470>
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	bf38      	it	cc
 80055d0:	461a      	movcc	r2, r3
 80055d2:	4630      	mov	r0, r6
 80055d4:	9201      	str	r2, [sp, #4]
 80055d6:	f001 f87d 	bl	80066d4 <get_tensor_byte_size>
 80055da:	f8c9 0008 	str.w	r0, [r9, #8]
 80055de:	f8db 3018 	ldr.w	r3, [fp, #24]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	fb00 f303 	mul.w	r3, r0, r3
 80055e8:	f8c9 300c 	str.w	r3, [r9, #12]
 80055ec:	f8db 1004 	ldr.w	r1, [fp, #4]
 80055f0:	f8c9 1004 	str.w	r1, [r9, #4]
 80055f4:	440b      	add	r3, r1
 80055f6:	f844 300a 	str.w	r3, [r4, sl]
 80055fa:	69b0      	ldr	r0, [r6, #24]
 80055fc:	6803      	ldr	r3, [r0, #0]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	f107 0701 	add.w	r7, r7, #1
 8005604:	f10b 0b1c 	add.w	fp, fp, #28
 8005608:	d44a      	bmi.n	80056a0 <ai_platform_network_process+0x2e0>
 800560a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	4419      	add	r1, r3
 8005612:	6081      	str	r1, [r0, #8]
 8005614:	69b3      	ldr	r3, [r6, #24]
 8005616:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005620:	42bb      	cmp	r3, r7
 8005622:	d880      	bhi.n	8005526 <ai_platform_network_process+0x166>
 8005624:	e041      	b.n	80056aa <ai_platform_network_process+0x2ea>
 8005626:	692a      	ldr	r2, [r5, #16]
 8005628:	61ab      	str	r3, [r5, #24]
 800562a:	f002 0203 	and.w	r2, r2, #3
 800562e:	2a03      	cmp	r2, #3
 8005630:	d115      	bne.n	800565e <ai_platform_network_process+0x29e>
 8005632:	2217      	movs	r2, #23
 8005634:	2112      	movs	r1, #18
 8005636:	f105 000c 	add.w	r0, r5, #12
 800563a:	f000 f909 	bl	8005850 <core_set_error>
 800563e:	2400      	movs	r4, #0
 8005640:	4620      	mov	r0, r4
 8005642:	b005      	add	sp, #20
 8005644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005648:	f8ba 3000 	ldrh.w	r3, [sl]
 800564c:	429f      	cmp	r7, r3
 800564e:	f4ff aee0 	bcc.w	8005412 <ai_platform_network_process+0x52>
 8005652:	e755      	b.n	8005500 <ai_platform_network_process+0x140>
 8005654:	2400      	movs	r4, #0
 8005656:	4620      	mov	r0, r4
 8005658:	b005      	add	sp, #20
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	2230      	movs	r2, #48	@ 0x30
 8005660:	2111      	movs	r1, #17
 8005662:	f105 000c 	add.w	r0, r5, #12
 8005666:	f000 f8f3 	bl	8005850 <core_set_error>
 800566a:	2400      	movs	r4, #0
 800566c:	4620      	mov	r0, r4
 800566e:	b005      	add	sp, #20
 8005670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005674:	9d03      	ldr	r5, [sp, #12]
 8005676:	2218      	movs	r2, #24
 8005678:	2112      	movs	r1, #18
 800567a:	f105 000c 	add.w	r0, r5, #12
 800567e:	f000 f8e7 	bl	8005850 <core_set_error>
 8005682:	2400      	movs	r4, #0
 8005684:	4620      	mov	r0, r4
 8005686:	b005      	add	sp, #20
 8005688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568c:	2218      	movs	r2, #24
 800568e:	2113      	movs	r1, #19
 8005690:	f105 000c 	add.w	r0, r5, #12
 8005694:	f000 f8dc 	bl	8005850 <core_set_error>
 8005698:	2400      	movs	r4, #0
 800569a:	e7d1      	b.n	8005640 <ai_platform_network_process+0x280>
 800569c:	a1c00100 	.word	0xa1c00100
 80056a0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80056a4:	429f      	cmp	r7, r3
 80056a6:	f4ff af3e 	bcc.w	8005526 <ai_platform_network_process+0x166>
 80056aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80056ae:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80056b0:	832b      	strh	r3, [r5, #24]
 80056b2:	2a00      	cmp	r2, #0
 80056b4:	f040 808c 	bne.w	80057d0 <ai_platform_network_process+0x410>
 80056b8:	4616      	mov	r6, r2
 80056ba:	4617      	mov	r7, r2
 80056bc:	8b6c      	ldrh	r4, [r5, #26]
 80056be:	429c      	cmp	r4, r3
 80056c0:	bf38      	it	cc
 80056c2:	46ab      	movcc	fp, r5
 80056c4:	d2bc      	bcs.n	8005640 <ai_platform_network_process+0x280>
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d030      	beq.n	800572c <ai_platform_network_process+0x36c>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	e014      	b.n	80056fa <ai_platform_network_process+0x33a>
 80056d0:	6882      	ldr	r2, [r0, #8]
 80056d2:	68c5      	ldr	r5, [r0, #12]
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	1b52      	subs	r2, r2, r5
 80056d8:	4413      	add	r3, r2
 80056da:	6083      	str	r3, [r0, #8]
 80056dc:	698b      	ldr	r3, [r1, #24]
 80056de:	6862      	ldr	r2, [r4, #4]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80056e6:	f859 200a 	ldr.w	r2, [r9, sl]
 80056ea:	440b      	add	r3, r1
 80056ec:	4293      	cmp	r3, r2
 80056ee:	bf24      	itt	cs
 80056f0:	68e3      	ldrcs	r3, [r4, #12]
 80056f2:	1ad3      	subcs	r3, r2, r3
 80056f4:	6063      	str	r3, [r4, #4]
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	8833      	ldrh	r3, [r6, #0]
 80056fc:	4543      	cmp	r3, r8
 80056fe:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8005702:	d913      	bls.n	800572c <ai_platform_network_process+0x36c>
 8005704:	6873      	ldr	r3, [r6, #4]
 8005706:	b18b      	cbz	r3, 800572c <ai_platform_network_process+0x36c>
 8005708:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800570c:	b171      	cbz	r1, 800572c <ai_platform_network_process+0x36c>
 800570e:	6988      	ldr	r0, [r1, #24]
 8005710:	68b2      	ldr	r2, [r6, #8]
 8005712:	6803      	ldr	r3, [r0, #0]
 8005714:	f8d2 9000 	ldr.w	r9, [r2]
 8005718:	009d      	lsls	r5, r3, #2
 800571a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800571e:	d5d7      	bpl.n	80056d0 <ai_platform_network_process+0x310>
 8005720:	6881      	ldr	r1, [r0, #8]
 8005722:	68a2      	ldr	r2, [r4, #8]
 8005724:	6860      	ldr	r0, [r4, #4]
 8005726:	f000 fec7 	bl	80064b8 <st_int8_copy>
 800572a:	e7da      	b.n	80056e2 <ai_platform_network_process+0x322>
 800572c:	4658      	mov	r0, fp
 800572e:	f000 f8e7 	bl	8005900 <ai_layers_forward_all>
 8005732:	2f00      	cmp	r7, #0
 8005734:	d03d      	beq.n	80057b2 <ai_platform_network_process+0x3f2>
 8005736:	2400      	movs	r4, #0
 8005738:	e016      	b.n	8005768 <ai_platform_network_process+0x3a8>
 800573a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800573e:	f859 100a 	ldr.w	r1, [r9, sl]
 8005742:	4413      	add	r3, r2
 8005744:	428b      	cmp	r3, r1
 8005746:	bf24      	itt	cs
 8005748:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800574c:	1acb      	subcs	r3, r1, r3
 800574e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005752:	6981      	ldr	r1, [r0, #24]
 8005754:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005758:	1b52      	subs	r2, r2, r5
 800575a:	4413      	add	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
 800575e:	6983      	ldr	r3, [r0, #24]
 8005760:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005764:	60da      	str	r2, [r3, #12]
 8005766:	3401      	adds	r4, #1
 8005768:	883b      	ldrh	r3, [r7, #0]
 800576a:	42a3      	cmp	r3, r4
 800576c:	d921      	bls.n	80057b2 <ai_platform_network_process+0x3f2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	b1fb      	cbz	r3, 80057b2 <ai_platform_network_process+0x3f2>
 8005772:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005776:	b1e0      	cbz	r0, 80057b2 <ai_platform_network_process+0x3f2>
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	6983      	ldr	r3, [r0, #24]
 800577c:	f8d2 9000 	ldr.w	r9, [r2]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005788:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800578c:	d5d5      	bpl.n	800573a <ai_platform_network_process+0x37a>
 800578e:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005792:	6898      	ldr	r0, [r3, #8]
 8005794:	f000 fe90 	bl	80064b8 <st_int8_copy>
 8005798:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800579c:	f859 200a 	ldr.w	r2, [r9, sl]
 80057a0:	440b      	add	r3, r1
 80057a2:	4293      	cmp	r3, r2
 80057a4:	bf24      	itt	cs
 80057a6:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80057aa:	1ad3      	subcs	r3, r2, r3
 80057ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80057b0:	e7d9      	b.n	8005766 <ai_platform_network_process+0x3a6>
 80057b2:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80057b6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80057ba:	3401      	adds	r4, #1
 80057bc:	b2a4      	uxth	r4, r4
 80057be:	42a3      	cmp	r3, r4
 80057c0:	f8ab 401a 	strh.w	r4, [fp, #26]
 80057c4:	f63f af7f 	bhi.w	80056c6 <ai_platform_network_process+0x306>
 80057c8:	4620      	mov	r0, r4
 80057ca:	b005      	add	sp, #20
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d0:	2a01      	cmp	r2, #1
 80057d2:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 80057d4:	d02a      	beq.n	800582c <ai_platform_network_process+0x46c>
 80057d6:	f106 070c 	add.w	r7, r6, #12
 80057da:	e76f      	b.n	80056bc <ai_platform_network_process+0x2fc>
 80057dc:	9d03      	ldr	r5, [sp, #12]
 80057de:	e728      	b.n	8005632 <ai_platform_network_process+0x272>
 80057e0:	9d03      	ldr	r5, [sp, #12]
 80057e2:	2219      	movs	r2, #25
 80057e4:	2112      	movs	r1, #18
 80057e6:	f105 000c 	add.w	r0, r5, #12
 80057ea:	f000 f831 	bl	8005850 <core_set_error>
 80057ee:	2400      	movs	r4, #0
 80057f0:	e726      	b.n	8005640 <ai_platform_network_process+0x280>
 80057f2:	9d03      	ldr	r5, [sp, #12]
 80057f4:	4604      	mov	r4, r0
 80057f6:	2221      	movs	r2, #33	@ 0x21
 80057f8:	2112      	movs	r1, #18
 80057fa:	f105 000c 	add.w	r0, r5, #12
 80057fe:	f000 f827 	bl	8005850 <core_set_error>
 8005802:	e71d      	b.n	8005640 <ai_platform_network_process+0x280>
 8005804:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005808:	832b      	strh	r3, [r5, #24]
 800580a:	e752      	b.n	80056b2 <ai_platform_network_process+0x2f2>
 800580c:	2217      	movs	r2, #23
 800580e:	2113      	movs	r1, #19
 8005810:	f105 000c 	add.w	r0, r5, #12
 8005814:	f000 f81c 	bl	8005850 <core_set_error>
 8005818:	2400      	movs	r4, #0
 800581a:	e711      	b.n	8005640 <ai_platform_network_process+0x280>
 800581c:	2219      	movs	r2, #25
 800581e:	2113      	movs	r1, #19
 8005820:	f105 000c 	add.w	r0, r5, #12
 8005824:	f000 f814 	bl	8005850 <core_set_error>
 8005828:	2400      	movs	r4, #0
 800582a:	e709      	b.n	8005640 <ai_platform_network_process+0x280>
 800582c:	2700      	movs	r7, #0
 800582e:	e745      	b.n	80056bc <ai_platform_network_process+0x2fc>
 8005830:	4604      	mov	r4, r0
 8005832:	2221      	movs	r2, #33	@ 0x21
 8005834:	2113      	movs	r1, #19
 8005836:	f105 000c 	add.w	r0, r5, #12
 800583a:	f000 f809 	bl	8005850 <core_set_error>
 800583e:	e6ff      	b.n	8005640 <ai_platform_network_process+0x280>

08005840 <core_init>:
 8005840:	2001      	movs	r0, #1
 8005842:	4770      	bx	lr

08005844 <core_get_error>:
 8005844:	4603      	mov	r3, r0
 8005846:	2200      	movs	r2, #0
 8005848:	6800      	ldr	r0, [r0, #0]
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <core_set_error>:
 8005850:	4603      	mov	r3, r0
 8005852:	7800      	ldrb	r0, [r0, #0]
 8005854:	b108      	cbz	r0, 800585a <core_set_error+0xa>
 8005856:	2000      	movs	r0, #0
 8005858:	4770      	bx	lr
 800585a:	7019      	strb	r1, [r3, #0]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	f362 211f 	bfi	r1, r2, #8, #24
 8005862:	2001      	movs	r0, #1
 8005864:	6019      	str	r1, [r3, #0]
 8005866:	4770      	bx	lr

08005868 <ai_check_custom_types>:
 8005868:	b082      	sub	sp, #8
 800586a:	4b13      	ldr	r3, [pc, #76]	@ (80058b8 <ai_check_custom_types+0x50>)
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	b118      	cbz	r0, 8005878 <ai_check_custom_types+0x10>
 8005870:	7803      	ldrb	r3, [r0, #0]
 8005872:	2b03      	cmp	r3, #3
 8005874:	d002      	beq.n	800587c <ai_check_custom_types+0x14>
 8005876:	2000      	movs	r0, #0
 8005878:	b002      	add	sp, #8
 800587a:	4770      	bx	lr
 800587c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <ai_check_custom_types+0x26>
 8005884:	2001      	movs	r0, #1
 8005886:	f080 0001 	eor.w	r0, r0, #1
 800588a:	b002      	add	sp, #8
 800588c:	4770      	bx	lr
 800588e:	7842      	ldrb	r2, [r0, #1]
 8005890:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005894:	429a      	cmp	r2, r3
 8005896:	f100 0001 	add.w	r0, r0, #1
 800589a:	d1f3      	bne.n	8005884 <ai_check_custom_types+0x1c>
 800589c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80058a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d1ed      	bne.n	8005884 <ai_check_custom_types+0x1c>
 80058a8:	7842      	ldrb	r2, [r0, #1]
 80058aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d1e8      	bne.n	8005884 <ai_check_custom_types+0x1c>
 80058b2:	2000      	movs	r0, #0
 80058b4:	e7e7      	b.n	8005886 <ai_check_custom_types+0x1e>
 80058b6:	bf00      	nop
 80058b8:	84048403 	.word	0x84048403

080058bc <ai_layers_init_all>:
 80058bc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80058be:	2100      	movs	r1, #0
 80058c0:	b143      	cbz	r3, 80058d4 <ai_layers_init_all+0x18>
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	60d8      	str	r0, [r3, #12]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	f101 0101 	add.w	r1, r1, #1
 80058cc:	d002      	beq.n	80058d4 <ai_layers_init_all+0x18>
 80058ce:	b10a      	cbz	r2, 80058d4 <ai_layers_init_all+0x18>
 80058d0:	4613      	mov	r3, r2
 80058d2:	e7f5      	b.n	80058c0 <ai_layers_init_all+0x4>
 80058d4:	4608      	mov	r0, r1
 80058d6:	4770      	bx	lr

080058d8 <ai_layers_post_init_all>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80058dc:	2500      	movs	r5, #0
 80058de:	b16c      	cbz	r4, 80058fc <ai_layers_post_init_all+0x24>
 80058e0:	6863      	ldr	r3, [r4, #4]
 80058e2:	07db      	lsls	r3, r3, #31
 80058e4:	d504      	bpl.n	80058f0 <ai_layers_post_init_all+0x18>
 80058e6:	6a23      	ldr	r3, [r4, #32]
 80058e8:	4620      	mov	r0, r4
 80058ea:	b10b      	cbz	r3, 80058f0 <ai_layers_post_init_all+0x18>
 80058ec:	4798      	blx	r3
 80058ee:	3501      	adds	r5, #1
 80058f0:	6923      	ldr	r3, [r4, #16]
 80058f2:	42a3      	cmp	r3, r4
 80058f4:	d002      	beq.n	80058fc <ai_layers_post_init_all+0x24>
 80058f6:	b10b      	cbz	r3, 80058fc <ai_layers_post_init_all+0x24>
 80058f8:	461c      	mov	r4, r3
 80058fa:	e7f0      	b.n	80058de <ai_layers_post_init_all+0x6>
 80058fc:	4628      	mov	r0, r5
 80058fe:	bd38      	pop	{r3, r4, r5, pc}

08005900 <ai_layers_forward_all>:
 8005900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005904:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8005908:	4604      	mov	r4, r0
 800590a:	f1b8 0f00 	cmp.w	r8, #0
 800590e:	d02b      	beq.n	8005968 <ai_layers_forward_all+0x68>
 8005910:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005912:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8005914:	b321      	cbz	r1, 8005960 <ai_layers_forward_all+0x60>
 8005916:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005918:	2001      	movs	r0, #1
 800591a:	47c0      	blx	r8
 800591c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800591e:	b1fe      	cbz	r6, 8005960 <ai_layers_forward_all+0x60>
 8005920:	2700      	movs	r7, #0
 8005922:	4631      	mov	r1, r6
 8005924:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005926:	2002      	movs	r0, #2
 8005928:	47c0      	blx	r8
 800592a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800592c:	4628      	mov	r0, r5
 800592e:	696b      	ldr	r3, [r5, #20]
 8005930:	4798      	blx	r3
 8005932:	692e      	ldr	r6, [r5, #16]
 8005934:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005936:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005938:	42b5      	cmp	r5, r6
 800593a:	f04f 0003 	mov.w	r0, #3
 800593e:	d007      	beq.n	8005950 <ai_layers_forward_all+0x50>
 8005940:	47c0      	blx	r8
 8005942:	3701      	adds	r7, #1
 8005944:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005946:	2e00      	cmp	r6, #0
 8005948:	d1eb      	bne.n	8005922 <ai_layers_forward_all+0x22>
 800594a:	4638      	mov	r0, r7
 800594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005950:	2003      	movs	r0, #3
 8005952:	47c0      	blx	r8
 8005954:	2300      	movs	r3, #0
 8005956:	3701      	adds	r7, #1
 8005958:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800595a:	4638      	mov	r0, r7
 800595c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005960:	2700      	movs	r7, #0
 8005962:	4638      	mov	r0, r7
 8005964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005968:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 800596a:	63c5      	str	r5, [r0, #60]	@ 0x3c
 800596c:	2d00      	cmp	r5, #0
 800596e:	d0f7      	beq.n	8005960 <ai_layers_forward_all+0x60>
 8005970:	4647      	mov	r7, r8
 8005972:	696b      	ldr	r3, [r5, #20]
 8005974:	4628      	mov	r0, r5
 8005976:	4798      	blx	r3
 8005978:	462b      	mov	r3, r5
 800597a:	692d      	ldr	r5, [r5, #16]
 800597c:	429d      	cmp	r5, r3
 800597e:	d004      	beq.n	800598a <ai_layers_forward_all+0x8a>
 8005980:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005982:	3701      	adds	r7, #1
 8005984:	2d00      	cmp	r5, #0
 8005986:	d1f4      	bne.n	8005972 <ai_layers_forward_all+0x72>
 8005988:	e7df      	b.n	800594a <ai_layers_forward_all+0x4a>
 800598a:	2300      	movs	r3, #0
 800598c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800598e:	3701      	adds	r7, #1
 8005990:	e7db      	b.n	800594a <ai_layers_forward_all+0x4a>
 8005992:	bf00      	nop

08005994 <forward_dense>:
 8005994:	6982      	ldr	r2, [r0, #24]
 8005996:	8813      	ldrh	r3, [r2, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d043      	beq.n	8005a24 <forward_dense+0x90>
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	6855      	ldr	r5, [r2, #4]
 80059a2:	6869      	ldr	r1, [r5, #4]
 80059a4:	b08e      	sub	sp, #56	@ 0x38
 80059a6:	b101      	cbz	r1, 80059aa <forward_dense+0x16>
 80059a8:	6809      	ldr	r1, [r1, #0]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d069      	beq.n	8005a82 <forward_dense+0xee>
 80059ae:	692a      	ldr	r2, [r5, #16]
 80059b0:	b102      	cbz	r2, 80059b4 <forward_dense+0x20>
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d061      	beq.n	8005a7c <forward_dense+0xe8>
 80059b8:	69ec      	ldr	r4, [r5, #28]
 80059ba:	2c00      	cmp	r4, #0
 80059bc:	d057      	beq.n	8005a6e <forward_dense+0xda>
 80059be:	8b2e      	ldrh	r6, [r5, #24]
 80059c0:	6820      	ldr	r0, [r4, #0]
 80059c2:	2e01      	cmp	r6, #1
 80059c4:	d955      	bls.n	8005a72 <forward_dense+0xde>
 80059c6:	6864      	ldr	r4, [r4, #4]
 80059c8:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80059cc:	68cf      	ldr	r7, [r1, #12]
 80059ce:	68d0      	ldr	r0, [r2, #12]
 80059d0:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80059d4:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80059d8:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 80059dc:	f8d9 0000 	ldr.w	r0, [r9]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	fb06 f807 	mul.w	r8, r6, r7
 80059e6:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 80059ea:	d044      	beq.n	8005a76 <forward_dense+0xe2>
 80059ec:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 80059ee:	b11d      	cbz	r5, 80059f8 <forward_dense+0x64>
 80059f0:	682d      	ldr	r5, [r5, #0]
 80059f2:	b10d      	cbz	r5, 80059f8 <forward_dense+0x64>
 80059f4:	69ab      	ldr	r3, [r5, #24]
 80059f6:	689d      	ldr	r5, [r3, #8]
 80059f8:	6992      	ldr	r2, [r2, #24]
 80059fa:	698b      	ldr	r3, [r1, #24]
 80059fc:	6890      	ldr	r0, [r2, #8]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	b10c      	cbz	r4, 8005a06 <forward_dense+0x72>
 8005a02:	69a3      	ldr	r3, [r4, #24]
 8005a04:	689c      	ldr	r4, [r3, #8]
 8005a06:	4b20      	ldr	r3, [pc, #128]	@ (8005a88 <forward_dense+0xf4>)
 8005a08:	459c      	cmp	ip, r3
 8005a0a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8005a0e:	d023      	beq.n	8005a58 <forward_dense+0xc4>
 8005a10:	4e1e      	ldr	r6, [pc, #120]	@ (8005a8c <forward_dense+0xf8>)
 8005a12:	45b4      	cmp	ip, r6
 8005a14:	d015      	beq.n	8005a42 <forward_dense+0xae>
 8005a16:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8005a1a:	459c      	cmp	ip, r3
 8005a1c:	d004      	beq.n	8005a28 <forward_dense+0x94>
 8005a1e:	b00e      	add	sp, #56	@ 0x38
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	deff      	udf	#255	@ 0xff
 8005a28:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005a2c:	a807      	add	r0, sp, #28
 8005a2e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8005a32:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8005a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a38:	f000 f98e 	bl	8005d58 <forward_lite_dense_if32of32wf32>
 8005a3c:	b00e      	add	sp, #56	@ 0x38
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005a46:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005a4a:	9500      	str	r5, [sp, #0]
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	f000 fadd 	bl	800600c <forward_lite_dense_if32of32wf32_lut4>
 8005a52:	b00e      	add	sp, #56	@ 0x38
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005a5c:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005a60:	9500      	str	r5, [sp, #0]
 8005a62:	464b      	mov	r3, r9
 8005a64:	f000 fbfa 	bl	800625c <forward_lite_dense_if32of32wf32_lut8>
 8005a68:	b00e      	add	sp, #56	@ 0x38
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	4620      	mov	r0, r4
 8005a70:	e7aa      	b.n	80059c8 <forward_dense+0x34>
 8005a72:	2400      	movs	r4, #0
 8005a74:	e7a8      	b.n	80059c8 <forward_dense+0x34>
 8005a76:	2300      	movs	r3, #0
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	deff      	udf	#255	@ 0xff
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	deff      	udf	#255	@ 0xff
 8005a82:	2300      	movs	r3, #0
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	deff      	udf	#255	@ 0xff
 8005a88:	01d01040 	.word	0x01d01040
 8005a8c:	01e81040 	.word	0x01e81040

08005a90 <forward_sigmoid>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	ed2d 8b02 	vpush	{d8}
 8005a96:	6982      	ldr	r2, [r0, #24]
 8005a98:	8813      	ldrh	r3, [r2, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d03b      	beq.n	8005b16 <forward_sigmoid+0x86>
 8005a9e:	6852      	ldr	r2, [r2, #4]
 8005aa0:	6854      	ldr	r4, [r2, #4]
 8005aa2:	b104      	cbz	r4, 8005aa6 <forward_sigmoid+0x16>
 8005aa4:	6824      	ldr	r4, [r4, #0]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d034      	beq.n	8005b14 <forward_sigmoid+0x84>
 8005aaa:	6915      	ldr	r5, [r2, #16]
 8005aac:	b105      	cbz	r5, 8005ab0 <forward_sigmoid+0x20>
 8005aae:	682d      	ldr	r5, [r5, #0]
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	0a1b      	lsrs	r3, r3, #8
 8005ab4:	d031      	beq.n	8005b1a <forward_sigmoid+0x8a>
 8005ab6:	68e0      	ldr	r0, [r4, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005abe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ac2:	4298      	cmp	r0, r3
 8005ac4:	fb01 f202 	mul.w	r2, r1, r2
 8005ac8:	d1f9      	bne.n	8005abe <forward_sigmoid+0x2e>
 8005aca:	69a7      	ldr	r7, [r4, #24]
 8005acc:	69a9      	ldr	r1, [r5, #24]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	688e      	ldr	r6, [r1, #8]
 8005ad2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8005adc:	42ab      	cmp	r3, r5
 8005ade:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8005ae2:	d814      	bhi.n	8005b0e <forward_sigmoid+0x7e>
 8005ae4:	3504      	adds	r5, #4
 8005ae6:	3604      	adds	r6, #4
 8005ae8:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8005aec:	462c      	mov	r4, r5
 8005aee:	ed35 0a01 	vldmdb	r5!, {s0}
 8005af2:	eeb1 0a40 	vneg.f32	s0, s0
 8005af6:	f004 ffc7 	bl	800aa88 <expf>
 8005afa:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005afe:	3c08      	subs	r4, #8
 8005b00:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8005b04:	ed66 7a01 	vstmdb	r6!, {s15}
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	d9ee      	bls.n	8005aec <forward_sigmoid+0x5c>
 8005b0e:	ecbd 8b02 	vpop	{d8}
 8005b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b14:	2300      	movs	r3, #0
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	deff      	udf	#255	@ 0xff
 8005b1a:	69ab      	ldr	r3, [r5, #24]
 8005b1c:	69a7      	ldr	r7, [r4, #24]
 8005b1e:	689e      	ldr	r6, [r3, #8]
 8005b20:	68bd      	ldr	r5, [r7, #8]
 8005b22:	e7df      	b.n	8005ae4 <forward_sigmoid+0x54>

08005b24 <forward_relu>:
 8005b24:	6982      	ldr	r2, [r0, #24]
 8005b26:	8813      	ldrh	r3, [r2, #0]
 8005b28:	b323      	cbz	r3, 8005b74 <forward_relu+0x50>
 8005b2a:	6851      	ldr	r1, [r2, #4]
 8005b2c:	684a      	ldr	r2, [r1, #4]
 8005b2e:	b102      	cbz	r2, 8005b32 <forward_relu+0xe>
 8005b30:	6812      	ldr	r2, [r2, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	f000 808d 	beq.w	8005c52 <forward_relu+0x12e>
 8005b38:	b470      	push	{r4, r5, r6}
 8005b3a:	6909      	ldr	r1, [r1, #16]
 8005b3c:	b101      	cbz	r1, 8005b40 <forward_relu+0x1c>
 8005b3e:	6809      	ldr	r1, [r1, #0]
 8005b40:	69c6      	ldr	r6, [r0, #28]
 8005b42:	b1ce      	cbz	r6, 8005b78 <forward_relu+0x54>
 8005b44:	6873      	ldr	r3, [r6, #4]
 8005b46:	6988      	ldr	r0, [r1, #24]
 8005b48:	6991      	ldr	r1, [r2, #24]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d044      	beq.n	8005bd8 <forward_relu+0xb4>
 8005b4e:	6893      	ldr	r3, [r2, #8]
 8005b50:	6880      	ldr	r0, [r0, #8]
 8005b52:	6889      	ldr	r1, [r1, #8]
 8005b54:	0a1b      	lsrs	r3, r3, #8
 8005b56:	d073      	beq.n	8005c40 <forward_relu+0x11c>
 8005b58:	68d5      	ldr	r5, [r2, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b60:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005b64:	429d      	cmp	r5, r3
 8005b66:	fb04 f202 	mul.w	r2, r4, r2
 8005b6a:	d1f9      	bne.n	8005b60 <forward_relu+0x3c>
 8005b6c:	68b3      	ldr	r3, [r6, #8]
 8005b6e:	bc70      	pop	{r4, r5, r6}
 8005b70:	f000 b874 	b.w	8005c5c <forward_lite_nl_relu_generic_if32of32_kernel>
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	deff      	udf	#255	@ 0xff
 8005b78:	6893      	ldr	r3, [r2, #8]
 8005b7a:	6989      	ldr	r1, [r1, #24]
 8005b7c:	6990      	ldr	r0, [r2, #24]
 8005b7e:	6889      	ldr	r1, [r1, #8]
 8005b80:	6884      	ldr	r4, [r0, #8]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	d05e      	beq.n	8005c44 <forward_relu+0x120>
 8005b86:	68d5      	ldr	r5, [r2, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b8e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005b92:	429d      	cmp	r5, r3
 8005b94:	fb00 f202 	mul.w	r2, r0, r2
 8005b98:	d1f9      	bne.n	8005b8e <forward_relu+0x6a>
 8005b9a:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005ba4:	4294      	cmp	r4, r2
 8005ba6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005baa:	d813      	bhi.n	8005bd4 <forward_relu+0xb0>
 8005bac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005c58 <forward_relu+0x134>
 8005bb0:	3204      	adds	r2, #4
 8005bb2:	3104      	adds	r1, #4
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	ed72 7a01 	vldmdb	r2!, {s15}
 8005bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc2:	f1a3 0308 	sub.w	r3, r3, #8
 8005bc6:	bfb8      	it	lt
 8005bc8:	eef0 7a47 	vmovlt.f32	s15, s14
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	ed61 7a01 	vstmdb	r1!, {s15}
 8005bd2:	d9ef      	bls.n	8005bb4 <forward_relu+0x90>
 8005bd4:	bc70      	pop	{r4, r5, r6}
 8005bd6:	4770      	bx	lr
 8005bd8:	688c      	ldr	r4, [r1, #8]
 8005bda:	6891      	ldr	r1, [r2, #8]
 8005bdc:	6880      	ldr	r0, [r0, #8]
 8005bde:	0a09      	lsrs	r1, r1, #8
 8005be0:	d032      	beq.n	8005c48 <forward_relu+0x124>
 8005be2:	68d5      	ldr	r5, [r2, #12]
 8005be4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005be8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005bec:	4295      	cmp	r5, r2
 8005bee:	fb01 f303 	mul.w	r3, r1, r3
 8005bf2:	d1f9      	bne.n	8005be8 <forward_relu+0xc4>
 8005bf4:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005bf8:	3a01      	subs	r2, #1
 8005bfa:	68b1      	ldr	r1, [r6, #8]
 8005bfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c00:	429c      	cmp	r4, r3
 8005c02:	ed91 7a00 	vldr	s14, [r1]
 8005c06:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005c0a:	d8e3      	bhi.n	8005bd4 <forward_relu+0xb0>
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	3304      	adds	r3, #4
 8005c10:	1d02      	adds	r2, r0, #4
 8005c12:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005c16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1e:	f1a3 0104 	sub.w	r1, r3, #4
 8005c22:	f1a3 0308 	sub.w	r3, r3, #8
 8005c26:	d405      	bmi.n	8005c34 <forward_relu+0x110>
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005c2e:	d8d1      	bhi.n	8005bd4 <forward_relu+0xb0>
 8005c30:	460b      	mov	r3, r1
 8005c32:	e7ee      	b.n	8005c12 <forward_relu+0xee>
 8005c34:	429c      	cmp	r4, r3
 8005c36:	ed62 7a01 	vstmdb	r2!, {s15}
 8005c3a:	d8cb      	bhi.n	8005bd4 <forward_relu+0xb0>
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	e7e8      	b.n	8005c12 <forward_relu+0xee>
 8005c40:	2201      	movs	r2, #1
 8005c42:	e793      	b.n	8005b6c <forward_relu+0x48>
 8005c44:	4622      	mov	r2, r4
 8005c46:	e7b1      	b.n	8005bac <forward_relu+0x88>
 8005c48:	68b2      	ldr	r2, [r6, #8]
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	ed92 7a00 	vldr	s14, [r2]
 8005c50:	e7dc      	b.n	8005c0c <forward_relu+0xe8>
 8005c52:	2300      	movs	r3, #0
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	deff      	udf	#255	@ 0xff
 8005c58:	00000000 	.word	0x00000000

08005c5c <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005c5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c60:	ed93 7a00 	vldr	s14, [r3]
 8005c64:	ed93 6a01 	vldr	s12, [r3, #4]
 8005c68:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	d42a      	bmi.n	8005cc8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005c72:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005c76:	3a01      	subs	r2, #1
 8005c78:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005c7c:	4561      	cmp	r1, ip
 8005c7e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005c82:	d85d      	bhi.n	8005d40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005c84:	1d11      	adds	r1, r2, #4
 8005c86:	f10c 0304 	add.w	r3, ip, #4
 8005c8a:	4408      	add	r0, r1
 8005c8c:	ebac 0202 	sub.w	r2, ip, r2
 8005c90:	e00c      	b.n	8005cac <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005c9e:	db01      	blt.n	8005ca4 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8005ca0:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	ed60 7a01 	vstmdb	r0!, {s15}
 8005caa:	d00c      	beq.n	8005cc6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8005cac:	ed73 7a01 	vldmdb	r3!, {s15}
 8005cb0:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb8:	daeb      	bge.n	8005c92 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8005cba:	eef0 7a66 	vmov.f32	s15, s13
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	ed60 7a01 	vstmdb	r0!, {s15}
 8005cc4:	d1f2      	bne.n	8005cac <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005cc6:	4770      	bx	lr
 8005cc8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005ccc:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8005cd0:	3a01      	subs	r2, #1
 8005cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd6:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005cda:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005cde:	d017      	beq.n	8005d10 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005ce0:	4561      	cmp	r1, ip
 8005ce2:	d82d      	bhi.n	8005d40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005ce4:	1d11      	adds	r1, r2, #4
 8005ce6:	f10c 0304 	add.w	r3, ip, #4
 8005cea:	4401      	add	r1, r0
 8005cec:	ebac 0202 	sub.w	r2, ip, r2
 8005cf0:	ed73 7a01 	vldmdb	r3!, {s15}
 8005cf4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d00:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005d04:	d81d      	bhi.n	8005d42 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8005d06:	4293      	cmp	r3, r2
 8005d08:	ed61 6a01 	vstmdb	r1!, {s13}
 8005d0c:	d1f0      	bne.n	8005cf0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005d0e:	4770      	bx	lr
 8005d10:	4561      	cmp	r1, ip
 8005d12:	d815      	bhi.n	8005d40 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005d14:	1d11      	adds	r1, r2, #4
 8005d16:	b500      	push	{lr}
 8005d18:	f10c 0304 	add.w	r3, ip, #4
 8005d1c:	f04f 0e00 	mov.w	lr, #0
 8005d20:	4401      	add	r1, r0
 8005d22:	ebac 0202 	sub.w	r2, ip, r2
 8005d26:	ed73 7a01 	vldmdb	r3!, {s15}
 8005d2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	d40b      	bmi.n	8005d4c <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8005d34:	4293      	cmp	r3, r2
 8005d36:	f841 ed04 	str.w	lr, [r1, #-4]!
 8005d3a:	d1f4      	bne.n	8005d26 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8005d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	4293      	cmp	r3, r2
 8005d44:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d48:	d1d2      	bne.n	8005cf0 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005d4a:	4770      	bx	lr
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	ed61 7a01 	vstmdb	r1!, {s15}
 8005d52:	d1e8      	bne.n	8005d26 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8005d54:	e7f2      	b.n	8005d3c <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8005d56:	bf00      	nop

08005d58 <forward_lite_dense_if32of32wf32>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8005d60:	6801      	ldr	r1, [r0, #0]
 8005d62:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005d70:	4299      	cmp	r1, r3
 8005d72:	9100      	str	r1, [sp, #0]
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	f080 811e 	bcs.w	8005fb6 <forward_lite_dense_if32of32wf32+0x25e>
 8005d7a:	6904      	ldr	r4, [r0, #16]
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	0096      	lsls	r6, r2, #2
 8005d80:	9b00      	ldr	r3, [sp, #0]
 8005d82:	68bd      	ldr	r5, [r7, #8]
 8005d84:	eb03 0e06 	add.w	lr, r3, r6
 8005d88:	459e      	cmp	lr, r3
 8005d8a:	461e      	mov	r6, r3
 8005d8c:	f240 8104 	bls.w	8005f98 <forward_lite_dense_if32of32wf32+0x240>
 8005d90:	f1a4 0c10 	sub.w	ip, r4, #16
 8005d94:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8005d98:	f10c 0c01 	add.w	ip, ip, #1
 8005d9c:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8005da0:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8005da4:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8005da8:	2c0f      	cmp	r4, #15
 8005daa:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8006008 <forward_lite_dense_if32of32wf32+0x2b0>
 8005dae:	f240 8105 	bls.w	8005fbc <forward_lite_dense_if32of32wf32+0x264>
 8005db2:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8005db6:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8005dba:	4621      	mov	r1, r4
 8005dbc:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 8005dc0:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8005dc4:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8005dc8:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8005dcc:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8005dd0:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8005dd4:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8005dd8:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8005ddc:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8005de0:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8005de4:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8005de8:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8005dec:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8005df0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005df4:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 8005df8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dfc:	3910      	subs	r1, #16
 8005dfe:	290f      	cmp	r1, #15
 8005e00:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8005e04:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 8005e08:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005e0c:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8005e10:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8005e14:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 8005e18:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8005e1c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005e20:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8005e24:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 8005e28:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e2c:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8005e30:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8005e34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e38:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8005e3c:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8005e40:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005e44:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 8005e48:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8005e4c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e50:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8005e54:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8005e58:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e5c:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8005e60:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8005e64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e68:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8005e6c:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 8005e70:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005e74:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005e78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005e7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005e80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e84:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e8c:	d896      	bhi.n	8005dbc <forward_lite_dense_if32of32wf32+0x64>
 8005e8e:	eb05 020b 	add.w	r2, r5, fp
 8005e92:	f004 010f 	and.w	r1, r4, #15
 8005e96:	4663      	mov	r3, ip
 8005e98:	2903      	cmp	r1, #3
 8005e9a:	d95f      	bls.n	8005f5c <forward_lite_dense_if32of32wf32+0x204>
 8005e9c:	edd2 6a01 	vldr	s13, [r2, #4]
 8005ea0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea4:	ed93 6a00 	vldr	s12, [r3]
 8005ea8:	ed93 5a02 	vldr	s10, [r3, #8]
 8005eac:	edd2 5a02 	vldr	s11, [r2, #8]
 8005eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005eb4:	edd2 6a00 	vldr	s13, [r2]
 8005eb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ebc:	1f08      	subs	r0, r1, #4
 8005ebe:	2803      	cmp	r0, #3
 8005ec0:	ed93 6a03 	vldr	s12, [r3, #12]
 8005ec4:	edd2 6a03 	vldr	s13, [r2, #12]
 8005ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ecc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ed0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ed4:	eeb0 7a67 	vmov.f32	s14, s15
 8005ed8:	d938      	bls.n	8005f4c <forward_lite_dense_if32of32wf32+0x1f4>
 8005eda:	edd2 6a05 	vldr	s13, [r2, #20]
 8005ede:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ee2:	ed93 6a04 	vldr	s12, [r3, #16]
 8005ee6:	ed93 5a06 	vldr	s10, [r3, #24]
 8005eea:	edd2 5a06 	vldr	s11, [r2, #24]
 8005eee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ef2:	edd2 6a04 	vldr	s13, [r2, #16]
 8005ef6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005efa:	f1a1 0a08 	sub.w	sl, r1, #8
 8005efe:	f1ba 0f03 	cmp.w	sl, #3
 8005f02:	ed93 6a07 	vldr	s12, [r3, #28]
 8005f06:	edd2 6a07 	vldr	s13, [r2, #28]
 8005f0a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f0e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f16:	d919      	bls.n	8005f4c <forward_lite_dense_if32of32wf32+0x1f4>
 8005f18:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005f1c:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8005f20:	ed92 6a08 	vldr	s12, [r2, #32]
 8005f24:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 8005f28:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8005f2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f30:	edd3 6a08 	vldr	s13, [r3, #32]
 8005f34:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f38:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8005f3c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8005f40:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f4c:	0880      	lsrs	r0, r0, #2
 8005f4e:	3001      	adds	r0, #1
 8005f50:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005f54:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005f58:	f001 0103 	and.w	r1, r1, #3
 8005f5c:	b1a9      	cbz	r1, 8005f8a <forward_lite_dense_if32of32wf32+0x232>
 8005f5e:	edd3 6a00 	vldr	s13, [r3]
 8005f62:	edd2 7a00 	vldr	s15, [r2]
 8005f66:	3901      	subs	r1, #1
 8005f68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f6c:	d00d      	beq.n	8005f8a <forward_lite_dense_if32of32wf32+0x232>
 8005f6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f72:	edd2 7a01 	vldr	s15, [r2, #4]
 8005f76:	2901      	cmp	r1, #1
 8005f78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f7c:	d005      	beq.n	8005f8a <forward_lite_dense_if32of32wf32+0x232>
 8005f7e:	edd2 6a02 	vldr	s13, [r2, #8]
 8005f82:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f86:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f8a:	444d      	add	r5, r9
 8005f8c:	eca6 7a01 	vstmia	r6!, {s14}
 8005f90:	45b6      	cmp	lr, r6
 8005f92:	f63f af09 	bhi.w	8005da8 <forward_lite_dense_if32of32wf32+0x50>
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	b99b      	cbnz	r3, 8005fc4 <forward_lite_dense_if32of32wf32+0x26c>
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	9901      	ldr	r1, [sp, #4]
 8005fa0:	693c      	ldr	r4, [r7, #16]
 8005fa2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005fa6:	4299      	cmp	r1, r3
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8005fae:	ea4f 0682 	mov.w	r6, r2, lsl #2
 8005fb2:	f63f aee5 	bhi.w	8005d80 <forward_lite_dense_if32of32wf32+0x28>
 8005fb6:	b003      	add	sp, #12
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	4643      	mov	r3, r8
 8005fc2:	e769      	b.n	8005e98 <forward_lite_dense_if32of32wf32+0x140>
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d0e9      	beq.n	8005f9c <forward_lite_dense_if32of32wf32+0x244>
 8005fc8:	9a00      	ldr	r2, [sp, #0]
 8005fca:	ed93 7a00 	vldr	s14, [r3]
 8005fce:	edd2 7a00 	vldr	s15, [r2]
 8005fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	edc2 7a00 	vstr	s15, [r2]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	2a01      	cmp	r2, #1
 8005fe0:	d9dc      	bls.n	8005f9c <forward_lite_dense_if32of32wf32+0x244>
 8005fe2:	1d19      	adds	r1, r3, #4
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	ed91 7a00 	vldr	s14, [r1]
 8005fec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005ff0:	edd2 7a00 	vldr	s15, [r2]
 8005ff4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	ece1 7a01 	vstmia	r1!, {s15}
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	d8f0      	bhi.n	8005fe6 <forward_lite_dense_if32of32wf32+0x28e>
 8006004:	e7ca      	b.n	8005f9c <forward_lite_dense_if32of32wf32+0x244>
 8006006:	bf00      	nop
 8006008:	00000000 	.word	0x00000000

0800600c <forward_lite_dense_if32of32wf32_lut4>:
 800600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006010:	b08d      	sub	sp, #52	@ 0x34
 8006012:	4605      	mov	r5, r0
 8006014:	9005      	str	r0, [sp, #20]
 8006016:	920a      	str	r2, [sp, #40]	@ 0x28
 8006018:	4618      	mov	r0, r3
 800601a:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 800601e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8006020:	fb02 f303 	mul.w	r3, r2, r3
 8006024:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006028:	460c      	mov	r4, r1
 800602a:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800602c:	9308      	str	r3, [sp, #32]
 800602e:	b126      	cbz	r6, 800603a <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8006030:	2240      	movs	r2, #64	@ 0x40
 8006032:	4631      	mov	r1, r6
 8006034:	f000 fa40 	bl	80064b8 <st_int8_copy>
 8006038:	4630      	mov	r0, r6
 800603a:	9b05      	ldr	r3, [sp, #20]
 800603c:	9a08      	ldr	r2, [sp, #32]
 800603e:	4293      	cmp	r3, r2
 8006040:	f080 80f5 	bcs.w	800622e <forward_lite_dense_if32of32wf32_lut4+0x222>
 8006044:	08eb      	lsrs	r3, r5, #3
 8006046:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	f005 0101 	and.w	r1, r5, #1
 800604e:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	f025 0801 	bic.w	r8, r5, #1
 800605a:	9102      	str	r1, [sp, #8]
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	00a9      	lsls	r1, r5, #2
 8006060:	9b05      	ldr	r3, [sp, #20]
 8006062:	9207      	str	r2, [sp, #28]
 8006064:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006068:	9109      	str	r1, [sp, #36]	@ 0x24
 800606a:	f104 0b20 	add.w	fp, r4, #32
 800606e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006070:	9a07      	ldr	r2, [sp, #28]
 8006072:	eb03 0902 	add.w	r9, r3, r2
 8006076:	4599      	cmp	r9, r3
 8006078:	f1ab 0220 	sub.w	r2, fp, #32
 800607c:	9206      	str	r2, [sp, #24]
 800607e:	f240 80d9 	bls.w	8006234 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8006082:	469e      	mov	lr, r3
 8006084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006086:	f108 33ff 	add.w	r3, r8, #4294967295
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	9b01      	ldr	r3, [sp, #4]
 800608e:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006258 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 80b2 	beq.w	80061fc <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	18d5      	adds	r5, r2, r3
 800609c:	465b      	mov	r3, fp
 800609e:	7814      	ldrb	r4, [r2, #0]
 80060a0:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80060a4:	7851      	ldrb	r1, [r2, #1]
 80060a6:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 80060aa:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 80060ae:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 80060b2:	ed13 5a04 	vldr	s10, [r3, #-16]
 80060b6:	ed53 5a03 	vldr	s11, [r3, #-12]
 80060ba:	ed13 6a02 	vldr	s12, [r3, #-8]
 80060be:	ed53 6a01 	vldr	s13, [r3, #-4]
 80060c2:	f004 060f 	and.w	r6, r4, #15
 80060c6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80060ca:	edd6 7a00 	vldr	s15, [r6]
 80060ce:	0924      	lsrs	r4, r4, #4
 80060d0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80060d4:	ed94 3a00 	vldr	s6, [r4]
 80060d8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80060dc:	090c      	lsrs	r4, r1, #4
 80060de:	eee3 7a23 	vfma.f32	s15, s6, s7
 80060e2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80060e6:	f001 010f 	and.w	r1, r1, #15
 80060ea:	edd4 3a00 	vldr	s7, [r4]
 80060ee:	7894      	ldrb	r4, [r2, #2]
 80060f0:	eee3 7a84 	vfma.f32	s15, s7, s8
 80060f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060f8:	0926      	lsrs	r6, r4, #4
 80060fa:	ed91 4a00 	vldr	s8, [r1]
 80060fe:	78d1      	ldrb	r1, [r2, #3]
 8006100:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006104:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006108:	f004 040f 	and.w	r4, r4, #15
 800610c:	edd6 4a00 	vldr	s9, [r6]
 8006110:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006114:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006118:	3204      	adds	r2, #4
 800611a:	ed94 5a00 	vldr	s10, [r4]
 800611e:	090c      	lsrs	r4, r1, #4
 8006120:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006124:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006128:	f001 010f 	and.w	r1, r1, #15
 800612c:	edd4 5a00 	vldr	s11, [r4]
 8006130:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006134:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006138:	42aa      	cmp	r2, r5
 800613a:	ed91 6a00 	vldr	s12, [r1]
 800613e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006142:	f103 0320 	add.w	r3, r3, #32
 8006146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800614a:	d1a8      	bne.n	800609e <forward_lite_dense_if32of32wf32_lut4+0x92>
 800614c:	4656      	mov	r6, sl
 800614e:	4546      	cmp	r6, r8
 8006150:	d258      	bcs.n	8006204 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8006152:	9b03      	ldr	r3, [sp, #12]
 8006154:	1b9c      	subs	r4, r3, r6
 8006156:	08e7      	lsrs	r7, r4, #3
 8006158:	f106 0208 	add.w	r2, r6, #8
 800615c:	1e69      	subs	r1, r5, #1
 800615e:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8006162:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006166:	ed52 5a01 	vldr	s11, [r2, #-4]
 800616a:	ed52 6a02 	vldr	s13, [r2, #-8]
 800616e:	f003 0c0f 	and.w	ip, r3, #15
 8006172:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006176:	eddc 7a00 	vldr	s15, [ip]
 800617a:	091b      	lsrs	r3, r3, #4
 800617c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006180:	ed93 6a00 	vldr	s12, [r3]
 8006184:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006188:	42a1      	cmp	r1, r4
 800618a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800618e:	f102 0208 	add.w	r2, r2, #8
 8006192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006196:	d1e4      	bne.n	8006162 <forward_lite_dense_if32of32wf32_lut4+0x156>
 8006198:	3701      	adds	r7, #1
 800619a:	19ea      	adds	r2, r5, r7
 800619c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80061a0:	9b02      	ldr	r3, [sp, #8]
 80061a2:	b30b      	cbz	r3, 80061e8 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 80061a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80061a8:	edd6 7a00 	vldr	s15, [r6]
 80061ac:	091b      	lsrs	r3, r3, #4
 80061ae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80061b2:	edd3 6a00 	vldr	s13, [r3]
 80061b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80061ba:	ecae 7a01 	vstmia	lr!, {s14}
 80061be:	45f1      	cmp	r9, lr
 80061c0:	f63f af64 	bhi.w	800608c <forward_lite_dense_if32of32wf32_lut4+0x80>
 80061c4:	9b05      	ldr	r3, [sp, #20]
 80061c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061c8:	1899      	adds	r1, r3, r2
 80061ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80061cc:	b9e3      	cbnz	r3, 8006208 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 80061ce:	9b08      	ldr	r3, [sp, #32]
 80061d0:	428b      	cmp	r3, r1
 80061d2:	d92c      	bls.n	800622e <forward_lite_dense_if32of32wf32_lut4+0x222>
 80061d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d6:	4498      	add	r8, r3
 80061d8:	449a      	add	sl, r3
 80061da:	449b      	add	fp, r3
 80061dc:	9b05      	ldr	r3, [sp, #20]
 80061de:	4599      	cmp	r9, r3
 80061e0:	d92a      	bls.n	8006238 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 80061e2:	9105      	str	r1, [sp, #20]
 80061e4:	460b      	mov	r3, r1
 80061e6:	e743      	b.n	8006070 <forward_lite_dense_if32of32wf32_lut4+0x64>
 80061e8:	ecae 7a01 	vstmia	lr!, {s14}
 80061ec:	45f1      	cmp	r9, lr
 80061ee:	d9e9      	bls.n	80061c4 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 80061f0:	9b01      	ldr	r3, [sp, #4]
 80061f2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006258 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f47f af4e 	bne.w	8006098 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 80061fc:	9e06      	ldr	r6, [sp, #24]
 80061fe:	4546      	cmp	r6, r8
 8006200:	4615      	mov	r5, r2
 8006202:	d3a6      	bcc.n	8006152 <forward_lite_dense_if32of32wf32_lut4+0x146>
 8006204:	462a      	mov	r2, r5
 8006206:	e7cb      	b.n	80061a0 <forward_lite_dense_if32of32wf32_lut4+0x194>
 8006208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0df      	beq.n	80061ce <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 800620e:	9b07      	ldr	r3, [sp, #28]
 8006210:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006212:	1acb      	subs	r3, r1, r3
 8006214:	edd3 7a00 	vldr	s15, [r3]
 8006218:	ecb2 7a01 	vldmia	r2!, {s14}
 800621c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006220:	ece3 7a01 	vstmia	r3!, {s15}
 8006224:	428b      	cmp	r3, r1
 8006226:	d1f5      	bne.n	8006214 <forward_lite_dense_if32of32wf32_lut4+0x208>
 8006228:	9b08      	ldr	r3, [sp, #32]
 800622a:	428b      	cmp	r3, r1
 800622c:	d8d2      	bhi.n	80061d4 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 800622e:	b00d      	add	sp, #52	@ 0x34
 8006230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	4619      	mov	r1, r3
 8006236:	e7c8      	b.n	80061ca <forward_lite_dense_if32of32wf32_lut4+0x1be>
 8006238:	9b07      	ldr	r3, [sp, #28]
 800623a:	1acb      	subs	r3, r1, r3
 800623c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800623e:	461a      	mov	r2, r3
 8006240:	ed92 7a00 	vldr	s14, [r2]
 8006244:	ecf0 7a01 	vldmia	r0!, {s15}
 8006248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800624c:	ece2 7a01 	vstmia	r2!, {s15}
 8006250:	428a      	cmp	r2, r1
 8006252:	d1f5      	bne.n	8006240 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8006254:	e7f2      	b.n	800623c <forward_lite_dense_if32of32wf32_lut4+0x230>
 8006256:	bf00      	nop
 8006258:	00000000 	.word	0x00000000

0800625c <forward_lite_dense_if32of32wf32_lut8>:
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	b087      	sub	sp, #28
 8006262:	460f      	mov	r7, r1
 8006264:	9204      	str	r2, [sp, #16]
 8006266:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800626a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800626c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800626e:	fb01 f202 	mul.w	r2, r1, r2
 8006272:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006276:	4605      	mov	r5, r0
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	b136      	cbz	r6, 800628a <forward_lite_dense_if32of32wf32_lut8+0x2e>
 800627c:	4618      	mov	r0, r3
 800627e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006282:	4631      	mov	r1, r6
 8006284:	f000 f918 	bl	80064b8 <st_int8_copy>
 8006288:	4633      	mov	r3, r6
 800628a:	9a02      	ldr	r2, [sp, #8]
 800628c:	4295      	cmp	r5, r2
 800628e:	f080 80f9 	bcs.w	8006484 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8006292:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800629a:	9201      	str	r2, [sp, #4]
 800629c:	9205      	str	r2, [sp, #20]
 800629e:	462a      	mov	r2, r5
 80062a0:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80062a4:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80062a8:	464d      	mov	r5, r9
 80062aa:	4691      	mov	r9, r2
 80062ac:	9a01      	ldr	r2, [sp, #4]
 80062ae:	eb09 0e02 	add.w	lr, r9, r2
 80062b2:	00a1      	lsls	r1, r4, #2
 80062b4:	3720      	adds	r7, #32
 80062b6:	45ce      	cmp	lr, r9
 80062b8:	f004 0007 	and.w	r0, r4, #7
 80062bc:	9103      	str	r1, [sp, #12]
 80062be:	f1a7 0b20 	sub.w	fp, r7, #32
 80062c2:	f240 80c8 	bls.w	8006456 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80062c6:	9a04      	ldr	r2, [sp, #16]
 80062c8:	46cc      	mov	ip, r9
 80062ca:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80064b4 <forward_lite_dense_if32of32wf32_lut8+0x258>
 80062ce:	2d00      	cmp	r5, #0
 80062d0:	f000 80dd 	beq.w	800648e <forward_lite_dense_if32of32wf32_lut8+0x232>
 80062d4:	eb02 060a 	add.w	r6, r2, sl
 80062d8:	4639      	mov	r1, r7
 80062da:	7854      	ldrb	r4, [r2, #1]
 80062dc:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 80062e0:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 80062e4:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 80062e8:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 80062ec:	ed11 5a04 	vldr	s10, [r1, #-16]
 80062f0:	ed51 5a03 	vldr	s11, [r1, #-12]
 80062f4:	ed11 6a02 	vldr	s12, [r1, #-8]
 80062f8:	ed51 6a01 	vldr	s13, [r1, #-4]
 80062fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006300:	edd4 7a00 	vldr	s15, [r4]
 8006304:	7814      	ldrb	r4, [r2, #0]
 8006306:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800630a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800630e:	ed94 3a00 	vldr	s6, [r4]
 8006312:	7894      	ldrb	r4, [r2, #2]
 8006314:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006318:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800631c:	3208      	adds	r2, #8
 800631e:	edd4 3a00 	vldr	s7, [r4]
 8006322:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8006326:	eee3 7a84 	vfma.f32	s15, s7, s8
 800632a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800632e:	3120      	adds	r1, #32
 8006330:	ed94 4a00 	vldr	s8, [r4]
 8006334:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8006338:	eee4 7a24 	vfma.f32	s15, s8, s9
 800633c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006340:	edd4 4a00 	vldr	s9, [r4]
 8006344:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8006348:	eee4 7a85 	vfma.f32	s15, s9, s10
 800634c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006350:	ed94 5a00 	vldr	s10, [r4]
 8006354:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8006358:	eee5 7a25 	vfma.f32	s15, s10, s11
 800635c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006360:	edd4 5a00 	vldr	s11, [r4]
 8006364:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8006368:	eee5 7a86 	vfma.f32	s15, s11, s12
 800636c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006370:	42b2      	cmp	r2, r6
 8006372:	ed94 6a00 	vldr	s12, [r4]
 8006376:	eee6 7a26 	vfma.f32	s15, s12, s13
 800637a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800637e:	d1ac      	bne.n	80062da <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8006380:	4642      	mov	r2, r8
 8006382:	2800      	cmp	r0, #0
 8006384:	f000 8081 	beq.w	800648a <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8006388:	7831      	ldrb	r1, [r6, #0]
 800638a:	edd2 7a00 	vldr	s15, [r2]
 800638e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006392:	edd1 6a00 	vldr	s13, [r1]
 8006396:	2801      	cmp	r0, #1
 8006398:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800639c:	d03f      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800639e:	7871      	ldrb	r1, [r6, #1]
 80063a0:	edd2 7a01 	vldr	s15, [r2, #4]
 80063a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80063a8:	edd1 6a00 	vldr	s13, [r1]
 80063ac:	2802      	cmp	r0, #2
 80063ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063b2:	d034      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80063b4:	78b1      	ldrb	r1, [r6, #2]
 80063b6:	edd2 7a02 	vldr	s15, [r2, #8]
 80063ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80063be:	edd1 6a00 	vldr	s13, [r1]
 80063c2:	2803      	cmp	r0, #3
 80063c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063c8:	d029      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80063ca:	78f1      	ldrb	r1, [r6, #3]
 80063cc:	edd2 6a03 	vldr	s13, [r2, #12]
 80063d0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80063d4:	edd1 7a00 	vldr	s15, [r1]
 80063d8:	2804      	cmp	r0, #4
 80063da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063de:	d01e      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80063e0:	7931      	ldrb	r1, [r6, #4]
 80063e2:	edd2 6a04 	vldr	s13, [r2, #16]
 80063e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80063ea:	edd1 7a00 	vldr	s15, [r1]
 80063ee:	2805      	cmp	r0, #5
 80063f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80063f4:	d013      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80063f6:	7971      	ldrb	r1, [r6, #5]
 80063f8:	edd2 6a05 	vldr	s13, [r2, #20]
 80063fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006400:	edd1 7a00 	vldr	s15, [r1]
 8006404:	2806      	cmp	r0, #6
 8006406:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800640a:	d008      	beq.n	800641e <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800640c:	edd2 7a06 	vldr	s15, [r2, #24]
 8006410:	79b2      	ldrb	r2, [r6, #6]
 8006412:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006416:	edd2 6a00 	vldr	s13, [r2]
 800641a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800641e:	1832      	adds	r2, r6, r0
 8006420:	ecac 7a01 	vstmia	ip!, {s14}
 8006424:	45e6      	cmp	lr, ip
 8006426:	f63f af50 	bhi.w	80062ca <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800642a:	9a05      	ldr	r2, [sp, #20]
 800642c:	eb09 0402 	add.w	r4, r9, r2
 8006430:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006432:	b9a2      	cbnz	r2, 800645e <forward_lite_dense_if32of32wf32_lut8+0x202>
 8006434:	9a02      	ldr	r2, [sp, #8]
 8006436:	42a2      	cmp	r2, r4
 8006438:	d924      	bls.n	8006484 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800643a:	9a03      	ldr	r2, [sp, #12]
 800643c:	45ce      	cmp	lr, r9
 800643e:	4490      	add	r8, r2
 8006440:	4417      	add	r7, r2
 8006442:	d927      	bls.n	8006494 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8006444:	9a01      	ldr	r2, [sp, #4]
 8006446:	46a1      	mov	r9, r4
 8006448:	eb09 0e02 	add.w	lr, r9, r2
 800644c:	45ce      	cmp	lr, r9
 800644e:	f1a7 0b20 	sub.w	fp, r7, #32
 8006452:	f63f af38 	bhi.w	80062c6 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8006456:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006458:	464c      	mov	r4, r9
 800645a:	2a00      	cmp	r2, #0
 800645c:	d0ea      	beq.n	8006434 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800645e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006460:	2a00      	cmp	r2, #0
 8006462:	d0e7      	beq.n	8006434 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8006464:	9a01      	ldr	r2, [sp, #4]
 8006466:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006468:	1aa2      	subs	r2, r4, r2
 800646a:	edd2 7a00 	vldr	s15, [r2]
 800646e:	ecb1 7a01 	vldmia	r1!, {s14}
 8006472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006476:	ece2 7a01 	vstmia	r2!, {s15}
 800647a:	4294      	cmp	r4, r2
 800647c:	d1f5      	bne.n	800646a <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800647e:	9a02      	ldr	r2, [sp, #8]
 8006480:	42a2      	cmp	r2, r4
 8006482:	d8da      	bhi.n	800643a <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8006484:	b007      	add	sp, #28
 8006486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800648a:	4632      	mov	r2, r6
 800648c:	e7c8      	b.n	8006420 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800648e:	4616      	mov	r6, r2
 8006490:	465a      	mov	r2, fp
 8006492:	e776      	b.n	8006382 <forward_lite_dense_if32of32wf32_lut8+0x126>
 8006494:	9b01      	ldr	r3, [sp, #4]
 8006496:	1ae3      	subs	r3, r4, r3
 8006498:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800649a:	461a      	mov	r2, r3
 800649c:	ed92 7a00 	vldr	s14, [r2]
 80064a0:	ecf1 7a01 	vldmia	r1!, {s15}
 80064a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064a8:	ece2 7a01 	vstmia	r2!, {s15}
 80064ac:	42a2      	cmp	r2, r4
 80064ae:	d1f5      	bne.n	800649c <forward_lite_dense_if32of32wf32_lut8+0x240>
 80064b0:	e7f2      	b.n	8006498 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 80064b2:	bf00      	nop
 80064b4:	00000000 	.word	0x00000000

080064b8 <st_int8_copy>:
 80064b8:	4288      	cmp	r0, r1
 80064ba:	d056      	beq.n	800656a <st_int8_copy+0xb2>
 80064bc:	2a00      	cmp	r2, #0
 80064be:	d054      	beq.n	800656a <st_int8_copy+0xb2>
 80064c0:	4288      	cmp	r0, r1
 80064c2:	d353      	bcc.n	800656c <st_int8_copy+0xb4>
 80064c4:	078b      	lsls	r3, r1, #30
 80064c6:	d102      	bne.n	80064ce <st_int8_copy+0x16>
 80064c8:	e009      	b.n	80064de <st_int8_copy+0x26>
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d05b      	beq.n	8006586 <st_int8_copy+0xce>
 80064ce:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80064d2:	f801 3b01 	strb.w	r3, [r1], #1
 80064d6:	078b      	lsls	r3, r1, #30
 80064d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80064dc:	d1f5      	bne.n	80064ca <st_int8_copy+0x12>
 80064de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80064e6:	d068      	beq.n	80065ba <st_int8_copy+0x102>
 80064e8:	ea40 0301 	orr.w	r3, r0, r1
 80064ec:	075b      	lsls	r3, r3, #29
 80064ee:	d14b      	bne.n	8006588 <st_int8_copy+0xd0>
 80064f0:	f1be 0f01 	cmp.w	lr, #1
 80064f4:	d048      	beq.n	8006588 <st_int8_copy+0xd0>
 80064f6:	f100 0310 	add.w	r3, r0, #16
 80064fa:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80064fe:	f101 0c10 	add.w	ip, r1, #16
 8006502:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006506:	ed13 6b04 	vldr	d6, [r3, #-16]
 800650a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800650e:	3310      	adds	r3, #16
 8006510:	4573      	cmp	r3, lr
 8006512:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8006516:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800651a:	f10c 0c10 	add.w	ip, ip, #16
 800651e:	d1f2      	bne.n	8006506 <st_int8_copy+0x4e>
 8006520:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006524:	4421      	add	r1, r4
 8006526:	4420      	add	r0, r4
 8006528:	f002 0203 	and.w	r2, r2, #3
 800652c:	b16b      	cbz	r3, 800654a <st_int8_copy+0x92>
 800652e:	6804      	ldr	r4, [r0, #0]
 8006530:	600c      	str	r4, [r1, #0]
 8006532:	1e5c      	subs	r4, r3, #1
 8006534:	d005      	beq.n	8006542 <st_int8_copy+0x8a>
 8006536:	6845      	ldr	r5, [r0, #4]
 8006538:	604d      	str	r5, [r1, #4]
 800653a:	2c01      	cmp	r4, #1
 800653c:	bf1c      	itt	ne
 800653e:	6884      	ldrne	r4, [r0, #8]
 8006540:	608c      	strne	r4, [r1, #8]
 8006542:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006546:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800654a:	b162      	cbz	r2, 8006566 <st_int8_copy+0xae>
 800654c:	f990 3000 	ldrsb.w	r3, [r0]
 8006550:	700b      	strb	r3, [r1, #0]
 8006552:	3a01      	subs	r2, #1
 8006554:	d007      	beq.n	8006566 <st_int8_copy+0xae>
 8006556:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800655a:	704b      	strb	r3, [r1, #1]
 800655c:	2a01      	cmp	r2, #1
 800655e:	bf1c      	itt	ne
 8006560:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8006564:	708b      	strbne	r3, [r1, #2]
 8006566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800656a:	4770      	bx	lr
 800656c:	1883      	adds	r3, r0, r2
 800656e:	428b      	cmp	r3, r1
 8006570:	d9a8      	bls.n	80064c4 <st_int8_copy+0xc>
 8006572:	4283      	cmp	r3, r0
 8006574:	440a      	add	r2, r1
 8006576:	d9f8      	bls.n	800656a <st_int8_copy+0xb2>
 8006578:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800657c:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006580:	4283      	cmp	r3, r0
 8006582:	d1f9      	bne.n	8006578 <st_int8_copy+0xc0>
 8006584:	4770      	bx	lr
 8006586:	4770      	bx	lr
 8006588:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800658c:	460b      	mov	r3, r1
 800658e:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006592:	4684      	mov	ip, r0
 8006594:	f8dc 7000 	ldr.w	r7, [ip]
 8006598:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800659c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80065a0:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80065a4:	f8c3 800c 	str.w	r8, [r3, #12]
 80065a8:	601f      	str	r7, [r3, #0]
 80065aa:	605e      	str	r6, [r3, #4]
 80065ac:	609d      	str	r5, [r3, #8]
 80065ae:	3310      	adds	r3, #16
 80065b0:	459e      	cmp	lr, r3
 80065b2:	f10c 0c10 	add.w	ip, ip, #16
 80065b6:	d1ed      	bne.n	8006594 <st_int8_copy+0xdc>
 80065b8:	e7b2      	b.n	8006520 <st_int8_copy+0x68>
 80065ba:	0893      	lsrs	r3, r2, #2
 80065bc:	f002 0203 	and.w	r2, r2, #3
 80065c0:	e7b4      	b.n	800652c <st_int8_copy+0x74>
 80065c2:	bf00      	nop

080065c4 <ai_array_to_buffer_fmt>:
 80065c4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d053      	beq.n	8006674 <ai_array_to_buffer_fmt+0xb0>
 80065cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006680 <ai_array_to_buffer_fmt+0xbc>)
 80065ce:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d010      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 80065d6:	dc21      	bgt.n	800661c <ai_array_to_buffer_fmt+0x58>
 80065d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006684 <ai_array_to_buffer_fmt+0xc0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00c      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 80065de:	dd0f      	ble.n	8006600 <ai_array_to_buffer_fmt+0x3c>
 80065e0:	4a29      	ldr	r2, [pc, #164]	@ (8006688 <ai_array_to_buffer_fmt+0xc4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d008      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 80065e6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 80065ee:	4a27      	ldr	r2, [pc, #156]	@ (800668c <ai_array_to_buffer_fmt+0xc8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	bf0c      	ite	eq
 80065f4:	4613      	moveq	r3, r2
 80065f6:	2340      	movne	r3, #64	@ 0x40
 80065f8:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80065fc:	4318      	orrs	r0, r3
 80065fe:	4770      	bx	lr
 8006600:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006604:	4293      	cmp	r3, r2
 8006606:	d0f7      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006608:	dd2a      	ble.n	8006660 <ai_array_to_buffer_fmt+0x9c>
 800660a:	4a21      	ldr	r2, [pc, #132]	@ (8006690 <ai_array_to_buffer_fmt+0xcc>)
 800660c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006610:	4293      	cmp	r3, r2
 8006612:	bf0c      	ite	eq
 8006614:	4613      	moveq	r3, r2
 8006616:	2340      	movne	r3, #64	@ 0x40
 8006618:	4318      	orrs	r0, r3
 800661a:	4770      	bx	lr
 800661c:	4a1d      	ldr	r2, [pc, #116]	@ (8006694 <ai_array_to_buffer_fmt+0xd0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d0ea      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006622:	dd0f      	ble.n	8006644 <ai_array_to_buffer_fmt+0x80>
 8006624:	4a1c      	ldr	r2, [pc, #112]	@ (8006698 <ai_array_to_buffer_fmt+0xd4>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d0e6      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 800662a:	f502 027e 	add.w	r2, r2, #16646144	@ 0xfe0000
 800662e:	4293      	cmp	r3, r2
 8006630:	d0e2      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006632:	4a1a      	ldr	r2, [pc, #104]	@ (800669c <ai_array_to_buffer_fmt+0xd8>)
 8006634:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006638:	4293      	cmp	r3, r2
 800663a:	bf0c      	ite	eq
 800663c:	4613      	moveq	r3, r2
 800663e:	2340      	movne	r3, #64	@ 0x40
 8006640:	4318      	orrs	r0, r3
 8006642:	4770      	bx	lr
 8006644:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006648:	4293      	cmp	r3, r2
 800664a:	d0d5      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 800664c:	3207      	adds	r2, #7
 800664e:	4293      	cmp	r3, r2
 8006650:	d0d2      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006652:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8006656:	4293      	cmp	r3, r2
 8006658:	bf0c      	ite	eq
 800665a:	4613      	moveq	r3, r2
 800665c:	2340      	movne	r3, #64	@ 0x40
 800665e:	e7cb      	b.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006660:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006664:	4293      	cmp	r3, r2
 8006666:	d0c7      	beq.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006668:	3280      	adds	r2, #128	@ 0x80
 800666a:	4293      	cmp	r3, r2
 800666c:	bf0c      	ite	eq
 800666e:	4613      	moveq	r3, r2
 8006670:	2340      	movne	r3, #64	@ 0x40
 8006672:	e7c1      	b.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 8006674:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <ai_array_to_buffer_fmt+0xdc>)
 8006676:	4003      	ands	r3, r0
 8006678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800667c:	e7bc      	b.n	80065f8 <ai_array_to_buffer_fmt+0x34>
 800667e:	bf00      	nop
 8006680:	00840040 	.word	0x00840040
 8006684:	00040840 	.word	0x00040840
 8006688:	00041040 	.word	0x00041040
 800668c:	0004084f 	.word	0x0004084f
 8006690:	00040447 	.word	0x00040447
 8006694:	00840840 	.word	0x00840840
 8006698:	00841040 	.word	0x00841040
 800669c:	0084084f 	.word	0x0084084f
 80066a0:	00803fff 	.word	0x00803fff

080066a4 <ai_array_get_data_byte_size>:
 80066a4:	b169      	cbz	r1, 80066c2 <ai_array_get_data_byte_size+0x1e>
 80066a6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80066aa:	fb03 f101 	mul.w	r1, r3, r1
 80066ae:	1dcb      	adds	r3, r1, #7
 80066b0:	f023 0307 	bic.w	r3, r3, #7
 80066b4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80066b8:	fa23 f000 	lsr.w	r0, r3, r0
 80066bc:	3007      	adds	r0, #7
 80066be:	08c0      	lsrs	r0, r0, #3
 80066c0:	4770      	bx	lr
 80066c2:	4608      	mov	r0, r1
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <ai_version_get>:
 80066c8:	0212      	lsls	r2, r2, #8
 80066ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80066ce:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80066d2:	4770      	bx	lr

080066d4 <get_tensor_byte_size>:
 80066d4:	b410      	push	{r4}
 80066d6:	6983      	ldr	r3, [r0, #24]
 80066d8:	68c4      	ldr	r4, [r0, #12]
 80066da:	6941      	ldr	r1, [r0, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	4a07      	ldr	r2, [pc, #28]	@ (8006700 <get_tensor_byte_size+0x2c>)
 80066e2:	68c9      	ldr	r1, [r1, #12]
 80066e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066e8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 80066ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80066f0:	fb01 f000 	mul.w	r0, r1, r0
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bf04      	itt	eq
 80066f8:	3007      	addeq	r0, #7
 80066fa:	08c0      	lsreq	r0, r0, #3
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	000400c0 	.word	0x000400c0

08006704 <malloc>:
 8006704:	4b02      	ldr	r3, [pc, #8]	@ (8006710 <malloc+0xc>)
 8006706:	4601      	mov	r1, r0
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	f000 b825 	b.w	8006758 <_malloc_r>
 800670e:	bf00      	nop
 8006710:	200008b4 	.word	0x200008b4

08006714 <sbrk_aligned>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4e0f      	ldr	r6, [pc, #60]	@ (8006754 <sbrk_aligned+0x40>)
 8006718:	460c      	mov	r4, r1
 800671a:	6831      	ldr	r1, [r6, #0]
 800671c:	4605      	mov	r5, r0
 800671e:	b911      	cbnz	r1, 8006726 <sbrk_aligned+0x12>
 8006720:	f001 fe22 	bl	8008368 <_sbrk_r>
 8006724:	6030      	str	r0, [r6, #0]
 8006726:	4621      	mov	r1, r4
 8006728:	4628      	mov	r0, r5
 800672a:	f001 fe1d 	bl	8008368 <_sbrk_r>
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d103      	bne.n	800673a <sbrk_aligned+0x26>
 8006732:	f04f 34ff 	mov.w	r4, #4294967295
 8006736:	4620      	mov	r0, r4
 8006738:	bd70      	pop	{r4, r5, r6, pc}
 800673a:	1cc4      	adds	r4, r0, #3
 800673c:	f024 0403 	bic.w	r4, r4, #3
 8006740:	42a0      	cmp	r0, r4
 8006742:	d0f8      	beq.n	8006736 <sbrk_aligned+0x22>
 8006744:	1a21      	subs	r1, r4, r0
 8006746:	4628      	mov	r0, r5
 8006748:	f001 fe0e 	bl	8008368 <_sbrk_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d1f2      	bne.n	8006736 <sbrk_aligned+0x22>
 8006750:	e7ef      	b.n	8006732 <sbrk_aligned+0x1e>
 8006752:	bf00      	nop
 8006754:	20000b40 	.word	0x20000b40

08006758 <_malloc_r>:
 8006758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800675c:	1ccd      	adds	r5, r1, #3
 800675e:	f025 0503 	bic.w	r5, r5, #3
 8006762:	3508      	adds	r5, #8
 8006764:	2d0c      	cmp	r5, #12
 8006766:	bf38      	it	cc
 8006768:	250c      	movcc	r5, #12
 800676a:	2d00      	cmp	r5, #0
 800676c:	4606      	mov	r6, r0
 800676e:	db01      	blt.n	8006774 <_malloc_r+0x1c>
 8006770:	42a9      	cmp	r1, r5
 8006772:	d904      	bls.n	800677e <_malloc_r+0x26>
 8006774:	230c      	movs	r3, #12
 8006776:	6033      	str	r3, [r6, #0]
 8006778:	2000      	movs	r0, #0
 800677a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800677e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006854 <_malloc_r+0xfc>
 8006782:	f000 f869 	bl	8006858 <__malloc_lock>
 8006786:	f8d8 3000 	ldr.w	r3, [r8]
 800678a:	461c      	mov	r4, r3
 800678c:	bb44      	cbnz	r4, 80067e0 <_malloc_r+0x88>
 800678e:	4629      	mov	r1, r5
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff ffbf 	bl	8006714 <sbrk_aligned>
 8006796:	1c43      	adds	r3, r0, #1
 8006798:	4604      	mov	r4, r0
 800679a:	d158      	bne.n	800684e <_malloc_r+0xf6>
 800679c:	f8d8 4000 	ldr.w	r4, [r8]
 80067a0:	4627      	mov	r7, r4
 80067a2:	2f00      	cmp	r7, #0
 80067a4:	d143      	bne.n	800682e <_malloc_r+0xd6>
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	d04b      	beq.n	8006842 <_malloc_r+0xea>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4639      	mov	r1, r7
 80067ae:	4630      	mov	r0, r6
 80067b0:	eb04 0903 	add.w	r9, r4, r3
 80067b4:	f001 fdd8 	bl	8008368 <_sbrk_r>
 80067b8:	4581      	cmp	r9, r0
 80067ba:	d142      	bne.n	8006842 <_malloc_r+0xea>
 80067bc:	6821      	ldr	r1, [r4, #0]
 80067be:	1a6d      	subs	r5, r5, r1
 80067c0:	4629      	mov	r1, r5
 80067c2:	4630      	mov	r0, r6
 80067c4:	f7ff ffa6 	bl	8006714 <sbrk_aligned>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d03a      	beq.n	8006842 <_malloc_r+0xea>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	442b      	add	r3, r5
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	f8d8 3000 	ldr.w	r3, [r8]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	bb62      	cbnz	r2, 8006834 <_malloc_r+0xdc>
 80067da:	f8c8 7000 	str.w	r7, [r8]
 80067de:	e00f      	b.n	8006800 <_malloc_r+0xa8>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	1b52      	subs	r2, r2, r5
 80067e4:	d420      	bmi.n	8006828 <_malloc_r+0xd0>
 80067e6:	2a0b      	cmp	r2, #11
 80067e8:	d917      	bls.n	800681a <_malloc_r+0xc2>
 80067ea:	1961      	adds	r1, r4, r5
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	6025      	str	r5, [r4, #0]
 80067f0:	bf18      	it	ne
 80067f2:	6059      	strne	r1, [r3, #4]
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	bf08      	it	eq
 80067f8:	f8c8 1000 	streq.w	r1, [r8]
 80067fc:	5162      	str	r2, [r4, r5]
 80067fe:	604b      	str	r3, [r1, #4]
 8006800:	4630      	mov	r0, r6
 8006802:	f000 f82f 	bl	8006864 <__malloc_unlock>
 8006806:	f104 000b 	add.w	r0, r4, #11
 800680a:	1d23      	adds	r3, r4, #4
 800680c:	f020 0007 	bic.w	r0, r0, #7
 8006810:	1ac2      	subs	r2, r0, r3
 8006812:	bf1c      	itt	ne
 8006814:	1a1b      	subne	r3, r3, r0
 8006816:	50a3      	strne	r3, [r4, r2]
 8006818:	e7af      	b.n	800677a <_malloc_r+0x22>
 800681a:	6862      	ldr	r2, [r4, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	bf0c      	ite	eq
 8006820:	f8c8 2000 	streq.w	r2, [r8]
 8006824:	605a      	strne	r2, [r3, #4]
 8006826:	e7eb      	b.n	8006800 <_malloc_r+0xa8>
 8006828:	4623      	mov	r3, r4
 800682a:	6864      	ldr	r4, [r4, #4]
 800682c:	e7ae      	b.n	800678c <_malloc_r+0x34>
 800682e:	463c      	mov	r4, r7
 8006830:	687f      	ldr	r7, [r7, #4]
 8006832:	e7b6      	b.n	80067a2 <_malloc_r+0x4a>
 8006834:	461a      	mov	r2, r3
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	42a3      	cmp	r3, r4
 800683a:	d1fb      	bne.n	8006834 <_malloc_r+0xdc>
 800683c:	2300      	movs	r3, #0
 800683e:	6053      	str	r3, [r2, #4]
 8006840:	e7de      	b.n	8006800 <_malloc_r+0xa8>
 8006842:	230c      	movs	r3, #12
 8006844:	6033      	str	r3, [r6, #0]
 8006846:	4630      	mov	r0, r6
 8006848:	f000 f80c 	bl	8006864 <__malloc_unlock>
 800684c:	e794      	b.n	8006778 <_malloc_r+0x20>
 800684e:	6005      	str	r5, [r0, #0]
 8006850:	e7d6      	b.n	8006800 <_malloc_r+0xa8>
 8006852:	bf00      	nop
 8006854:	20000b44 	.word	0x20000b44

08006858 <__malloc_lock>:
 8006858:	4801      	ldr	r0, [pc, #4]	@ (8006860 <__malloc_lock+0x8>)
 800685a:	f001 bdd2 	b.w	8008402 <__retarget_lock_acquire_recursive>
 800685e:	bf00      	nop
 8006860:	20000c88 	.word	0x20000c88

08006864 <__malloc_unlock>:
 8006864:	4801      	ldr	r0, [pc, #4]	@ (800686c <__malloc_unlock+0x8>)
 8006866:	f001 bdcd 	b.w	8008404 <__retarget_lock_release_recursive>
 800686a:	bf00      	nop
 800686c:	20000c88 	.word	0x20000c88

08006870 <_realloc_r>:
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	4607      	mov	r7, r0
 8006876:	4614      	mov	r4, r2
 8006878:	460d      	mov	r5, r1
 800687a:	b921      	cbnz	r1, 8006886 <_realloc_r+0x16>
 800687c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006880:	4611      	mov	r1, r2
 8006882:	f7ff bf69 	b.w	8006758 <_malloc_r>
 8006886:	b92a      	cbnz	r2, 8006894 <_realloc_r+0x24>
 8006888:	f002 fc36 	bl	80090f8 <_free_r>
 800688c:	4625      	mov	r5, r4
 800688e:	4628      	mov	r0, r5
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	f003 fc70 	bl	800a178 <_malloc_usable_size_r>
 8006898:	4284      	cmp	r4, r0
 800689a:	4606      	mov	r6, r0
 800689c:	d802      	bhi.n	80068a4 <_realloc_r+0x34>
 800689e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068a2:	d8f4      	bhi.n	800688e <_realloc_r+0x1e>
 80068a4:	4621      	mov	r1, r4
 80068a6:	4638      	mov	r0, r7
 80068a8:	f7ff ff56 	bl	8006758 <_malloc_r>
 80068ac:	4680      	mov	r8, r0
 80068ae:	b908      	cbnz	r0, 80068b4 <_realloc_r+0x44>
 80068b0:	4645      	mov	r5, r8
 80068b2:	e7ec      	b.n	800688e <_realloc_r+0x1e>
 80068b4:	42b4      	cmp	r4, r6
 80068b6:	4622      	mov	r2, r4
 80068b8:	4629      	mov	r1, r5
 80068ba:	bf28      	it	cs
 80068bc:	4632      	movcs	r2, r6
 80068be:	f001 fda2 	bl	8008406 <memcpy>
 80068c2:	4629      	mov	r1, r5
 80068c4:	4638      	mov	r0, r7
 80068c6:	f002 fc17 	bl	80090f8 <_free_r>
 80068ca:	e7f1      	b.n	80068b0 <_realloc_r+0x40>

080068cc <sulp>:
 80068cc:	b570      	push	{r4, r5, r6, lr}
 80068ce:	4604      	mov	r4, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	ec45 4b10 	vmov	d0, r4, r5
 80068d6:	4616      	mov	r6, r2
 80068d8:	f003 fb10 	bl	8009efc <__ulp>
 80068dc:	ec51 0b10 	vmov	r0, r1, d0
 80068e0:	b17e      	cbz	r6, 8006902 <sulp+0x36>
 80068e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80068e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dd09      	ble.n	8006902 <sulp+0x36>
 80068ee:	051b      	lsls	r3, r3, #20
 80068f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80068f4:	2400      	movs	r4, #0
 80068f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	f7f9 fe7b 	bl	80005f8 <__aeabi_dmul>
 8006902:	ec41 0b10 	vmov	d0, r0, r1
 8006906:	bd70      	pop	{r4, r5, r6, pc}

08006908 <_strtod_l>:
 8006908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800690c:	b09f      	sub	sp, #124	@ 0x7c
 800690e:	460c      	mov	r4, r1
 8006910:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006912:	2200      	movs	r2, #0
 8006914:	921a      	str	r2, [sp, #104]	@ 0x68
 8006916:	9005      	str	r0, [sp, #20]
 8006918:	f04f 0a00 	mov.w	sl, #0
 800691c:	f04f 0b00 	mov.w	fp, #0
 8006920:	460a      	mov	r2, r1
 8006922:	9219      	str	r2, [sp, #100]	@ 0x64
 8006924:	7811      	ldrb	r1, [r2, #0]
 8006926:	292b      	cmp	r1, #43	@ 0x2b
 8006928:	d04a      	beq.n	80069c0 <_strtod_l+0xb8>
 800692a:	d838      	bhi.n	800699e <_strtod_l+0x96>
 800692c:	290d      	cmp	r1, #13
 800692e:	d832      	bhi.n	8006996 <_strtod_l+0x8e>
 8006930:	2908      	cmp	r1, #8
 8006932:	d832      	bhi.n	800699a <_strtod_l+0x92>
 8006934:	2900      	cmp	r1, #0
 8006936:	d03b      	beq.n	80069b0 <_strtod_l+0xa8>
 8006938:	2200      	movs	r2, #0
 800693a:	920e      	str	r2, [sp, #56]	@ 0x38
 800693c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800693e:	782a      	ldrb	r2, [r5, #0]
 8006940:	2a30      	cmp	r2, #48	@ 0x30
 8006942:	f040 80b2 	bne.w	8006aaa <_strtod_l+0x1a2>
 8006946:	786a      	ldrb	r2, [r5, #1]
 8006948:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800694c:	2a58      	cmp	r2, #88	@ 0x58
 800694e:	d16e      	bne.n	8006a2e <_strtod_l+0x126>
 8006950:	9302      	str	r3, [sp, #8]
 8006952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	ab1a      	add	r3, sp, #104	@ 0x68
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	4a8f      	ldr	r2, [pc, #572]	@ (8006b98 <_strtod_l+0x290>)
 800695c:	9805      	ldr	r0, [sp, #20]
 800695e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006960:	a919      	add	r1, sp, #100	@ 0x64
 8006962:	f002 fc7b 	bl	800925c <__gethex>
 8006966:	f010 060f 	ands.w	r6, r0, #15
 800696a:	4604      	mov	r4, r0
 800696c:	d005      	beq.n	800697a <_strtod_l+0x72>
 800696e:	2e06      	cmp	r6, #6
 8006970:	d128      	bne.n	80069c4 <_strtod_l+0xbc>
 8006972:	3501      	adds	r5, #1
 8006974:	2300      	movs	r3, #0
 8006976:	9519      	str	r5, [sp, #100]	@ 0x64
 8006978:	930e      	str	r3, [sp, #56]	@ 0x38
 800697a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800697c:	2b00      	cmp	r3, #0
 800697e:	f040 858e 	bne.w	800749e <_strtod_l+0xb96>
 8006982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006984:	b1cb      	cbz	r3, 80069ba <_strtod_l+0xb2>
 8006986:	4652      	mov	r2, sl
 8006988:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800698c:	ec43 2b10 	vmov	d0, r2, r3
 8006990:	b01f      	add	sp, #124	@ 0x7c
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	2920      	cmp	r1, #32
 8006998:	d1ce      	bne.n	8006938 <_strtod_l+0x30>
 800699a:	3201      	adds	r2, #1
 800699c:	e7c1      	b.n	8006922 <_strtod_l+0x1a>
 800699e:	292d      	cmp	r1, #45	@ 0x2d
 80069a0:	d1ca      	bne.n	8006938 <_strtod_l+0x30>
 80069a2:	2101      	movs	r1, #1
 80069a4:	910e      	str	r1, [sp, #56]	@ 0x38
 80069a6:	1c51      	adds	r1, r2, #1
 80069a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80069aa:	7852      	ldrb	r2, [r2, #1]
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d1c5      	bne.n	800693c <_strtod_l+0x34>
 80069b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	f040 8570 	bne.w	800749a <_strtod_l+0xb92>
 80069ba:	4652      	mov	r2, sl
 80069bc:	465b      	mov	r3, fp
 80069be:	e7e5      	b.n	800698c <_strtod_l+0x84>
 80069c0:	2100      	movs	r1, #0
 80069c2:	e7ef      	b.n	80069a4 <_strtod_l+0x9c>
 80069c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069c6:	b13a      	cbz	r2, 80069d8 <_strtod_l+0xd0>
 80069c8:	2135      	movs	r1, #53	@ 0x35
 80069ca:	a81c      	add	r0, sp, #112	@ 0x70
 80069cc:	f003 fb90 	bl	800a0f0 <__copybits>
 80069d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069d2:	9805      	ldr	r0, [sp, #20]
 80069d4:	f002 ff66 	bl	80098a4 <_Bfree>
 80069d8:	3e01      	subs	r6, #1
 80069da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80069dc:	2e04      	cmp	r6, #4
 80069de:	d806      	bhi.n	80069ee <_strtod_l+0xe6>
 80069e0:	e8df f006 	tbb	[pc, r6]
 80069e4:	201d0314 	.word	0x201d0314
 80069e8:	14          	.byte	0x14
 80069e9:	00          	.byte	0x00
 80069ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80069ee:	05e1      	lsls	r1, r4, #23
 80069f0:	bf48      	it	mi
 80069f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80069f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80069fa:	0d1b      	lsrs	r3, r3, #20
 80069fc:	051b      	lsls	r3, r3, #20
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1bb      	bne.n	800697a <_strtod_l+0x72>
 8006a02:	f001 fcd3 	bl	80083ac <__errno>
 8006a06:	2322      	movs	r3, #34	@ 0x22
 8006a08:	6003      	str	r3, [r0, #0]
 8006a0a:	e7b6      	b.n	800697a <_strtod_l+0x72>
 8006a0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006a10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006a14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a1c:	e7e7      	b.n	80069ee <_strtod_l+0xe6>
 8006a1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006ba0 <_strtod_l+0x298>
 8006a22:	e7e4      	b.n	80069ee <_strtod_l+0xe6>
 8006a24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006a28:	f04f 3aff 	mov.w	sl, #4294967295
 8006a2c:	e7df      	b.n	80069ee <_strtod_l+0xe6>
 8006a2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a34:	785b      	ldrb	r3, [r3, #1]
 8006a36:	2b30      	cmp	r3, #48	@ 0x30
 8006a38:	d0f9      	beq.n	8006a2e <_strtod_l+0x126>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d09d      	beq.n	800697a <_strtod_l+0x72>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	2700      	movs	r7, #0
 8006a42:	9308      	str	r3, [sp, #32]
 8006a44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a46:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006a4a:	46b9      	mov	r9, r7
 8006a4c:	220a      	movs	r2, #10
 8006a4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a50:	7805      	ldrb	r5, [r0, #0]
 8006a52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a56:	b2d9      	uxtb	r1, r3
 8006a58:	2909      	cmp	r1, #9
 8006a5a:	d928      	bls.n	8006aae <_strtod_l+0x1a6>
 8006a5c:	494f      	ldr	r1, [pc, #316]	@ (8006b9c <_strtod_l+0x294>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f001 fc38 	bl	80082d4 <strncmp>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d032      	beq.n	8006ace <_strtod_l+0x1c6>
 8006a68:	2000      	movs	r0, #0
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a6e:	464d      	mov	r5, r9
 8006a70:	4603      	mov	r3, r0
 8006a72:	2a65      	cmp	r2, #101	@ 0x65
 8006a74:	d001      	beq.n	8006a7a <_strtod_l+0x172>
 8006a76:	2a45      	cmp	r2, #69	@ 0x45
 8006a78:	d114      	bne.n	8006aa4 <_strtod_l+0x19c>
 8006a7a:	b91d      	cbnz	r5, 8006a84 <_strtod_l+0x17c>
 8006a7c:	9a08      	ldr	r2, [sp, #32]
 8006a7e:	4302      	orrs	r2, r0
 8006a80:	d096      	beq.n	80069b0 <_strtod_l+0xa8>
 8006a82:	2500      	movs	r5, #0
 8006a84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006a86:	1c62      	adds	r2, r4, #1
 8006a88:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a8a:	7862      	ldrb	r2, [r4, #1]
 8006a8c:	2a2b      	cmp	r2, #43	@ 0x2b
 8006a8e:	d07a      	beq.n	8006b86 <_strtod_l+0x27e>
 8006a90:	2a2d      	cmp	r2, #45	@ 0x2d
 8006a92:	d07e      	beq.n	8006b92 <_strtod_l+0x28a>
 8006a94:	f04f 0c00 	mov.w	ip, #0
 8006a98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006a9c:	2909      	cmp	r1, #9
 8006a9e:	f240 8085 	bls.w	8006bac <_strtod_l+0x2a4>
 8006aa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006aa4:	f04f 0800 	mov.w	r8, #0
 8006aa8:	e0a5      	b.n	8006bf6 <_strtod_l+0x2ee>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e7c8      	b.n	8006a40 <_strtod_l+0x138>
 8006aae:	f1b9 0f08 	cmp.w	r9, #8
 8006ab2:	bfd8      	it	le
 8006ab4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006ab6:	f100 0001 	add.w	r0, r0, #1
 8006aba:	bfda      	itte	le
 8006abc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ac0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ac2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ac6:	f109 0901 	add.w	r9, r9, #1
 8006aca:	9019      	str	r0, [sp, #100]	@ 0x64
 8006acc:	e7bf      	b.n	8006a4e <_strtod_l+0x146>
 8006ace:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ad4:	785a      	ldrb	r2, [r3, #1]
 8006ad6:	f1b9 0f00 	cmp.w	r9, #0
 8006ada:	d03b      	beq.n	8006b54 <_strtod_l+0x24c>
 8006adc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ade:	464d      	mov	r5, r9
 8006ae0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ae4:	2b09      	cmp	r3, #9
 8006ae6:	d912      	bls.n	8006b0e <_strtod_l+0x206>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7c2      	b.n	8006a72 <_strtod_l+0x16a>
 8006aec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af2:	785a      	ldrb	r2, [r3, #1]
 8006af4:	3001      	adds	r0, #1
 8006af6:	2a30      	cmp	r2, #48	@ 0x30
 8006af8:	d0f8      	beq.n	8006aec <_strtod_l+0x1e4>
 8006afa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	f200 84d2 	bhi.w	80074a8 <_strtod_l+0xba0>
 8006b04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b06:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b08:	2000      	movs	r0, #0
 8006b0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	3a30      	subs	r2, #48	@ 0x30
 8006b10:	f100 0301 	add.w	r3, r0, #1
 8006b14:	d018      	beq.n	8006b48 <_strtod_l+0x240>
 8006b16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b18:	4419      	add	r1, r3
 8006b1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b1c:	462e      	mov	r6, r5
 8006b1e:	f04f 0e0a 	mov.w	lr, #10
 8006b22:	1c71      	adds	r1, r6, #1
 8006b24:	eba1 0c05 	sub.w	ip, r1, r5
 8006b28:	4563      	cmp	r3, ip
 8006b2a:	dc15      	bgt.n	8006b58 <_strtod_l+0x250>
 8006b2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006b30:	182b      	adds	r3, r5, r0
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	f105 0501 	add.w	r5, r5, #1
 8006b38:	4405      	add	r5, r0
 8006b3a:	dc1a      	bgt.n	8006b72 <_strtod_l+0x26a>
 8006b3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b3e:	230a      	movs	r3, #10
 8006b40:	fb03 2301 	mla	r3, r3, r1, r2
 8006b44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b46:	2300      	movs	r3, #0
 8006b48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b4a:	1c51      	adds	r1, r2, #1
 8006b4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b4e:	7852      	ldrb	r2, [r2, #1]
 8006b50:	4618      	mov	r0, r3
 8006b52:	e7c5      	b.n	8006ae0 <_strtod_l+0x1d8>
 8006b54:	4648      	mov	r0, r9
 8006b56:	e7ce      	b.n	8006af6 <_strtod_l+0x1ee>
 8006b58:	2e08      	cmp	r6, #8
 8006b5a:	dc05      	bgt.n	8006b68 <_strtod_l+0x260>
 8006b5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006b5e:	fb0e f606 	mul.w	r6, lr, r6
 8006b62:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b64:	460e      	mov	r6, r1
 8006b66:	e7dc      	b.n	8006b22 <_strtod_l+0x21a>
 8006b68:	2910      	cmp	r1, #16
 8006b6a:	bfd8      	it	le
 8006b6c:	fb0e f707 	mulle.w	r7, lr, r7
 8006b70:	e7f8      	b.n	8006b64 <_strtod_l+0x25c>
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	bfdc      	itt	le
 8006b76:	230a      	movle	r3, #10
 8006b78:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b7c:	e7e3      	b.n	8006b46 <_strtod_l+0x23e>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b82:	2301      	movs	r3, #1
 8006b84:	e77a      	b.n	8006a7c <_strtod_l+0x174>
 8006b86:	f04f 0c00 	mov.w	ip, #0
 8006b8a:	1ca2      	adds	r2, r4, #2
 8006b8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b8e:	78a2      	ldrb	r2, [r4, #2]
 8006b90:	e782      	b.n	8006a98 <_strtod_l+0x190>
 8006b92:	f04f 0c01 	mov.w	ip, #1
 8006b96:	e7f8      	b.n	8006b8a <_strtod_l+0x282>
 8006b98:	0800bbf0 	.word	0x0800bbf0
 8006b9c:	0800ba08 	.word	0x0800ba08
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ba6:	1c51      	adds	r1, r2, #1
 8006ba8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006baa:	7852      	ldrb	r2, [r2, #1]
 8006bac:	2a30      	cmp	r2, #48	@ 0x30
 8006bae:	d0f9      	beq.n	8006ba4 <_strtod_l+0x29c>
 8006bb0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006bb4:	2908      	cmp	r1, #8
 8006bb6:	f63f af75 	bhi.w	8006aa4 <_strtod_l+0x19c>
 8006bba:	3a30      	subs	r2, #48	@ 0x30
 8006bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006bc2:	f04f 080a 	mov.w	r8, #10
 8006bc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bc8:	1c56      	adds	r6, r2, #1
 8006bca:	9619      	str	r6, [sp, #100]	@ 0x64
 8006bcc:	7852      	ldrb	r2, [r2, #1]
 8006bce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006bd2:	f1be 0f09 	cmp.w	lr, #9
 8006bd6:	d939      	bls.n	8006c4c <_strtod_l+0x344>
 8006bd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006bda:	1a76      	subs	r6, r6, r1
 8006bdc:	2e08      	cmp	r6, #8
 8006bde:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006be2:	dc03      	bgt.n	8006bec <_strtod_l+0x2e4>
 8006be4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006be6:	4588      	cmp	r8, r1
 8006be8:	bfa8      	it	ge
 8006bea:	4688      	movge	r8, r1
 8006bec:	f1bc 0f00 	cmp.w	ip, #0
 8006bf0:	d001      	beq.n	8006bf6 <_strtod_l+0x2ee>
 8006bf2:	f1c8 0800 	rsb	r8, r8, #0
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d14e      	bne.n	8006c98 <_strtod_l+0x390>
 8006bfa:	9908      	ldr	r1, [sp, #32]
 8006bfc:	4308      	orrs	r0, r1
 8006bfe:	f47f aebc 	bne.w	800697a <_strtod_l+0x72>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f47f aed4 	bne.w	80069b0 <_strtod_l+0xa8>
 8006c08:	2a69      	cmp	r2, #105	@ 0x69
 8006c0a:	d028      	beq.n	8006c5e <_strtod_l+0x356>
 8006c0c:	dc25      	bgt.n	8006c5a <_strtod_l+0x352>
 8006c0e:	2a49      	cmp	r2, #73	@ 0x49
 8006c10:	d025      	beq.n	8006c5e <_strtod_l+0x356>
 8006c12:	2a4e      	cmp	r2, #78	@ 0x4e
 8006c14:	f47f aecc 	bne.w	80069b0 <_strtod_l+0xa8>
 8006c18:	499a      	ldr	r1, [pc, #616]	@ (8006e84 <_strtod_l+0x57c>)
 8006c1a:	a819      	add	r0, sp, #100	@ 0x64
 8006c1c:	f002 fd40 	bl	80096a0 <__match>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f43f aec5 	beq.w	80069b0 <_strtod_l+0xa8>
 8006c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b28      	cmp	r3, #40	@ 0x28
 8006c2c:	d12e      	bne.n	8006c8c <_strtod_l+0x384>
 8006c2e:	4996      	ldr	r1, [pc, #600]	@ (8006e88 <_strtod_l+0x580>)
 8006c30:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c32:	a819      	add	r0, sp, #100	@ 0x64
 8006c34:	f002 fd48 	bl	80096c8 <__hexnan>
 8006c38:	2805      	cmp	r0, #5
 8006c3a:	d127      	bne.n	8006c8c <_strtod_l+0x384>
 8006c3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006c3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006c42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c4a:	e696      	b.n	800697a <_strtod_l+0x72>
 8006c4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c4e:	fb08 2101 	mla	r1, r8, r1, r2
 8006c52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c56:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c58:	e7b5      	b.n	8006bc6 <_strtod_l+0x2be>
 8006c5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c5c:	e7da      	b.n	8006c14 <_strtod_l+0x30c>
 8006c5e:	498b      	ldr	r1, [pc, #556]	@ (8006e8c <_strtod_l+0x584>)
 8006c60:	a819      	add	r0, sp, #100	@ 0x64
 8006c62:	f002 fd1d 	bl	80096a0 <__match>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f43f aea2 	beq.w	80069b0 <_strtod_l+0xa8>
 8006c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c6e:	4988      	ldr	r1, [pc, #544]	@ (8006e90 <_strtod_l+0x588>)
 8006c70:	3b01      	subs	r3, #1
 8006c72:	a819      	add	r0, sp, #100	@ 0x64
 8006c74:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c76:	f002 fd13 	bl	80096a0 <__match>
 8006c7a:	b910      	cbnz	r0, 8006c82 <_strtod_l+0x37a>
 8006c7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006ea0 <_strtod_l+0x598>
 8006c86:	f04f 0a00 	mov.w	sl, #0
 8006c8a:	e676      	b.n	800697a <_strtod_l+0x72>
 8006c8c:	4881      	ldr	r0, [pc, #516]	@ (8006e94 <_strtod_l+0x58c>)
 8006c8e:	f001 fbcb 	bl	8008428 <nan>
 8006c92:	ec5b ab10 	vmov	sl, fp, d0
 8006c96:	e670      	b.n	800697a <_strtod_l+0x72>
 8006c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006c9c:	eba8 0303 	sub.w	r3, r8, r3
 8006ca0:	f1b9 0f00 	cmp.w	r9, #0
 8006ca4:	bf08      	it	eq
 8006ca6:	46a9      	moveq	r9, r5
 8006ca8:	2d10      	cmp	r5, #16
 8006caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cac:	462c      	mov	r4, r5
 8006cae:	bfa8      	it	ge
 8006cb0:	2410      	movge	r4, #16
 8006cb2:	f7f9 fc27 	bl	8000504 <__aeabi_ui2d>
 8006cb6:	2d09      	cmp	r5, #9
 8006cb8:	4682      	mov	sl, r0
 8006cba:	468b      	mov	fp, r1
 8006cbc:	dc13      	bgt.n	8006ce6 <_strtod_l+0x3de>
 8006cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f43f ae5a 	beq.w	800697a <_strtod_l+0x72>
 8006cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cc8:	dd78      	ble.n	8006dbc <_strtod_l+0x4b4>
 8006cca:	2b16      	cmp	r3, #22
 8006ccc:	dc5f      	bgt.n	8006d8e <_strtod_l+0x486>
 8006cce:	4972      	ldr	r1, [pc, #456]	@ (8006e98 <_strtod_l+0x590>)
 8006cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	4652      	mov	r2, sl
 8006cda:	465b      	mov	r3, fp
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	4682      	mov	sl, r0
 8006ce2:	468b      	mov	fp, r1
 8006ce4:	e649      	b.n	800697a <_strtod_l+0x72>
 8006ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8006e98 <_strtod_l+0x590>)
 8006ce8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006cf0:	f7f9 fc82 	bl	80005f8 <__aeabi_dmul>
 8006cf4:	4682      	mov	sl, r0
 8006cf6:	4638      	mov	r0, r7
 8006cf8:	468b      	mov	fp, r1
 8006cfa:	f7f9 fc03 	bl	8000504 <__aeabi_ui2d>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4650      	mov	r0, sl
 8006d04:	4659      	mov	r1, fp
 8006d06:	f7f9 fac1 	bl	800028c <__adddf3>
 8006d0a:	2d0f      	cmp	r5, #15
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	468b      	mov	fp, r1
 8006d10:	ddd5      	ble.n	8006cbe <_strtod_l+0x3b6>
 8006d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d14:	1b2c      	subs	r4, r5, r4
 8006d16:	441c      	add	r4, r3
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	f340 8093 	ble.w	8006e44 <_strtod_l+0x53c>
 8006d1e:	f014 030f 	ands.w	r3, r4, #15
 8006d22:	d00a      	beq.n	8006d3a <_strtod_l+0x432>
 8006d24:	495c      	ldr	r1, [pc, #368]	@ (8006e98 <_strtod_l+0x590>)
 8006d26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d32:	f7f9 fc61 	bl	80005f8 <__aeabi_dmul>
 8006d36:	4682      	mov	sl, r0
 8006d38:	468b      	mov	fp, r1
 8006d3a:	f034 040f 	bics.w	r4, r4, #15
 8006d3e:	d073      	beq.n	8006e28 <_strtod_l+0x520>
 8006d40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006d44:	dd49      	ble.n	8006dda <_strtod_l+0x4d2>
 8006d46:	2400      	movs	r4, #0
 8006d48:	46a0      	mov	r8, r4
 8006d4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d4c:	46a1      	mov	r9, r4
 8006d4e:	9a05      	ldr	r2, [sp, #20]
 8006d50:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006ea0 <_strtod_l+0x598>
 8006d54:	2322      	movs	r3, #34	@ 0x22
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	f04f 0a00 	mov.w	sl, #0
 8006d5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f43f ae0b 	beq.w	800697a <_strtod_l+0x72>
 8006d64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d66:	9805      	ldr	r0, [sp, #20]
 8006d68:	f002 fd9c 	bl	80098a4 <_Bfree>
 8006d6c:	9805      	ldr	r0, [sp, #20]
 8006d6e:	4649      	mov	r1, r9
 8006d70:	f002 fd98 	bl	80098a4 <_Bfree>
 8006d74:	9805      	ldr	r0, [sp, #20]
 8006d76:	4641      	mov	r1, r8
 8006d78:	f002 fd94 	bl	80098a4 <_Bfree>
 8006d7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	f002 fd90 	bl	80098a4 <_Bfree>
 8006d84:	9805      	ldr	r0, [sp, #20]
 8006d86:	4621      	mov	r1, r4
 8006d88:	f002 fd8c 	bl	80098a4 <_Bfree>
 8006d8c:	e5f5      	b.n	800697a <_strtod_l+0x72>
 8006d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006d94:	4293      	cmp	r3, r2
 8006d96:	dbbc      	blt.n	8006d12 <_strtod_l+0x40a>
 8006d98:	4c3f      	ldr	r4, [pc, #252]	@ (8006e98 <_strtod_l+0x590>)
 8006d9a:	f1c5 050f 	rsb	r5, r5, #15
 8006d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006daa:	f7f9 fc25 	bl	80005f8 <__aeabi_dmul>
 8006dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db0:	1b5d      	subs	r5, r3, r5
 8006db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006dba:	e78f      	b.n	8006cdc <_strtod_l+0x3d4>
 8006dbc:	3316      	adds	r3, #22
 8006dbe:	dba8      	blt.n	8006d12 <_strtod_l+0x40a>
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc2:	eba3 0808 	sub.w	r8, r3, r8
 8006dc6:	4b34      	ldr	r3, [pc, #208]	@ (8006e98 <_strtod_l+0x590>)
 8006dc8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006dcc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006dd0:	4650      	mov	r0, sl
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	f7f9 fd3a 	bl	800084c <__aeabi_ddiv>
 8006dd8:	e782      	b.n	8006ce0 <_strtod_l+0x3d8>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4f2f      	ldr	r7, [pc, #188]	@ (8006e9c <_strtod_l+0x594>)
 8006dde:	1124      	asrs	r4, r4, #4
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	461e      	mov	r6, r3
 8006de6:	2c01      	cmp	r4, #1
 8006de8:	dc21      	bgt.n	8006e2e <_strtod_l+0x526>
 8006dea:	b10b      	cbz	r3, 8006df0 <_strtod_l+0x4e8>
 8006dec:	4682      	mov	sl, r0
 8006dee:	468b      	mov	fp, r1
 8006df0:	492a      	ldr	r1, [pc, #168]	@ (8006e9c <_strtod_l+0x594>)
 8006df2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006df6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006dfa:	4652      	mov	r2, sl
 8006dfc:	465b      	mov	r3, fp
 8006dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e02:	f7f9 fbf9 	bl	80005f8 <__aeabi_dmul>
 8006e06:	4b26      	ldr	r3, [pc, #152]	@ (8006ea0 <_strtod_l+0x598>)
 8006e08:	460a      	mov	r2, r1
 8006e0a:	400b      	ands	r3, r1
 8006e0c:	4925      	ldr	r1, [pc, #148]	@ (8006ea4 <_strtod_l+0x59c>)
 8006e0e:	428b      	cmp	r3, r1
 8006e10:	4682      	mov	sl, r0
 8006e12:	d898      	bhi.n	8006d46 <_strtod_l+0x43e>
 8006e14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006e18:	428b      	cmp	r3, r1
 8006e1a:	bf86      	itte	hi
 8006e1c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006ea8 <_strtod_l+0x5a0>
 8006e20:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9308      	str	r3, [sp, #32]
 8006e2c:	e076      	b.n	8006f1c <_strtod_l+0x614>
 8006e2e:	07e2      	lsls	r2, r4, #31
 8006e30:	d504      	bpl.n	8006e3c <_strtod_l+0x534>
 8006e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e36:	f7f9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	3601      	adds	r6, #1
 8006e3e:	1064      	asrs	r4, r4, #1
 8006e40:	3708      	adds	r7, #8
 8006e42:	e7d0      	b.n	8006de6 <_strtod_l+0x4de>
 8006e44:	d0f0      	beq.n	8006e28 <_strtod_l+0x520>
 8006e46:	4264      	negs	r4, r4
 8006e48:	f014 020f 	ands.w	r2, r4, #15
 8006e4c:	d00a      	beq.n	8006e64 <_strtod_l+0x55c>
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <_strtod_l+0x590>)
 8006e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e54:	4650      	mov	r0, sl
 8006e56:	4659      	mov	r1, fp
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 fcf6 	bl	800084c <__aeabi_ddiv>
 8006e60:	4682      	mov	sl, r0
 8006e62:	468b      	mov	fp, r1
 8006e64:	1124      	asrs	r4, r4, #4
 8006e66:	d0df      	beq.n	8006e28 <_strtod_l+0x520>
 8006e68:	2c1f      	cmp	r4, #31
 8006e6a:	dd1f      	ble.n	8006eac <_strtod_l+0x5a4>
 8006e6c:	2400      	movs	r4, #0
 8006e6e:	46a0      	mov	r8, r4
 8006e70:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e72:	46a1      	mov	r9, r4
 8006e74:	9a05      	ldr	r2, [sp, #20]
 8006e76:	2322      	movs	r3, #34	@ 0x22
 8006e78:	f04f 0a00 	mov.w	sl, #0
 8006e7c:	f04f 0b00 	mov.w	fp, #0
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	e76b      	b.n	8006d5c <_strtod_l+0x454>
 8006e84:	0800ba17 	.word	0x0800ba17
 8006e88:	0800bbdc 	.word	0x0800bbdc
 8006e8c:	0800ba0f 	.word	0x0800ba0f
 8006e90:	0800ba49 	.word	0x0800ba49
 8006e94:	0800bbd8 	.word	0x0800bbd8
 8006e98:	0800bc68 	.word	0x0800bc68
 8006e9c:	0800bc40 	.word	0x0800bc40
 8006ea0:	7ff00000 	.word	0x7ff00000
 8006ea4:	7ca00000 	.word	0x7ca00000
 8006ea8:	7fefffff 	.word	0x7fefffff
 8006eac:	f014 0310 	ands.w	r3, r4, #16
 8006eb0:	bf18      	it	ne
 8006eb2:	236a      	movne	r3, #106	@ 0x6a
 8006eb4:	4ea9      	ldr	r6, [pc, #676]	@ (800715c <_strtod_l+0x854>)
 8006eb6:	9308      	str	r3, [sp, #32]
 8006eb8:	4650      	mov	r0, sl
 8006eba:	4659      	mov	r1, fp
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	07e7      	lsls	r7, r4, #31
 8006ec0:	d504      	bpl.n	8006ecc <_strtod_l+0x5c4>
 8006ec2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ec6:	f7f9 fb97 	bl	80005f8 <__aeabi_dmul>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	1064      	asrs	r4, r4, #1
 8006ece:	f106 0608 	add.w	r6, r6, #8
 8006ed2:	d1f4      	bne.n	8006ebe <_strtod_l+0x5b6>
 8006ed4:	b10b      	cbz	r3, 8006eda <_strtod_l+0x5d2>
 8006ed6:	4682      	mov	sl, r0
 8006ed8:	468b      	mov	fp, r1
 8006eda:	9b08      	ldr	r3, [sp, #32]
 8006edc:	b1b3      	cbz	r3, 8006f0c <_strtod_l+0x604>
 8006ede:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006ee2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	4659      	mov	r1, fp
 8006eea:	dd0f      	ble.n	8006f0c <_strtod_l+0x604>
 8006eec:	2b1f      	cmp	r3, #31
 8006eee:	dd56      	ble.n	8006f9e <_strtod_l+0x696>
 8006ef0:	2b34      	cmp	r3, #52	@ 0x34
 8006ef2:	bfde      	ittt	le
 8006ef4:	f04f 33ff 	movle.w	r3, #4294967295
 8006ef8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006efc:	4093      	lslle	r3, r2
 8006efe:	f04f 0a00 	mov.w	sl, #0
 8006f02:	bfcc      	ite	gt
 8006f04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006f08:	ea03 0b01 	andle.w	fp, r3, r1
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2300      	movs	r3, #0
 8006f10:	4650      	mov	r0, sl
 8006f12:	4659      	mov	r1, fp
 8006f14:	f7f9 fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d1a7      	bne.n	8006e6c <_strtod_l+0x564>
 8006f1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f22:	9805      	ldr	r0, [sp, #20]
 8006f24:	462b      	mov	r3, r5
 8006f26:	464a      	mov	r2, r9
 8006f28:	f002 fd24 	bl	8009974 <__s2b>
 8006f2c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f af09 	beq.w	8006d46 <_strtod_l+0x43e>
 8006f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f38:	2a00      	cmp	r2, #0
 8006f3a:	eba3 0308 	sub.w	r3, r3, r8
 8006f3e:	bfa8      	it	ge
 8006f40:	2300      	movge	r3, #0
 8006f42:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f44:	2400      	movs	r4, #0
 8006f46:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f4a:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f4c:	46a0      	mov	r8, r4
 8006f4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f50:	9805      	ldr	r0, [sp, #20]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	f002 fc66 	bl	8009824 <_Balloc>
 8006f58:	4681      	mov	r9, r0
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	f43f aef7 	beq.w	8006d4e <_strtod_l+0x446>
 8006f60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	3202      	adds	r2, #2
 8006f66:	f103 010c 	add.w	r1, r3, #12
 8006f6a:	0092      	lsls	r2, r2, #2
 8006f6c:	300c      	adds	r0, #12
 8006f6e:	f001 fa4a 	bl	8008406 <memcpy>
 8006f72:	ec4b ab10 	vmov	d0, sl, fp
 8006f76:	9805      	ldr	r0, [sp, #20]
 8006f78:	aa1c      	add	r2, sp, #112	@ 0x70
 8006f7a:	a91b      	add	r1, sp, #108	@ 0x6c
 8006f7c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f80:	f003 f82c 	bl	8009fdc <__d2b>
 8006f84:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f aee1 	beq.w	8006d4e <_strtod_l+0x446>
 8006f8c:	9805      	ldr	r0, [sp, #20]
 8006f8e:	2101      	movs	r1, #1
 8006f90:	f002 fd86 	bl	8009aa0 <__i2b>
 8006f94:	4680      	mov	r8, r0
 8006f96:	b948      	cbnz	r0, 8006fac <_strtod_l+0x6a4>
 8006f98:	f04f 0800 	mov.w	r8, #0
 8006f9c:	e6d7      	b.n	8006d4e <_strtod_l+0x446>
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	ea03 0a0a 	and.w	sl, r3, sl
 8006faa:	e7af      	b.n	8006f0c <_strtod_l+0x604>
 8006fac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006fae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	bfab      	itete	ge
 8006fb4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006fb6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006fb8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006fba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006fbc:	bfac      	ite	ge
 8006fbe:	18ef      	addge	r7, r5, r3
 8006fc0:	1b5e      	sublt	r6, r3, r5
 8006fc2:	9b08      	ldr	r3, [sp, #32]
 8006fc4:	1aed      	subs	r5, r5, r3
 8006fc6:	4415      	add	r5, r2
 8006fc8:	4b65      	ldr	r3, [pc, #404]	@ (8007160 <_strtod_l+0x858>)
 8006fca:	3d01      	subs	r5, #1
 8006fcc:	429d      	cmp	r5, r3
 8006fce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006fd2:	da50      	bge.n	8007076 <_strtod_l+0x76e>
 8006fd4:	1b5b      	subs	r3, r3, r5
 8006fd6:	2b1f      	cmp	r3, #31
 8006fd8:	eba2 0203 	sub.w	r2, r2, r3
 8006fdc:	f04f 0101 	mov.w	r1, #1
 8006fe0:	dc3d      	bgt.n	800705e <_strtod_l+0x756>
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fec:	18bd      	adds	r5, r7, r2
 8006fee:	9b08      	ldr	r3, [sp, #32]
 8006ff0:	42af      	cmp	r7, r5
 8006ff2:	4416      	add	r6, r2
 8006ff4:	441e      	add	r6, r3
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	bfa8      	it	ge
 8006ffa:	462b      	movge	r3, r5
 8006ffc:	42b3      	cmp	r3, r6
 8006ffe:	bfa8      	it	ge
 8007000:	4633      	movge	r3, r6
 8007002:	2b00      	cmp	r3, #0
 8007004:	bfc2      	ittt	gt
 8007006:	1aed      	subgt	r5, r5, r3
 8007008:	1af6      	subgt	r6, r6, r3
 800700a:	1aff      	subgt	r7, r7, r3
 800700c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd16      	ble.n	8007040 <_strtod_l+0x738>
 8007012:	4641      	mov	r1, r8
 8007014:	9805      	ldr	r0, [sp, #20]
 8007016:	461a      	mov	r2, r3
 8007018:	f002 fdfa 	bl	8009c10 <__pow5mult>
 800701c:	4680      	mov	r8, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d0ba      	beq.n	8006f98 <_strtod_l+0x690>
 8007022:	4601      	mov	r1, r0
 8007024:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007026:	9805      	ldr	r0, [sp, #20]
 8007028:	f002 fd50 	bl	8009acc <__multiply>
 800702c:	900a      	str	r0, [sp, #40]	@ 0x28
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f ae8d 	beq.w	8006d4e <_strtod_l+0x446>
 8007034:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007036:	9805      	ldr	r0, [sp, #20]
 8007038:	f002 fc34 	bl	80098a4 <_Bfree>
 800703c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007040:	2d00      	cmp	r5, #0
 8007042:	dc1d      	bgt.n	8007080 <_strtod_l+0x778>
 8007044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd23      	ble.n	8007092 <_strtod_l+0x78a>
 800704a:	4649      	mov	r1, r9
 800704c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800704e:	9805      	ldr	r0, [sp, #20]
 8007050:	f002 fdde 	bl	8009c10 <__pow5mult>
 8007054:	4681      	mov	r9, r0
 8007056:	b9e0      	cbnz	r0, 8007092 <_strtod_l+0x78a>
 8007058:	f04f 0900 	mov.w	r9, #0
 800705c:	e677      	b.n	8006d4e <_strtod_l+0x446>
 800705e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007062:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007066:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800706a:	35e2      	adds	r5, #226	@ 0xe2
 800706c:	fa01 f305 	lsl.w	r3, r1, r5
 8007070:	9310      	str	r3, [sp, #64]	@ 0x40
 8007072:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007074:	e7ba      	b.n	8006fec <_strtod_l+0x6e4>
 8007076:	2300      	movs	r3, #0
 8007078:	9310      	str	r3, [sp, #64]	@ 0x40
 800707a:	2301      	movs	r3, #1
 800707c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800707e:	e7b5      	b.n	8006fec <_strtod_l+0x6e4>
 8007080:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007082:	9805      	ldr	r0, [sp, #20]
 8007084:	462a      	mov	r2, r5
 8007086:	f002 fe1d 	bl	8009cc4 <__lshift>
 800708a:	901a      	str	r0, [sp, #104]	@ 0x68
 800708c:	2800      	cmp	r0, #0
 800708e:	d1d9      	bne.n	8007044 <_strtod_l+0x73c>
 8007090:	e65d      	b.n	8006d4e <_strtod_l+0x446>
 8007092:	2e00      	cmp	r6, #0
 8007094:	dd07      	ble.n	80070a6 <_strtod_l+0x79e>
 8007096:	4649      	mov	r1, r9
 8007098:	9805      	ldr	r0, [sp, #20]
 800709a:	4632      	mov	r2, r6
 800709c:	f002 fe12 	bl	8009cc4 <__lshift>
 80070a0:	4681      	mov	r9, r0
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d0d8      	beq.n	8007058 <_strtod_l+0x750>
 80070a6:	2f00      	cmp	r7, #0
 80070a8:	dd08      	ble.n	80070bc <_strtod_l+0x7b4>
 80070aa:	4641      	mov	r1, r8
 80070ac:	9805      	ldr	r0, [sp, #20]
 80070ae:	463a      	mov	r2, r7
 80070b0:	f002 fe08 	bl	8009cc4 <__lshift>
 80070b4:	4680      	mov	r8, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f43f ae49 	beq.w	8006d4e <_strtod_l+0x446>
 80070bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070be:	9805      	ldr	r0, [sp, #20]
 80070c0:	464a      	mov	r2, r9
 80070c2:	f002 fe87 	bl	8009dd4 <__mdiff>
 80070c6:	4604      	mov	r4, r0
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f43f ae40 	beq.w	8006d4e <_strtod_l+0x446>
 80070ce:	68c3      	ldr	r3, [r0, #12]
 80070d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070d2:	2300      	movs	r3, #0
 80070d4:	60c3      	str	r3, [r0, #12]
 80070d6:	4641      	mov	r1, r8
 80070d8:	f002 fe60 	bl	8009d9c <__mcmp>
 80070dc:	2800      	cmp	r0, #0
 80070de:	da45      	bge.n	800716c <_strtod_l+0x864>
 80070e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070e2:	ea53 030a 	orrs.w	r3, r3, sl
 80070e6:	d16b      	bne.n	80071c0 <_strtod_l+0x8b8>
 80070e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d167      	bne.n	80071c0 <_strtod_l+0x8b8>
 80070f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070f4:	0d1b      	lsrs	r3, r3, #20
 80070f6:	051b      	lsls	r3, r3, #20
 80070f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80070fc:	d960      	bls.n	80071c0 <_strtod_l+0x8b8>
 80070fe:	6963      	ldr	r3, [r4, #20]
 8007100:	b913      	cbnz	r3, 8007108 <_strtod_l+0x800>
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	2b01      	cmp	r3, #1
 8007106:	dd5b      	ble.n	80071c0 <_strtod_l+0x8b8>
 8007108:	4621      	mov	r1, r4
 800710a:	2201      	movs	r2, #1
 800710c:	9805      	ldr	r0, [sp, #20]
 800710e:	f002 fdd9 	bl	8009cc4 <__lshift>
 8007112:	4641      	mov	r1, r8
 8007114:	4604      	mov	r4, r0
 8007116:	f002 fe41 	bl	8009d9c <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	dd50      	ble.n	80071c0 <_strtod_l+0x8b8>
 800711e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007122:	9a08      	ldr	r2, [sp, #32]
 8007124:	0d1b      	lsrs	r3, r3, #20
 8007126:	051b      	lsls	r3, r3, #20
 8007128:	2a00      	cmp	r2, #0
 800712a:	d06a      	beq.n	8007202 <_strtod_l+0x8fa>
 800712c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007130:	d867      	bhi.n	8007202 <_strtod_l+0x8fa>
 8007132:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007136:	f67f ae9d 	bls.w	8006e74 <_strtod_l+0x56c>
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <_strtod_l+0x85c>)
 800713c:	4650      	mov	r0, sl
 800713e:	4659      	mov	r1, fp
 8007140:	2200      	movs	r2, #0
 8007142:	f7f9 fa59 	bl	80005f8 <__aeabi_dmul>
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <_strtod_l+0x860>)
 8007148:	400b      	ands	r3, r1
 800714a:	4682      	mov	sl, r0
 800714c:	468b      	mov	fp, r1
 800714e:	2b00      	cmp	r3, #0
 8007150:	f47f ae08 	bne.w	8006d64 <_strtod_l+0x45c>
 8007154:	9a05      	ldr	r2, [sp, #20]
 8007156:	2322      	movs	r3, #34	@ 0x22
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	e603      	b.n	8006d64 <_strtod_l+0x45c>
 800715c:	0800bc08 	.word	0x0800bc08
 8007160:	fffffc02 	.word	0xfffffc02
 8007164:	39500000 	.word	0x39500000
 8007168:	7ff00000 	.word	0x7ff00000
 800716c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007170:	d165      	bne.n	800723e <_strtod_l+0x936>
 8007172:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007174:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007178:	b35a      	cbz	r2, 80071d2 <_strtod_l+0x8ca>
 800717a:	4a9f      	ldr	r2, [pc, #636]	@ (80073f8 <_strtod_l+0xaf0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d12b      	bne.n	80071d8 <_strtod_l+0x8d0>
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	4651      	mov	r1, sl
 8007184:	b303      	cbz	r3, 80071c8 <_strtod_l+0x8c0>
 8007186:	4b9d      	ldr	r3, [pc, #628]	@ (80073fc <_strtod_l+0xaf4>)
 8007188:	465a      	mov	r2, fp
 800718a:	4013      	ands	r3, r2
 800718c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007190:	f04f 32ff 	mov.w	r2, #4294967295
 8007194:	d81b      	bhi.n	80071ce <_strtod_l+0x8c6>
 8007196:	0d1b      	lsrs	r3, r3, #20
 8007198:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d119      	bne.n	80071d8 <_strtod_l+0x8d0>
 80071a4:	4b96      	ldr	r3, [pc, #600]	@ (8007400 <_strtod_l+0xaf8>)
 80071a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d102      	bne.n	80071b2 <_strtod_l+0x8aa>
 80071ac:	3101      	adds	r1, #1
 80071ae:	f43f adce 	beq.w	8006d4e <_strtod_l+0x446>
 80071b2:	4b92      	ldr	r3, [pc, #584]	@ (80073fc <_strtod_l+0xaf4>)
 80071b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071b6:	401a      	ands	r2, r3
 80071b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80071bc:	f04f 0a00 	mov.w	sl, #0
 80071c0:	9b08      	ldr	r3, [sp, #32]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1b9      	bne.n	800713a <_strtod_l+0x832>
 80071c6:	e5cd      	b.n	8006d64 <_strtod_l+0x45c>
 80071c8:	f04f 33ff 	mov.w	r3, #4294967295
 80071cc:	e7e8      	b.n	80071a0 <_strtod_l+0x898>
 80071ce:	4613      	mov	r3, r2
 80071d0:	e7e6      	b.n	80071a0 <_strtod_l+0x898>
 80071d2:	ea53 030a 	orrs.w	r3, r3, sl
 80071d6:	d0a2      	beq.n	800711e <_strtod_l+0x816>
 80071d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071da:	b1db      	cbz	r3, 8007214 <_strtod_l+0x90c>
 80071dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071de:	4213      	tst	r3, r2
 80071e0:	d0ee      	beq.n	80071c0 <_strtod_l+0x8b8>
 80071e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e4:	9a08      	ldr	r2, [sp, #32]
 80071e6:	4650      	mov	r0, sl
 80071e8:	4659      	mov	r1, fp
 80071ea:	b1bb      	cbz	r3, 800721c <_strtod_l+0x914>
 80071ec:	f7ff fb6e 	bl	80068cc <sulp>
 80071f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f4:	ec53 2b10 	vmov	r2, r3, d0
 80071f8:	f7f9 f848 	bl	800028c <__adddf3>
 80071fc:	4682      	mov	sl, r0
 80071fe:	468b      	mov	fp, r1
 8007200:	e7de      	b.n	80071c0 <_strtod_l+0x8b8>
 8007202:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007206:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800720a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800720e:	f04f 3aff 	mov.w	sl, #4294967295
 8007212:	e7d5      	b.n	80071c0 <_strtod_l+0x8b8>
 8007214:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007216:	ea13 0f0a 	tst.w	r3, sl
 800721a:	e7e1      	b.n	80071e0 <_strtod_l+0x8d8>
 800721c:	f7ff fb56 	bl	80068cc <sulp>
 8007220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007224:	ec53 2b10 	vmov	r2, r3, d0
 8007228:	f7f9 f82e 	bl	8000288 <__aeabi_dsub>
 800722c:	2200      	movs	r2, #0
 800722e:	2300      	movs	r3, #0
 8007230:	4682      	mov	sl, r0
 8007232:	468b      	mov	fp, r1
 8007234:	f7f9 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007238:	2800      	cmp	r0, #0
 800723a:	d0c1      	beq.n	80071c0 <_strtod_l+0x8b8>
 800723c:	e61a      	b.n	8006e74 <_strtod_l+0x56c>
 800723e:	4641      	mov	r1, r8
 8007240:	4620      	mov	r0, r4
 8007242:	f002 ff23 	bl	800a08c <__ratio>
 8007246:	ec57 6b10 	vmov	r6, r7, d0
 800724a:	2200      	movs	r2, #0
 800724c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f9 fc4c 	bl	8000af0 <__aeabi_dcmple>
 8007258:	2800      	cmp	r0, #0
 800725a:	d06f      	beq.n	800733c <_strtod_l+0xa34>
 800725c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800725e:	2b00      	cmp	r3, #0
 8007260:	d17a      	bne.n	8007358 <_strtod_l+0xa50>
 8007262:	f1ba 0f00 	cmp.w	sl, #0
 8007266:	d158      	bne.n	800731a <_strtod_l+0xa12>
 8007268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800726a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800726e:	2b00      	cmp	r3, #0
 8007270:	d15a      	bne.n	8007328 <_strtod_l+0xa20>
 8007272:	4b64      	ldr	r3, [pc, #400]	@ (8007404 <_strtod_l+0xafc>)
 8007274:	2200      	movs	r2, #0
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800727e:	2800      	cmp	r0, #0
 8007280:	d159      	bne.n	8007336 <_strtod_l+0xa2e>
 8007282:	4630      	mov	r0, r6
 8007284:	4639      	mov	r1, r7
 8007286:	4b60      	ldr	r3, [pc, #384]	@ (8007408 <_strtod_l+0xb00>)
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f9b5 	bl	80005f8 <__aeabi_dmul>
 800728e:	4606      	mov	r6, r0
 8007290:	460f      	mov	r7, r1
 8007292:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007296:	9606      	str	r6, [sp, #24]
 8007298:	9307      	str	r3, [sp, #28]
 800729a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800729e:	4d57      	ldr	r5, [pc, #348]	@ (80073fc <_strtod_l+0xaf4>)
 80072a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072a6:	401d      	ands	r5, r3
 80072a8:	4b58      	ldr	r3, [pc, #352]	@ (800740c <_strtod_l+0xb04>)
 80072aa:	429d      	cmp	r5, r3
 80072ac:	f040 80b2 	bne.w	8007414 <_strtod_l+0xb0c>
 80072b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80072b6:	ec4b ab10 	vmov	d0, sl, fp
 80072ba:	f002 fe1f 	bl	8009efc <__ulp>
 80072be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072c2:	ec51 0b10 	vmov	r0, r1, d0
 80072c6:	f7f9 f997 	bl	80005f8 <__aeabi_dmul>
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	f7f8 ffdd 	bl	800028c <__adddf3>
 80072d2:	460b      	mov	r3, r1
 80072d4:	4949      	ldr	r1, [pc, #292]	@ (80073fc <_strtod_l+0xaf4>)
 80072d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007410 <_strtod_l+0xb08>)
 80072d8:	4019      	ands	r1, r3
 80072da:	4291      	cmp	r1, r2
 80072dc:	4682      	mov	sl, r0
 80072de:	d942      	bls.n	8007366 <_strtod_l+0xa5e>
 80072e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072e2:	4b47      	ldr	r3, [pc, #284]	@ (8007400 <_strtod_l+0xaf8>)
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d103      	bne.n	80072f0 <_strtod_l+0x9e8>
 80072e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072ea:	3301      	adds	r3, #1
 80072ec:	f43f ad2f 	beq.w	8006d4e <_strtod_l+0x446>
 80072f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007400 <_strtod_l+0xaf8>
 80072f4:	f04f 3aff 	mov.w	sl, #4294967295
 80072f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072fa:	9805      	ldr	r0, [sp, #20]
 80072fc:	f002 fad2 	bl	80098a4 <_Bfree>
 8007300:	9805      	ldr	r0, [sp, #20]
 8007302:	4649      	mov	r1, r9
 8007304:	f002 face 	bl	80098a4 <_Bfree>
 8007308:	9805      	ldr	r0, [sp, #20]
 800730a:	4641      	mov	r1, r8
 800730c:	f002 faca 	bl	80098a4 <_Bfree>
 8007310:	9805      	ldr	r0, [sp, #20]
 8007312:	4621      	mov	r1, r4
 8007314:	f002 fac6 	bl	80098a4 <_Bfree>
 8007318:	e619      	b.n	8006f4e <_strtod_l+0x646>
 800731a:	f1ba 0f01 	cmp.w	sl, #1
 800731e:	d103      	bne.n	8007328 <_strtod_l+0xa20>
 8007320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007322:	2b00      	cmp	r3, #0
 8007324:	f43f ada6 	beq.w	8006e74 <_strtod_l+0x56c>
 8007328:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80073d8 <_strtod_l+0xad0>
 800732c:	4f35      	ldr	r7, [pc, #212]	@ (8007404 <_strtod_l+0xafc>)
 800732e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007332:	2600      	movs	r6, #0
 8007334:	e7b1      	b.n	800729a <_strtod_l+0x992>
 8007336:	4f34      	ldr	r7, [pc, #208]	@ (8007408 <_strtod_l+0xb00>)
 8007338:	2600      	movs	r6, #0
 800733a:	e7aa      	b.n	8007292 <_strtod_l+0x98a>
 800733c:	4b32      	ldr	r3, [pc, #200]	@ (8007408 <_strtod_l+0xb00>)
 800733e:	4630      	mov	r0, r6
 8007340:	4639      	mov	r1, r7
 8007342:	2200      	movs	r2, #0
 8007344:	f7f9 f958 	bl	80005f8 <__aeabi_dmul>
 8007348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d09f      	beq.n	8007292 <_strtod_l+0x98a>
 8007352:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007356:	e7a0      	b.n	800729a <_strtod_l+0x992>
 8007358:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80073e0 <_strtod_l+0xad8>
 800735c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007360:	ec57 6b17 	vmov	r6, r7, d7
 8007364:	e799      	b.n	800729a <_strtod_l+0x992>
 8007366:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1c1      	bne.n	80072f8 <_strtod_l+0x9f0>
 8007374:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007378:	0d1b      	lsrs	r3, r3, #20
 800737a:	051b      	lsls	r3, r3, #20
 800737c:	429d      	cmp	r5, r3
 800737e:	d1bb      	bne.n	80072f8 <_strtod_l+0x9f0>
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f9 fc98 	bl	8000cb8 <__aeabi_d2lz>
 8007388:	f7f9 f908 	bl	800059c <__aeabi_l2d>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4630      	mov	r0, r6
 8007392:	4639      	mov	r1, r7
 8007394:	f7f8 ff78 	bl	8000288 <__aeabi_dsub>
 8007398:	460b      	mov	r3, r1
 800739a:	4602      	mov	r2, r0
 800739c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80073a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073a6:	ea46 060a 	orr.w	r6, r6, sl
 80073aa:	431e      	orrs	r6, r3
 80073ac:	d06f      	beq.n	800748e <_strtod_l+0xb86>
 80073ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80073e8 <_strtod_l+0xae0>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f9 fb92 	bl	8000adc <__aeabi_dcmplt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f47f acd3 	bne.w	8006d64 <_strtod_l+0x45c>
 80073be:	a30c      	add	r3, pc, #48	@ (adr r3, 80073f0 <_strtod_l+0xae8>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073c8:	f7f9 fba6 	bl	8000b18 <__aeabi_dcmpgt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d093      	beq.n	80072f8 <_strtod_l+0x9f0>
 80073d0:	e4c8      	b.n	8006d64 <_strtod_l+0x45c>
 80073d2:	bf00      	nop
 80073d4:	f3af 8000 	nop.w
 80073d8:	00000000 	.word	0x00000000
 80073dc:	bff00000 	.word	0xbff00000
 80073e0:	00000000 	.word	0x00000000
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	94a03595 	.word	0x94a03595
 80073ec:	3fdfffff 	.word	0x3fdfffff
 80073f0:	35afe535 	.word	0x35afe535
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	000fffff 	.word	0x000fffff
 80073fc:	7ff00000 	.word	0x7ff00000
 8007400:	7fefffff 	.word	0x7fefffff
 8007404:	3ff00000 	.word	0x3ff00000
 8007408:	3fe00000 	.word	0x3fe00000
 800740c:	7fe00000 	.word	0x7fe00000
 8007410:	7c9fffff 	.word	0x7c9fffff
 8007414:	9b08      	ldr	r3, [sp, #32]
 8007416:	b323      	cbz	r3, 8007462 <_strtod_l+0xb5a>
 8007418:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800741c:	d821      	bhi.n	8007462 <_strtod_l+0xb5a>
 800741e:	a328      	add	r3, pc, #160	@ (adr r3, 80074c0 <_strtod_l+0xbb8>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f7f9 fb62 	bl	8000af0 <__aeabi_dcmple>
 800742c:	b1a0      	cbz	r0, 8007458 <_strtod_l+0xb50>
 800742e:	4639      	mov	r1, r7
 8007430:	4630      	mov	r0, r6
 8007432:	f7f9 fbb9 	bl	8000ba8 <__aeabi_d2uiz>
 8007436:	2801      	cmp	r0, #1
 8007438:	bf38      	it	cc
 800743a:	2001      	movcc	r0, #1
 800743c:	f7f9 f862 	bl	8000504 <__aeabi_ui2d>
 8007440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007442:	4606      	mov	r6, r0
 8007444:	460f      	mov	r7, r1
 8007446:	b9fb      	cbnz	r3, 8007488 <_strtod_l+0xb80>
 8007448:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800744c:	9014      	str	r0, [sp, #80]	@ 0x50
 800744e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007450:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007454:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007458:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800745a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800745e:	1b5b      	subs	r3, r3, r5
 8007460:	9311      	str	r3, [sp, #68]	@ 0x44
 8007462:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007466:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800746a:	f002 fd47 	bl	8009efc <__ulp>
 800746e:	4650      	mov	r0, sl
 8007470:	ec53 2b10 	vmov	r2, r3, d0
 8007474:	4659      	mov	r1, fp
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800747e:	f7f8 ff05 	bl	800028c <__adddf3>
 8007482:	4682      	mov	sl, r0
 8007484:	468b      	mov	fp, r1
 8007486:	e770      	b.n	800736a <_strtod_l+0xa62>
 8007488:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800748c:	e7e0      	b.n	8007450 <_strtod_l+0xb48>
 800748e:	a30e      	add	r3, pc, #56	@ (adr r3, 80074c8 <_strtod_l+0xbc0>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f9 fb22 	bl	8000adc <__aeabi_dcmplt>
 8007498:	e798      	b.n	80073cc <_strtod_l+0xac4>
 800749a:	2300      	movs	r3, #0
 800749c:	930e      	str	r3, [sp, #56]	@ 0x38
 800749e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80074a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	f7ff ba6d 	b.w	8006982 <_strtod_l+0x7a>
 80074a8:	2a65      	cmp	r2, #101	@ 0x65
 80074aa:	f43f ab68 	beq.w	8006b7e <_strtod_l+0x276>
 80074ae:	2a45      	cmp	r2, #69	@ 0x45
 80074b0:	f43f ab65 	beq.w	8006b7e <_strtod_l+0x276>
 80074b4:	2301      	movs	r3, #1
 80074b6:	f7ff bba0 	b.w	8006bfa <_strtod_l+0x2f2>
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w
 80074c0:	ffc00000 	.word	0xffc00000
 80074c4:	41dfffff 	.word	0x41dfffff
 80074c8:	94a03595 	.word	0x94a03595
 80074cc:	3fcfffff 	.word	0x3fcfffff

080074d0 <strtof>:
 80074d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007594 <strtof+0xc4>
 80074d8:	4b29      	ldr	r3, [pc, #164]	@ (8007580 <strtof+0xb0>)
 80074da:	460a      	mov	r2, r1
 80074dc:	ed2d 8b02 	vpush	{d8}
 80074e0:	4601      	mov	r1, r0
 80074e2:	f8d8 0000 	ldr.w	r0, [r8]
 80074e6:	f7ff fa0f 	bl	8006908 <_strtod_l>
 80074ea:	ec55 4b10 	vmov	r4, r5, d0
 80074ee:	4622      	mov	r2, r4
 80074f0:	462b      	mov	r3, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 fb19 	bl	8000b2c <__aeabi_dcmpun>
 80074fa:	b190      	cbz	r0, 8007522 <strtof+0x52>
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	4821      	ldr	r0, [pc, #132]	@ (8007584 <strtof+0xb4>)
 8007500:	da09      	bge.n	8007516 <strtof+0x46>
 8007502:	f000 ff99 	bl	8008438 <nanf>
 8007506:	eeb1 8a40 	vneg.f32	s16, s0
 800750a:	eeb0 0a48 	vmov.f32	s0, s16
 800750e:	ecbd 8b02 	vpop	{d8}
 8007512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007516:	ecbd 8b02 	vpop	{d8}
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	f000 bf8b 	b.w	8008438 <nanf>
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f9 fb5f 	bl	8000be8 <__aeabi_d2f>
 800752a:	ee08 0a10 	vmov	s16, r0
 800752e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8007588 <strtof+0xb8>
 8007532:	eeb0 7ac8 	vabs.f32	s14, s16
 8007536:	eeb4 7a67 	vcmp.f32	s14, s15
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	dd11      	ble.n	8007564 <strtof+0x94>
 8007540:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007544:	4b11      	ldr	r3, [pc, #68]	@ (800758c <strtof+0xbc>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	4620      	mov	r0, r4
 800754c:	4639      	mov	r1, r7
 800754e:	f7f9 faed 	bl	8000b2c <__aeabi_dcmpun>
 8007552:	b980      	cbnz	r0, 8007576 <strtof+0xa6>
 8007554:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <strtof+0xbc>)
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	4620      	mov	r0, r4
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 fac7 	bl	8000af0 <__aeabi_dcmple>
 8007562:	b940      	cbnz	r0, 8007576 <strtof+0xa6>
 8007564:	ee18 3a10 	vmov	r3, s16
 8007568:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800756c:	d1cd      	bne.n	800750a <strtof+0x3a>
 800756e:	4b08      	ldr	r3, [pc, #32]	@ (8007590 <strtof+0xc0>)
 8007570:	402b      	ands	r3, r5
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0c9      	beq.n	800750a <strtof+0x3a>
 8007576:	f8d8 3000 	ldr.w	r3, [r8]
 800757a:	2222      	movs	r2, #34	@ 0x22
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e7c4      	b.n	800750a <strtof+0x3a>
 8007580:	20000748 	.word	0x20000748
 8007584:	0800bbd8 	.word	0x0800bbd8
 8007588:	7f7fffff 	.word	0x7f7fffff
 800758c:	7fefffff 	.word	0x7fefffff
 8007590:	7ff00000 	.word	0x7ff00000
 8007594:	200008b4 	.word	0x200008b4

08007598 <__cvt>:
 8007598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	ec57 6b10 	vmov	r6, r7, d0
 80075a0:	2f00      	cmp	r7, #0
 80075a2:	460c      	mov	r4, r1
 80075a4:	4619      	mov	r1, r3
 80075a6:	463b      	mov	r3, r7
 80075a8:	bfbb      	ittet	lt
 80075aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80075ae:	461f      	movlt	r7, r3
 80075b0:	2300      	movge	r3, #0
 80075b2:	232d      	movlt	r3, #45	@ 0x2d
 80075b4:	700b      	strb	r3, [r1, #0]
 80075b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80075bc:	4691      	mov	r9, r2
 80075be:	f023 0820 	bic.w	r8, r3, #32
 80075c2:	bfbc      	itt	lt
 80075c4:	4632      	movlt	r2, r6
 80075c6:	4616      	movlt	r6, r2
 80075c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075cc:	d005      	beq.n	80075da <__cvt+0x42>
 80075ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075d2:	d100      	bne.n	80075d6 <__cvt+0x3e>
 80075d4:	3401      	adds	r4, #1
 80075d6:	2102      	movs	r1, #2
 80075d8:	e000      	b.n	80075dc <__cvt+0x44>
 80075da:	2103      	movs	r1, #3
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9301      	str	r3, [sp, #4]
 80075e0:	ab02      	add	r3, sp, #8
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	ec47 6b10 	vmov	d0, r6, r7
 80075e8:	4653      	mov	r3, sl
 80075ea:	4622      	mov	r2, r4
 80075ec:	f000 ffb4 	bl	8008558 <_dtoa_r>
 80075f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075f4:	4605      	mov	r5, r0
 80075f6:	d119      	bne.n	800762c <__cvt+0x94>
 80075f8:	f019 0f01 	tst.w	r9, #1
 80075fc:	d00e      	beq.n	800761c <__cvt+0x84>
 80075fe:	eb00 0904 	add.w	r9, r0, r4
 8007602:	2200      	movs	r2, #0
 8007604:	2300      	movs	r3, #0
 8007606:	4630      	mov	r0, r6
 8007608:	4639      	mov	r1, r7
 800760a:	f7f9 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800760e:	b108      	cbz	r0, 8007614 <__cvt+0x7c>
 8007610:	f8cd 900c 	str.w	r9, [sp, #12]
 8007614:	2230      	movs	r2, #48	@ 0x30
 8007616:	9b03      	ldr	r3, [sp, #12]
 8007618:	454b      	cmp	r3, r9
 800761a:	d31e      	bcc.n	800765a <__cvt+0xc2>
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007620:	1b5b      	subs	r3, r3, r5
 8007622:	4628      	mov	r0, r5
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	b004      	add	sp, #16
 8007628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007630:	eb00 0904 	add.w	r9, r0, r4
 8007634:	d1e5      	bne.n	8007602 <__cvt+0x6a>
 8007636:	7803      	ldrb	r3, [r0, #0]
 8007638:	2b30      	cmp	r3, #48	@ 0x30
 800763a:	d10a      	bne.n	8007652 <__cvt+0xba>
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	4630      	mov	r0, r6
 8007642:	4639      	mov	r1, r7
 8007644:	f7f9 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007648:	b918      	cbnz	r0, 8007652 <__cvt+0xba>
 800764a:	f1c4 0401 	rsb	r4, r4, #1
 800764e:	f8ca 4000 	str.w	r4, [sl]
 8007652:	f8da 3000 	ldr.w	r3, [sl]
 8007656:	4499      	add	r9, r3
 8007658:	e7d3      	b.n	8007602 <__cvt+0x6a>
 800765a:	1c59      	adds	r1, r3, #1
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	e7d9      	b.n	8007616 <__cvt+0x7e>

08007662 <__exponent>:
 8007662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007664:	2900      	cmp	r1, #0
 8007666:	bfba      	itte	lt
 8007668:	4249      	neglt	r1, r1
 800766a:	232d      	movlt	r3, #45	@ 0x2d
 800766c:	232b      	movge	r3, #43	@ 0x2b
 800766e:	2909      	cmp	r1, #9
 8007670:	7002      	strb	r2, [r0, #0]
 8007672:	7043      	strb	r3, [r0, #1]
 8007674:	dd29      	ble.n	80076ca <__exponent+0x68>
 8007676:	f10d 0307 	add.w	r3, sp, #7
 800767a:	461d      	mov	r5, r3
 800767c:	270a      	movs	r7, #10
 800767e:	461a      	mov	r2, r3
 8007680:	fbb1 f6f7 	udiv	r6, r1, r7
 8007684:	fb07 1416 	mls	r4, r7, r6, r1
 8007688:	3430      	adds	r4, #48	@ 0x30
 800768a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800768e:	460c      	mov	r4, r1
 8007690:	2c63      	cmp	r4, #99	@ 0x63
 8007692:	f103 33ff 	add.w	r3, r3, #4294967295
 8007696:	4631      	mov	r1, r6
 8007698:	dcf1      	bgt.n	800767e <__exponent+0x1c>
 800769a:	3130      	adds	r1, #48	@ 0x30
 800769c:	1e94      	subs	r4, r2, #2
 800769e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80076a2:	1c41      	adds	r1, r0, #1
 80076a4:	4623      	mov	r3, r4
 80076a6:	42ab      	cmp	r3, r5
 80076a8:	d30a      	bcc.n	80076c0 <__exponent+0x5e>
 80076aa:	f10d 0309 	add.w	r3, sp, #9
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	42ac      	cmp	r4, r5
 80076b2:	bf88      	it	hi
 80076b4:	2300      	movhi	r3, #0
 80076b6:	3302      	adds	r3, #2
 80076b8:	4403      	add	r3, r0
 80076ba:	1a18      	subs	r0, r3, r0
 80076bc:	b003      	add	sp, #12
 80076be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076c8:	e7ed      	b.n	80076a6 <__exponent+0x44>
 80076ca:	2330      	movs	r3, #48	@ 0x30
 80076cc:	3130      	adds	r1, #48	@ 0x30
 80076ce:	7083      	strb	r3, [r0, #2]
 80076d0:	70c1      	strb	r1, [r0, #3]
 80076d2:	1d03      	adds	r3, r0, #4
 80076d4:	e7f1      	b.n	80076ba <__exponent+0x58>
	...

080076d8 <_printf_float>:
 80076d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076dc:	b08d      	sub	sp, #52	@ 0x34
 80076de:	460c      	mov	r4, r1
 80076e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076e4:	4616      	mov	r6, r2
 80076e6:	461f      	mov	r7, r3
 80076e8:	4605      	mov	r5, r0
 80076ea:	f000 fe05 	bl	80082f8 <_localeconv_r>
 80076ee:	6803      	ldr	r3, [r0, #0]
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f8 fdbc 	bl	8000270 <strlen>
 80076f8:	2300      	movs	r3, #0
 80076fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80076fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007700:	9005      	str	r0, [sp, #20]
 8007702:	3307      	adds	r3, #7
 8007704:	f023 0307 	bic.w	r3, r3, #7
 8007708:	f103 0208 	add.w	r2, r3, #8
 800770c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007710:	f8d4 b000 	ldr.w	fp, [r4]
 8007714:	f8c8 2000 	str.w	r2, [r8]
 8007718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800771c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007720:	9307      	str	r3, [sp, #28]
 8007722:	f8cd 8018 	str.w	r8, [sp, #24]
 8007726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800772a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800772e:	4b9c      	ldr	r3, [pc, #624]	@ (80079a0 <_printf_float+0x2c8>)
 8007730:	f04f 32ff 	mov.w	r2, #4294967295
 8007734:	f7f9 f9fa 	bl	8000b2c <__aeabi_dcmpun>
 8007738:	bb70      	cbnz	r0, 8007798 <_printf_float+0xc0>
 800773a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800773e:	4b98      	ldr	r3, [pc, #608]	@ (80079a0 <_printf_float+0x2c8>)
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	f7f9 f9d4 	bl	8000af0 <__aeabi_dcmple>
 8007748:	bb30      	cbnz	r0, 8007798 <_printf_float+0xc0>
 800774a:	2200      	movs	r2, #0
 800774c:	2300      	movs	r3, #0
 800774e:	4640      	mov	r0, r8
 8007750:	4649      	mov	r1, r9
 8007752:	f7f9 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8007756:	b110      	cbz	r0, 800775e <_printf_float+0x86>
 8007758:	232d      	movs	r3, #45	@ 0x2d
 800775a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800775e:	4a91      	ldr	r2, [pc, #580]	@ (80079a4 <_printf_float+0x2cc>)
 8007760:	4b91      	ldr	r3, [pc, #580]	@ (80079a8 <_printf_float+0x2d0>)
 8007762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007766:	bf8c      	ite	hi
 8007768:	4690      	movhi	r8, r2
 800776a:	4698      	movls	r8, r3
 800776c:	2303      	movs	r3, #3
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	f02b 0304 	bic.w	r3, fp, #4
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	f04f 0900 	mov.w	r9, #0
 800777a:	9700      	str	r7, [sp, #0]
 800777c:	4633      	mov	r3, r6
 800777e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007780:	4621      	mov	r1, r4
 8007782:	4628      	mov	r0, r5
 8007784:	f000 f9d2 	bl	8007b2c <_printf_common>
 8007788:	3001      	adds	r0, #1
 800778a:	f040 808d 	bne.w	80078a8 <_printf_float+0x1d0>
 800778e:	f04f 30ff 	mov.w	r0, #4294967295
 8007792:	b00d      	add	sp, #52	@ 0x34
 8007794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007798:	4642      	mov	r2, r8
 800779a:	464b      	mov	r3, r9
 800779c:	4640      	mov	r0, r8
 800779e:	4649      	mov	r1, r9
 80077a0:	f7f9 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 80077a4:	b140      	cbz	r0, 80077b8 <_printf_float+0xe0>
 80077a6:	464b      	mov	r3, r9
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bfbc      	itt	lt
 80077ac:	232d      	movlt	r3, #45	@ 0x2d
 80077ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80077b2:	4a7e      	ldr	r2, [pc, #504]	@ (80079ac <_printf_float+0x2d4>)
 80077b4:	4b7e      	ldr	r3, [pc, #504]	@ (80079b0 <_printf_float+0x2d8>)
 80077b6:	e7d4      	b.n	8007762 <_printf_float+0x8a>
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80077be:	9206      	str	r2, [sp, #24]
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	d13b      	bne.n	800783c <_printf_float+0x164>
 80077c4:	2306      	movs	r3, #6
 80077c6:	6063      	str	r3, [r4, #4]
 80077c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077cc:	2300      	movs	r3, #0
 80077ce:	6022      	str	r2, [r4, #0]
 80077d0:	9303      	str	r3, [sp, #12]
 80077d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80077d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077d8:	ab09      	add	r3, sp, #36	@ 0x24
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	6861      	ldr	r1, [r4, #4]
 80077de:	ec49 8b10 	vmov	d0, r8, r9
 80077e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7ff fed6 	bl	8007598 <__cvt>
 80077ec:	9b06      	ldr	r3, [sp, #24]
 80077ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077f0:	2b47      	cmp	r3, #71	@ 0x47
 80077f2:	4680      	mov	r8, r0
 80077f4:	d129      	bne.n	800784a <_printf_float+0x172>
 80077f6:	1cc8      	adds	r0, r1, #3
 80077f8:	db02      	blt.n	8007800 <_printf_float+0x128>
 80077fa:	6863      	ldr	r3, [r4, #4]
 80077fc:	4299      	cmp	r1, r3
 80077fe:	dd41      	ble.n	8007884 <_printf_float+0x1ac>
 8007800:	f1aa 0a02 	sub.w	sl, sl, #2
 8007804:	fa5f fa8a 	uxtb.w	sl, sl
 8007808:	3901      	subs	r1, #1
 800780a:	4652      	mov	r2, sl
 800780c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007810:	9109      	str	r1, [sp, #36]	@ 0x24
 8007812:	f7ff ff26 	bl	8007662 <__exponent>
 8007816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007818:	1813      	adds	r3, r2, r0
 800781a:	2a01      	cmp	r2, #1
 800781c:	4681      	mov	r9, r0
 800781e:	6123      	str	r3, [r4, #16]
 8007820:	dc02      	bgt.n	8007828 <_printf_float+0x150>
 8007822:	6822      	ldr	r2, [r4, #0]
 8007824:	07d2      	lsls	r2, r2, #31
 8007826:	d501      	bpl.n	800782c <_printf_float+0x154>
 8007828:	3301      	adds	r3, #1
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0a2      	beq.n	800777a <_printf_float+0xa2>
 8007834:	232d      	movs	r3, #45	@ 0x2d
 8007836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800783a:	e79e      	b.n	800777a <_printf_float+0xa2>
 800783c:	9a06      	ldr	r2, [sp, #24]
 800783e:	2a47      	cmp	r2, #71	@ 0x47
 8007840:	d1c2      	bne.n	80077c8 <_printf_float+0xf0>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1c0      	bne.n	80077c8 <_printf_float+0xf0>
 8007846:	2301      	movs	r3, #1
 8007848:	e7bd      	b.n	80077c6 <_printf_float+0xee>
 800784a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800784e:	d9db      	bls.n	8007808 <_printf_float+0x130>
 8007850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007854:	d118      	bne.n	8007888 <_printf_float+0x1b0>
 8007856:	2900      	cmp	r1, #0
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	dd0b      	ble.n	8007874 <_printf_float+0x19c>
 800785c:	6121      	str	r1, [r4, #16]
 800785e:	b913      	cbnz	r3, 8007866 <_printf_float+0x18e>
 8007860:	6822      	ldr	r2, [r4, #0]
 8007862:	07d0      	lsls	r0, r2, #31
 8007864:	d502      	bpl.n	800786c <_printf_float+0x194>
 8007866:	3301      	adds	r3, #1
 8007868:	440b      	add	r3, r1
 800786a:	6123      	str	r3, [r4, #16]
 800786c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800786e:	f04f 0900 	mov.w	r9, #0
 8007872:	e7db      	b.n	800782c <_printf_float+0x154>
 8007874:	b913      	cbnz	r3, 800787c <_printf_float+0x1a4>
 8007876:	6822      	ldr	r2, [r4, #0]
 8007878:	07d2      	lsls	r2, r2, #31
 800787a:	d501      	bpl.n	8007880 <_printf_float+0x1a8>
 800787c:	3302      	adds	r3, #2
 800787e:	e7f4      	b.n	800786a <_printf_float+0x192>
 8007880:	2301      	movs	r3, #1
 8007882:	e7f2      	b.n	800786a <_printf_float+0x192>
 8007884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800788a:	4299      	cmp	r1, r3
 800788c:	db05      	blt.n	800789a <_printf_float+0x1c2>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	6121      	str	r1, [r4, #16]
 8007892:	07d8      	lsls	r0, r3, #31
 8007894:	d5ea      	bpl.n	800786c <_printf_float+0x194>
 8007896:	1c4b      	adds	r3, r1, #1
 8007898:	e7e7      	b.n	800786a <_printf_float+0x192>
 800789a:	2900      	cmp	r1, #0
 800789c:	bfd4      	ite	le
 800789e:	f1c1 0202 	rsble	r2, r1, #2
 80078a2:	2201      	movgt	r2, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	e7e0      	b.n	800786a <_printf_float+0x192>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	055a      	lsls	r2, r3, #21
 80078ac:	d407      	bmi.n	80078be <_printf_float+0x1e6>
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	4642      	mov	r2, r8
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	d12b      	bne.n	8007914 <_printf_float+0x23c>
 80078bc:	e767      	b.n	800778e <_printf_float+0xb6>
 80078be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078c2:	f240 80dd 	bls.w	8007a80 <_printf_float+0x3a8>
 80078c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ca:	2200      	movs	r2, #0
 80078cc:	2300      	movs	r3, #0
 80078ce:	f7f9 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d033      	beq.n	800793e <_printf_float+0x266>
 80078d6:	4a37      	ldr	r2, [pc, #220]	@ (80079b4 <_printf_float+0x2dc>)
 80078d8:	2301      	movs	r3, #1
 80078da:	4631      	mov	r1, r6
 80078dc:	4628      	mov	r0, r5
 80078de:	47b8      	blx	r7
 80078e0:	3001      	adds	r0, #1
 80078e2:	f43f af54 	beq.w	800778e <_printf_float+0xb6>
 80078e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078ea:	4543      	cmp	r3, r8
 80078ec:	db02      	blt.n	80078f4 <_printf_float+0x21c>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	07d8      	lsls	r0, r3, #31
 80078f2:	d50f      	bpl.n	8007914 <_printf_float+0x23c>
 80078f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f af45 	beq.w	800778e <_printf_float+0xb6>
 8007904:	f04f 0900 	mov.w	r9, #0
 8007908:	f108 38ff 	add.w	r8, r8, #4294967295
 800790c:	f104 0a1a 	add.w	sl, r4, #26
 8007910:	45c8      	cmp	r8, r9
 8007912:	dc09      	bgt.n	8007928 <_printf_float+0x250>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	079b      	lsls	r3, r3, #30
 8007918:	f100 8103 	bmi.w	8007b22 <_printf_float+0x44a>
 800791c:	68e0      	ldr	r0, [r4, #12]
 800791e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007920:	4298      	cmp	r0, r3
 8007922:	bfb8      	it	lt
 8007924:	4618      	movlt	r0, r3
 8007926:	e734      	b.n	8007792 <_printf_float+0xba>
 8007928:	2301      	movs	r3, #1
 800792a:	4652      	mov	r2, sl
 800792c:	4631      	mov	r1, r6
 800792e:	4628      	mov	r0, r5
 8007930:	47b8      	blx	r7
 8007932:	3001      	adds	r0, #1
 8007934:	f43f af2b 	beq.w	800778e <_printf_float+0xb6>
 8007938:	f109 0901 	add.w	r9, r9, #1
 800793c:	e7e8      	b.n	8007910 <_printf_float+0x238>
 800793e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007940:	2b00      	cmp	r3, #0
 8007942:	dc39      	bgt.n	80079b8 <_printf_float+0x2e0>
 8007944:	4a1b      	ldr	r2, [pc, #108]	@ (80079b4 <_printf_float+0x2dc>)
 8007946:	2301      	movs	r3, #1
 8007948:	4631      	mov	r1, r6
 800794a:	4628      	mov	r0, r5
 800794c:	47b8      	blx	r7
 800794e:	3001      	adds	r0, #1
 8007950:	f43f af1d 	beq.w	800778e <_printf_float+0xb6>
 8007954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007958:	ea59 0303 	orrs.w	r3, r9, r3
 800795c:	d102      	bne.n	8007964 <_printf_float+0x28c>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	07d9      	lsls	r1, r3, #31
 8007962:	d5d7      	bpl.n	8007914 <_printf_float+0x23c>
 8007964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	f43f af0d 	beq.w	800778e <_printf_float+0xb6>
 8007974:	f04f 0a00 	mov.w	sl, #0
 8007978:	f104 0b1a 	add.w	fp, r4, #26
 800797c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800797e:	425b      	negs	r3, r3
 8007980:	4553      	cmp	r3, sl
 8007982:	dc01      	bgt.n	8007988 <_printf_float+0x2b0>
 8007984:	464b      	mov	r3, r9
 8007986:	e793      	b.n	80078b0 <_printf_float+0x1d8>
 8007988:	2301      	movs	r3, #1
 800798a:	465a      	mov	r2, fp
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f aefb 	beq.w	800778e <_printf_float+0xb6>
 8007998:	f10a 0a01 	add.w	sl, sl, #1
 800799c:	e7ee      	b.n	800797c <_printf_float+0x2a4>
 800799e:	bf00      	nop
 80079a0:	7fefffff 	.word	0x7fefffff
 80079a4:	0800ba0e 	.word	0x0800ba0e
 80079a8:	0800ba0a 	.word	0x0800ba0a
 80079ac:	0800ba16 	.word	0x0800ba16
 80079b0:	0800ba12 	.word	0x0800ba12
 80079b4:	0800ba1a 	.word	0x0800ba1a
 80079b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079be:	4553      	cmp	r3, sl
 80079c0:	bfa8      	it	ge
 80079c2:	4653      	movge	r3, sl
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	4699      	mov	r9, r3
 80079c8:	dc36      	bgt.n	8007a38 <_printf_float+0x360>
 80079ca:	f04f 0b00 	mov.w	fp, #0
 80079ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079d2:	f104 021a 	add.w	r2, r4, #26
 80079d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079d8:	9306      	str	r3, [sp, #24]
 80079da:	eba3 0309 	sub.w	r3, r3, r9
 80079de:	455b      	cmp	r3, fp
 80079e0:	dc31      	bgt.n	8007a46 <_printf_float+0x36e>
 80079e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e4:	459a      	cmp	sl, r3
 80079e6:	dc3a      	bgt.n	8007a5e <_printf_float+0x386>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	07da      	lsls	r2, r3, #31
 80079ec:	d437      	bmi.n	8007a5e <_printf_float+0x386>
 80079ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f0:	ebaa 0903 	sub.w	r9, sl, r3
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	ebaa 0303 	sub.w	r3, sl, r3
 80079fa:	4599      	cmp	r9, r3
 80079fc:	bfa8      	it	ge
 80079fe:	4699      	movge	r9, r3
 8007a00:	f1b9 0f00 	cmp.w	r9, #0
 8007a04:	dc33      	bgt.n	8007a6e <_printf_float+0x396>
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a0e:	f104 0b1a 	add.w	fp, r4, #26
 8007a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a14:	ebaa 0303 	sub.w	r3, sl, r3
 8007a18:	eba3 0309 	sub.w	r3, r3, r9
 8007a1c:	4543      	cmp	r3, r8
 8007a1e:	f77f af79 	ble.w	8007914 <_printf_float+0x23c>
 8007a22:	2301      	movs	r3, #1
 8007a24:	465a      	mov	r2, fp
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f aeae 	beq.w	800778e <_printf_float+0xb6>
 8007a32:	f108 0801 	add.w	r8, r8, #1
 8007a36:	e7ec      	b.n	8007a12 <_printf_float+0x33a>
 8007a38:	4642      	mov	r2, r8
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d1c2      	bne.n	80079ca <_printf_float+0x2f2>
 8007a44:	e6a3      	b.n	800778e <_printf_float+0xb6>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	9206      	str	r2, [sp, #24]
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	f43f ae9c 	beq.w	800778e <_printf_float+0xb6>
 8007a56:	9a06      	ldr	r2, [sp, #24]
 8007a58:	f10b 0b01 	add.w	fp, fp, #1
 8007a5c:	e7bb      	b.n	80079d6 <_printf_float+0x2fe>
 8007a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a62:	4631      	mov	r1, r6
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1c0      	bne.n	80079ee <_printf_float+0x316>
 8007a6c:	e68f      	b.n	800778e <_printf_float+0xb6>
 8007a6e:	9a06      	ldr	r2, [sp, #24]
 8007a70:	464b      	mov	r3, r9
 8007a72:	4442      	add	r2, r8
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d1c3      	bne.n	8007a06 <_printf_float+0x32e>
 8007a7e:	e686      	b.n	800778e <_printf_float+0xb6>
 8007a80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a84:	f1ba 0f01 	cmp.w	sl, #1
 8007a88:	dc01      	bgt.n	8007a8e <_printf_float+0x3b6>
 8007a8a:	07db      	lsls	r3, r3, #31
 8007a8c:	d536      	bpl.n	8007afc <_printf_float+0x424>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4642      	mov	r2, r8
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f ae78 	beq.w	800778e <_printf_float+0xb6>
 8007a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f43f ae70 	beq.w	800778e <_printf_float+0xb6>
 8007aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aba:	f7f9 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8007abe:	b9c0      	cbnz	r0, 8007af2 <_printf_float+0x41a>
 8007ac0:	4653      	mov	r3, sl
 8007ac2:	f108 0201 	add.w	r2, r8, #1
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	d10c      	bne.n	8007aea <_printf_float+0x412>
 8007ad0:	e65d      	b.n	800778e <_printf_float+0xb6>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	465a      	mov	r2, fp
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f ae56 	beq.w	800778e <_printf_float+0xb6>
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	45d0      	cmp	r8, sl
 8007ae8:	dbf3      	blt.n	8007ad2 <_printf_float+0x3fa>
 8007aea:	464b      	mov	r3, r9
 8007aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007af0:	e6df      	b.n	80078b2 <_printf_float+0x1da>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	f104 0b1a 	add.w	fp, r4, #26
 8007afa:	e7f4      	b.n	8007ae6 <_printf_float+0x40e>
 8007afc:	2301      	movs	r3, #1
 8007afe:	4642      	mov	r2, r8
 8007b00:	e7e1      	b.n	8007ac6 <_printf_float+0x3ee>
 8007b02:	2301      	movs	r3, #1
 8007b04:	464a      	mov	r2, r9
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f43f ae3e 	beq.w	800778e <_printf_float+0xb6>
 8007b12:	f108 0801 	add.w	r8, r8, #1
 8007b16:	68e3      	ldr	r3, [r4, #12]
 8007b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b1a:	1a5b      	subs	r3, r3, r1
 8007b1c:	4543      	cmp	r3, r8
 8007b1e:	dcf0      	bgt.n	8007b02 <_printf_float+0x42a>
 8007b20:	e6fc      	b.n	800791c <_printf_float+0x244>
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	f104 0919 	add.w	r9, r4, #25
 8007b2a:	e7f4      	b.n	8007b16 <_printf_float+0x43e>

08007b2c <_printf_common>:
 8007b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b30:	4616      	mov	r6, r2
 8007b32:	4698      	mov	r8, r3
 8007b34:	688a      	ldr	r2, [r1, #8]
 8007b36:	690b      	ldr	r3, [r1, #16]
 8007b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	bfb8      	it	lt
 8007b40:	4613      	movlt	r3, r2
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b48:	4607      	mov	r7, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	b10a      	cbz	r2, 8007b52 <_printf_common+0x26>
 8007b4e:	3301      	adds	r3, #1
 8007b50:	6033      	str	r3, [r6, #0]
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	0699      	lsls	r1, r3, #26
 8007b56:	bf42      	ittt	mi
 8007b58:	6833      	ldrmi	r3, [r6, #0]
 8007b5a:	3302      	addmi	r3, #2
 8007b5c:	6033      	strmi	r3, [r6, #0]
 8007b5e:	6825      	ldr	r5, [r4, #0]
 8007b60:	f015 0506 	ands.w	r5, r5, #6
 8007b64:	d106      	bne.n	8007b74 <_printf_common+0x48>
 8007b66:	f104 0a19 	add.w	sl, r4, #25
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	6832      	ldr	r2, [r6, #0]
 8007b6e:	1a9b      	subs	r3, r3, r2
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dc26      	bgt.n	8007bc2 <_printf_common+0x96>
 8007b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b78:	6822      	ldr	r2, [r4, #0]
 8007b7a:	3b00      	subs	r3, #0
 8007b7c:	bf18      	it	ne
 8007b7e:	2301      	movne	r3, #1
 8007b80:	0692      	lsls	r2, r2, #26
 8007b82:	d42b      	bmi.n	8007bdc <_printf_common+0xb0>
 8007b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b88:	4641      	mov	r1, r8
 8007b8a:	4638      	mov	r0, r7
 8007b8c:	47c8      	blx	r9
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d01e      	beq.n	8007bd0 <_printf_common+0xa4>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	6922      	ldr	r2, [r4, #16]
 8007b96:	f003 0306 	and.w	r3, r3, #6
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	bf02      	ittt	eq
 8007b9e:	68e5      	ldreq	r5, [r4, #12]
 8007ba0:	6833      	ldreq	r3, [r6, #0]
 8007ba2:	1aed      	subeq	r5, r5, r3
 8007ba4:	68a3      	ldr	r3, [r4, #8]
 8007ba6:	bf0c      	ite	eq
 8007ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bac:	2500      	movne	r5, #0
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	bfc4      	itt	gt
 8007bb2:	1a9b      	subgt	r3, r3, r2
 8007bb4:	18ed      	addgt	r5, r5, r3
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	341a      	adds	r4, #26
 8007bba:	42b5      	cmp	r5, r6
 8007bbc:	d11a      	bne.n	8007bf4 <_printf_common+0xc8>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	e008      	b.n	8007bd4 <_printf_common+0xa8>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	4652      	mov	r2, sl
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	4638      	mov	r0, r7
 8007bca:	47c8      	blx	r9
 8007bcc:	3001      	adds	r0, #1
 8007bce:	d103      	bne.n	8007bd8 <_printf_common+0xac>
 8007bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	3501      	adds	r5, #1
 8007bda:	e7c6      	b.n	8007b6a <_printf_common+0x3e>
 8007bdc:	18e1      	adds	r1, r4, r3
 8007bde:	1c5a      	adds	r2, r3, #1
 8007be0:	2030      	movs	r0, #48	@ 0x30
 8007be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007be6:	4422      	add	r2, r4
 8007be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	e7c7      	b.n	8007b84 <_printf_common+0x58>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	4638      	mov	r0, r7
 8007bfc:	47c8      	blx	r9
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d0e6      	beq.n	8007bd0 <_printf_common+0xa4>
 8007c02:	3601      	adds	r6, #1
 8007c04:	e7d9      	b.n	8007bba <_printf_common+0x8e>
	...

08007c08 <_printf_i>:
 8007c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	7e0f      	ldrb	r7, [r1, #24]
 8007c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c10:	2f78      	cmp	r7, #120	@ 0x78
 8007c12:	4691      	mov	r9, r2
 8007c14:	4680      	mov	r8, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	469a      	mov	sl, r3
 8007c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c1e:	d807      	bhi.n	8007c30 <_printf_i+0x28>
 8007c20:	2f62      	cmp	r7, #98	@ 0x62
 8007c22:	d80a      	bhi.n	8007c3a <_printf_i+0x32>
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	f000 80d1 	beq.w	8007dcc <_printf_i+0x1c4>
 8007c2a:	2f58      	cmp	r7, #88	@ 0x58
 8007c2c:	f000 80b8 	beq.w	8007da0 <_printf_i+0x198>
 8007c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c38:	e03a      	b.n	8007cb0 <_printf_i+0xa8>
 8007c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c3e:	2b15      	cmp	r3, #21
 8007c40:	d8f6      	bhi.n	8007c30 <_printf_i+0x28>
 8007c42:	a101      	add	r1, pc, #4	@ (adr r1, 8007c48 <_printf_i+0x40>)
 8007c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007c31 	.word	0x08007c31
 8007c54:	08007c31 	.word	0x08007c31
 8007c58:	08007c31 	.word	0x08007c31
 8007c5c:	08007c31 	.word	0x08007c31
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c31 	.word	0x08007c31
 8007c68:	08007c31 	.word	0x08007c31
 8007c6c:	08007c31 	.word	0x08007c31
 8007c70:	08007c31 	.word	0x08007c31
 8007c74:	08007db3 	.word	0x08007db3
 8007c78:	08007cdf 	.word	0x08007cdf
 8007c7c:	08007d6d 	.word	0x08007d6d
 8007c80:	08007c31 	.word	0x08007c31
 8007c84:	08007c31 	.word	0x08007c31
 8007c88:	08007dd5 	.word	0x08007dd5
 8007c8c:	08007c31 	.word	0x08007c31
 8007c90:	08007cdf 	.word	0x08007cdf
 8007c94:	08007c31 	.word	0x08007c31
 8007c98:	08007c31 	.word	0x08007c31
 8007c9c:	08007d75 	.word	0x08007d75
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6032      	str	r2, [r6, #0]
 8007ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e09c      	b.n	8007dee <_printf_i+0x1e6>
 8007cb4:	6833      	ldr	r3, [r6, #0]
 8007cb6:	6820      	ldr	r0, [r4, #0]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	6031      	str	r1, [r6, #0]
 8007cbc:	0606      	lsls	r6, r0, #24
 8007cbe:	d501      	bpl.n	8007cc4 <_printf_i+0xbc>
 8007cc0:	681d      	ldr	r5, [r3, #0]
 8007cc2:	e003      	b.n	8007ccc <_printf_i+0xc4>
 8007cc4:	0645      	lsls	r5, r0, #25
 8007cc6:	d5fb      	bpl.n	8007cc0 <_printf_i+0xb8>
 8007cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	da03      	bge.n	8007cd8 <_printf_i+0xd0>
 8007cd0:	232d      	movs	r3, #45	@ 0x2d
 8007cd2:	426d      	negs	r5, r5
 8007cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cd8:	4858      	ldr	r0, [pc, #352]	@ (8007e3c <_printf_i+0x234>)
 8007cda:	230a      	movs	r3, #10
 8007cdc:	e011      	b.n	8007d02 <_printf_i+0xfa>
 8007cde:	6821      	ldr	r1, [r4, #0]
 8007ce0:	6833      	ldr	r3, [r6, #0]
 8007ce2:	0608      	lsls	r0, r1, #24
 8007ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ce8:	d402      	bmi.n	8007cf0 <_printf_i+0xe8>
 8007cea:	0649      	lsls	r1, r1, #25
 8007cec:	bf48      	it	mi
 8007cee:	b2ad      	uxthmi	r5, r5
 8007cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cf2:	4852      	ldr	r0, [pc, #328]	@ (8007e3c <_printf_i+0x234>)
 8007cf4:	6033      	str	r3, [r6, #0]
 8007cf6:	bf14      	ite	ne
 8007cf8:	230a      	movne	r3, #10
 8007cfa:	2308      	moveq	r3, #8
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d02:	6866      	ldr	r6, [r4, #4]
 8007d04:	60a6      	str	r6, [r4, #8]
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	db05      	blt.n	8007d16 <_printf_i+0x10e>
 8007d0a:	6821      	ldr	r1, [r4, #0]
 8007d0c:	432e      	orrs	r6, r5
 8007d0e:	f021 0104 	bic.w	r1, r1, #4
 8007d12:	6021      	str	r1, [r4, #0]
 8007d14:	d04b      	beq.n	8007dae <_printf_i+0x1a6>
 8007d16:	4616      	mov	r6, r2
 8007d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8007d20:	5dc7      	ldrb	r7, [r0, r7]
 8007d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d26:	462f      	mov	r7, r5
 8007d28:	42bb      	cmp	r3, r7
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	d9f4      	bls.n	8007d18 <_printf_i+0x110>
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d10b      	bne.n	8007d4a <_printf_i+0x142>
 8007d32:	6823      	ldr	r3, [r4, #0]
 8007d34:	07df      	lsls	r7, r3, #31
 8007d36:	d508      	bpl.n	8007d4a <_printf_i+0x142>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	6861      	ldr	r1, [r4, #4]
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	bfde      	ittt	le
 8007d40:	2330      	movle	r3, #48	@ 0x30
 8007d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d4a:	1b92      	subs	r2, r2, r6
 8007d4c:	6122      	str	r2, [r4, #16]
 8007d4e:	f8cd a000 	str.w	sl, [sp]
 8007d52:	464b      	mov	r3, r9
 8007d54:	aa03      	add	r2, sp, #12
 8007d56:	4621      	mov	r1, r4
 8007d58:	4640      	mov	r0, r8
 8007d5a:	f7ff fee7 	bl	8007b2c <_printf_common>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	d14a      	bne.n	8007df8 <_printf_i+0x1f0>
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295
 8007d66:	b004      	add	sp, #16
 8007d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	f043 0320 	orr.w	r3, r3, #32
 8007d72:	6023      	str	r3, [r4, #0]
 8007d74:	4832      	ldr	r0, [pc, #200]	@ (8007e40 <_printf_i+0x238>)
 8007d76:	2778      	movs	r7, #120	@ 0x78
 8007d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d7c:	6823      	ldr	r3, [r4, #0]
 8007d7e:	6831      	ldr	r1, [r6, #0]
 8007d80:	061f      	lsls	r7, r3, #24
 8007d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d86:	d402      	bmi.n	8007d8e <_printf_i+0x186>
 8007d88:	065f      	lsls	r7, r3, #25
 8007d8a:	bf48      	it	mi
 8007d8c:	b2ad      	uxthmi	r5, r5
 8007d8e:	6031      	str	r1, [r6, #0]
 8007d90:	07d9      	lsls	r1, r3, #31
 8007d92:	bf44      	itt	mi
 8007d94:	f043 0320 	orrmi.w	r3, r3, #32
 8007d98:	6023      	strmi	r3, [r4, #0]
 8007d9a:	b11d      	cbz	r5, 8007da4 <_printf_i+0x19c>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	e7ad      	b.n	8007cfc <_printf_i+0xf4>
 8007da0:	4826      	ldr	r0, [pc, #152]	@ (8007e3c <_printf_i+0x234>)
 8007da2:	e7e9      	b.n	8007d78 <_printf_i+0x170>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	f023 0320 	bic.w	r3, r3, #32
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	e7f6      	b.n	8007d9c <_printf_i+0x194>
 8007dae:	4616      	mov	r6, r2
 8007db0:	e7bd      	b.n	8007d2e <_printf_i+0x126>
 8007db2:	6833      	ldr	r3, [r6, #0]
 8007db4:	6825      	ldr	r5, [r4, #0]
 8007db6:	6961      	ldr	r1, [r4, #20]
 8007db8:	1d18      	adds	r0, r3, #4
 8007dba:	6030      	str	r0, [r6, #0]
 8007dbc:	062e      	lsls	r6, r5, #24
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	d501      	bpl.n	8007dc6 <_printf_i+0x1be>
 8007dc2:	6019      	str	r1, [r3, #0]
 8007dc4:	e002      	b.n	8007dcc <_printf_i+0x1c4>
 8007dc6:	0668      	lsls	r0, r5, #25
 8007dc8:	d5fb      	bpl.n	8007dc2 <_printf_i+0x1ba>
 8007dca:	8019      	strh	r1, [r3, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6123      	str	r3, [r4, #16]
 8007dd0:	4616      	mov	r6, r2
 8007dd2:	e7bc      	b.n	8007d4e <_printf_i+0x146>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	1d1a      	adds	r2, r3, #4
 8007dd8:	6032      	str	r2, [r6, #0]
 8007dda:	681e      	ldr	r6, [r3, #0]
 8007ddc:	6862      	ldr	r2, [r4, #4]
 8007dde:	2100      	movs	r1, #0
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7f8 f9f5 	bl	80001d0 <memchr>
 8007de6:	b108      	cbz	r0, 8007dec <_printf_i+0x1e4>
 8007de8:	1b80      	subs	r0, r0, r6
 8007dea:	6060      	str	r0, [r4, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	6123      	str	r3, [r4, #16]
 8007df0:	2300      	movs	r3, #0
 8007df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007df6:	e7aa      	b.n	8007d4e <_printf_i+0x146>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	4632      	mov	r2, r6
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	4640      	mov	r0, r8
 8007e00:	47d0      	blx	sl
 8007e02:	3001      	adds	r0, #1
 8007e04:	d0ad      	beq.n	8007d62 <_printf_i+0x15a>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	079b      	lsls	r3, r3, #30
 8007e0a:	d413      	bmi.n	8007e34 <_printf_i+0x22c>
 8007e0c:	68e0      	ldr	r0, [r4, #12]
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	4298      	cmp	r0, r3
 8007e12:	bfb8      	it	lt
 8007e14:	4618      	movlt	r0, r3
 8007e16:	e7a6      	b.n	8007d66 <_printf_i+0x15e>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4632      	mov	r2, r6
 8007e1c:	4649      	mov	r1, r9
 8007e1e:	4640      	mov	r0, r8
 8007e20:	47d0      	blx	sl
 8007e22:	3001      	adds	r0, #1
 8007e24:	d09d      	beq.n	8007d62 <_printf_i+0x15a>
 8007e26:	3501      	adds	r5, #1
 8007e28:	68e3      	ldr	r3, [r4, #12]
 8007e2a:	9903      	ldr	r1, [sp, #12]
 8007e2c:	1a5b      	subs	r3, r3, r1
 8007e2e:	42ab      	cmp	r3, r5
 8007e30:	dcf2      	bgt.n	8007e18 <_printf_i+0x210>
 8007e32:	e7eb      	b.n	8007e0c <_printf_i+0x204>
 8007e34:	2500      	movs	r5, #0
 8007e36:	f104 0619 	add.w	r6, r4, #25
 8007e3a:	e7f5      	b.n	8007e28 <_printf_i+0x220>
 8007e3c:	0800ba1c 	.word	0x0800ba1c
 8007e40:	0800ba2d 	.word	0x0800ba2d

08007e44 <std>:
 8007e44:	2300      	movs	r3, #0
 8007e46:	b510      	push	{r4, lr}
 8007e48:	4604      	mov	r4, r0
 8007e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e52:	6083      	str	r3, [r0, #8]
 8007e54:	8181      	strh	r1, [r0, #12]
 8007e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e58:	81c2      	strh	r2, [r0, #14]
 8007e5a:	6183      	str	r3, [r0, #24]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	2208      	movs	r2, #8
 8007e60:	305c      	adds	r0, #92	@ 0x5c
 8007e62:	f000 fa2f 	bl	80082c4 <memset>
 8007e66:	4b0d      	ldr	r3, [pc, #52]	@ (8007e9c <std+0x58>)
 8007e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea0 <std+0x5c>)
 8007e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <std+0x60>)
 8007e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <std+0x64>)
 8007e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <std+0x68>)
 8007e78:	6224      	str	r4, [r4, #32]
 8007e7a:	429c      	cmp	r4, r3
 8007e7c:	d006      	beq.n	8007e8c <std+0x48>
 8007e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e82:	4294      	cmp	r4, r2
 8007e84:	d002      	beq.n	8007e8c <std+0x48>
 8007e86:	33d0      	adds	r3, #208	@ 0xd0
 8007e88:	429c      	cmp	r4, r3
 8007e8a:	d105      	bne.n	8007e98 <std+0x54>
 8007e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e94:	f000 bab4 	b.w	8008400 <__retarget_lock_init_recursive>
 8007e98:	bd10      	pop	{r4, pc}
 8007e9a:	bf00      	nop
 8007e9c:	08008115 	.word	0x08008115
 8007ea0:	08008137 	.word	0x08008137
 8007ea4:	0800816f 	.word	0x0800816f
 8007ea8:	08008193 	.word	0x08008193
 8007eac:	20000b48 	.word	0x20000b48

08007eb0 <stdio_exit_handler>:
 8007eb0:	4a02      	ldr	r2, [pc, #8]	@ (8007ebc <stdio_exit_handler+0xc>)
 8007eb2:	4903      	ldr	r1, [pc, #12]	@ (8007ec0 <stdio_exit_handler+0x10>)
 8007eb4:	4803      	ldr	r0, [pc, #12]	@ (8007ec4 <stdio_exit_handler+0x14>)
 8007eb6:	f000 b869 	b.w	8007f8c <_fwalk_sglue>
 8007eba:	bf00      	nop
 8007ebc:	2000073c 	.word	0x2000073c
 8007ec0:	0800a7dd 	.word	0x0800a7dd
 8007ec4:	200008b8 	.word	0x200008b8

08007ec8 <cleanup_stdio>:
 8007ec8:	6841      	ldr	r1, [r0, #4]
 8007eca:	4b0c      	ldr	r3, [pc, #48]	@ (8007efc <cleanup_stdio+0x34>)
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	d001      	beq.n	8007ed8 <cleanup_stdio+0x10>
 8007ed4:	f002 fc82 	bl	800a7dc <_fflush_r>
 8007ed8:	68a1      	ldr	r1, [r4, #8]
 8007eda:	4b09      	ldr	r3, [pc, #36]	@ (8007f00 <cleanup_stdio+0x38>)
 8007edc:	4299      	cmp	r1, r3
 8007ede:	d002      	beq.n	8007ee6 <cleanup_stdio+0x1e>
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f002 fc7b 	bl	800a7dc <_fflush_r>
 8007ee6:	68e1      	ldr	r1, [r4, #12]
 8007ee8:	4b06      	ldr	r3, [pc, #24]	@ (8007f04 <cleanup_stdio+0x3c>)
 8007eea:	4299      	cmp	r1, r3
 8007eec:	d004      	beq.n	8007ef8 <cleanup_stdio+0x30>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef4:	f002 bc72 	b.w	800a7dc <_fflush_r>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	bf00      	nop
 8007efc:	20000b48 	.word	0x20000b48
 8007f00:	20000bb0 	.word	0x20000bb0
 8007f04:	20000c18 	.word	0x20000c18

08007f08 <global_stdio_init.part.0>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f38 <global_stdio_init.part.0+0x30>)
 8007f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8007f3c <global_stdio_init.part.0+0x34>)
 8007f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8007f40 <global_stdio_init.part.0+0x38>)
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	4620      	mov	r0, r4
 8007f14:	2200      	movs	r2, #0
 8007f16:	2104      	movs	r1, #4
 8007f18:	f7ff ff94 	bl	8007e44 <std>
 8007f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f20:	2201      	movs	r2, #1
 8007f22:	2109      	movs	r1, #9
 8007f24:	f7ff ff8e 	bl	8007e44 <std>
 8007f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f32:	2112      	movs	r1, #18
 8007f34:	f7ff bf86 	b.w	8007e44 <std>
 8007f38:	20000c80 	.word	0x20000c80
 8007f3c:	20000b48 	.word	0x20000b48
 8007f40:	08007eb1 	.word	0x08007eb1

08007f44 <__sfp_lock_acquire>:
 8007f44:	4801      	ldr	r0, [pc, #4]	@ (8007f4c <__sfp_lock_acquire+0x8>)
 8007f46:	f000 ba5c 	b.w	8008402 <__retarget_lock_acquire_recursive>
 8007f4a:	bf00      	nop
 8007f4c:	20000c89 	.word	0x20000c89

08007f50 <__sfp_lock_release>:
 8007f50:	4801      	ldr	r0, [pc, #4]	@ (8007f58 <__sfp_lock_release+0x8>)
 8007f52:	f000 ba57 	b.w	8008404 <__retarget_lock_release_recursive>
 8007f56:	bf00      	nop
 8007f58:	20000c89 	.word	0x20000c89

08007f5c <__sinit>:
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	f7ff fff0 	bl	8007f44 <__sfp_lock_acquire>
 8007f64:	6a23      	ldr	r3, [r4, #32]
 8007f66:	b11b      	cbz	r3, 8007f70 <__sinit+0x14>
 8007f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6c:	f7ff bff0 	b.w	8007f50 <__sfp_lock_release>
 8007f70:	4b04      	ldr	r3, [pc, #16]	@ (8007f84 <__sinit+0x28>)
 8007f72:	6223      	str	r3, [r4, #32]
 8007f74:	4b04      	ldr	r3, [pc, #16]	@ (8007f88 <__sinit+0x2c>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f5      	bne.n	8007f68 <__sinit+0xc>
 8007f7c:	f7ff ffc4 	bl	8007f08 <global_stdio_init.part.0>
 8007f80:	e7f2      	b.n	8007f68 <__sinit+0xc>
 8007f82:	bf00      	nop
 8007f84:	08007ec9 	.word	0x08007ec9
 8007f88:	20000c80 	.word	0x20000c80

08007f8c <_fwalk_sglue>:
 8007f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f90:	4607      	mov	r7, r0
 8007f92:	4688      	mov	r8, r1
 8007f94:	4614      	mov	r4, r2
 8007f96:	2600      	movs	r6, #0
 8007f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8007fa0:	d505      	bpl.n	8007fae <_fwalk_sglue+0x22>
 8007fa2:	6824      	ldr	r4, [r4, #0]
 8007fa4:	2c00      	cmp	r4, #0
 8007fa6:	d1f7      	bne.n	8007f98 <_fwalk_sglue+0xc>
 8007fa8:	4630      	mov	r0, r6
 8007faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d907      	bls.n	8007fc4 <_fwalk_sglue+0x38>
 8007fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	d003      	beq.n	8007fc4 <_fwalk_sglue+0x38>
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	47c0      	blx	r8
 8007fc2:	4306      	orrs	r6, r0
 8007fc4:	3568      	adds	r5, #104	@ 0x68
 8007fc6:	e7e9      	b.n	8007f9c <_fwalk_sglue+0x10>

08007fc8 <iprintf>:
 8007fc8:	b40f      	push	{r0, r1, r2, r3}
 8007fca:	b507      	push	{r0, r1, r2, lr}
 8007fcc:	4906      	ldr	r1, [pc, #24]	@ (8007fe8 <iprintf+0x20>)
 8007fce:	ab04      	add	r3, sp, #16
 8007fd0:	6808      	ldr	r0, [r1, #0]
 8007fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd6:	6881      	ldr	r1, [r0, #8]
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	f002 fa63 	bl	800a4a4 <_vfiprintf_r>
 8007fde:	b003      	add	sp, #12
 8007fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe4:	b004      	add	sp, #16
 8007fe6:	4770      	bx	lr
 8007fe8:	200008b4 	.word	0x200008b4

08007fec <_puts_r>:
 8007fec:	6a03      	ldr	r3, [r0, #32]
 8007fee:	b570      	push	{r4, r5, r6, lr}
 8007ff0:	6884      	ldr	r4, [r0, #8]
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	460e      	mov	r6, r1
 8007ff6:	b90b      	cbnz	r3, 8007ffc <_puts_r+0x10>
 8007ff8:	f7ff ffb0 	bl	8007f5c <__sinit>
 8007ffc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d405      	bmi.n	800800e <_puts_r+0x22>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	0598      	lsls	r0, r3, #22
 8008006:	d402      	bmi.n	800800e <_puts_r+0x22>
 8008008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800800a:	f000 f9fa 	bl	8008402 <__retarget_lock_acquire_recursive>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	d502      	bpl.n	800801a <_puts_r+0x2e>
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d135      	bne.n	8008086 <_puts_r+0x9a>
 800801a:	4621      	mov	r1, r4
 800801c:	4628      	mov	r0, r5
 800801e:	f000 f8fb 	bl	8008218 <__swsetup_r>
 8008022:	b380      	cbz	r0, 8008086 <_puts_r+0x9a>
 8008024:	f04f 35ff 	mov.w	r5, #4294967295
 8008028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800802a:	07da      	lsls	r2, r3, #31
 800802c:	d405      	bmi.n	800803a <_puts_r+0x4e>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d402      	bmi.n	800803a <_puts_r+0x4e>
 8008034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008036:	f000 f9e5 	bl	8008404 <__retarget_lock_release_recursive>
 800803a:	4628      	mov	r0, r5
 800803c:	bd70      	pop	{r4, r5, r6, pc}
 800803e:	2b00      	cmp	r3, #0
 8008040:	da04      	bge.n	800804c <_puts_r+0x60>
 8008042:	69a2      	ldr	r2, [r4, #24]
 8008044:	429a      	cmp	r2, r3
 8008046:	dc17      	bgt.n	8008078 <_puts_r+0x8c>
 8008048:	290a      	cmp	r1, #10
 800804a:	d015      	beq.n	8008078 <_puts_r+0x8c>
 800804c:	6823      	ldr	r3, [r4, #0]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	7019      	strb	r1, [r3, #0]
 8008054:	68a3      	ldr	r3, [r4, #8]
 8008056:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800805a:	3b01      	subs	r3, #1
 800805c:	60a3      	str	r3, [r4, #8]
 800805e:	2900      	cmp	r1, #0
 8008060:	d1ed      	bne.n	800803e <_puts_r+0x52>
 8008062:	2b00      	cmp	r3, #0
 8008064:	da11      	bge.n	800808a <_puts_r+0x9e>
 8008066:	4622      	mov	r2, r4
 8008068:	210a      	movs	r1, #10
 800806a:	4628      	mov	r0, r5
 800806c:	f000 f895 	bl	800819a <__swbuf_r>
 8008070:	3001      	adds	r0, #1
 8008072:	d0d7      	beq.n	8008024 <_puts_r+0x38>
 8008074:	250a      	movs	r5, #10
 8008076:	e7d7      	b.n	8008028 <_puts_r+0x3c>
 8008078:	4622      	mov	r2, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f88d 	bl	800819a <__swbuf_r>
 8008080:	3001      	adds	r0, #1
 8008082:	d1e7      	bne.n	8008054 <_puts_r+0x68>
 8008084:	e7ce      	b.n	8008024 <_puts_r+0x38>
 8008086:	3e01      	subs	r6, #1
 8008088:	e7e4      	b.n	8008054 <_puts_r+0x68>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	220a      	movs	r2, #10
 8008092:	701a      	strb	r2, [r3, #0]
 8008094:	e7ee      	b.n	8008074 <_puts_r+0x88>
	...

08008098 <puts>:
 8008098:	4b02      	ldr	r3, [pc, #8]	@ (80080a4 <puts+0xc>)
 800809a:	4601      	mov	r1, r0
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f7ff bfa5 	b.w	8007fec <_puts_r>
 80080a2:	bf00      	nop
 80080a4:	200008b4 	.word	0x200008b4

080080a8 <sniprintf>:
 80080a8:	b40c      	push	{r2, r3}
 80080aa:	b530      	push	{r4, r5, lr}
 80080ac:	4b18      	ldr	r3, [pc, #96]	@ (8008110 <sniprintf+0x68>)
 80080ae:	1e0c      	subs	r4, r1, #0
 80080b0:	681d      	ldr	r5, [r3, #0]
 80080b2:	b09d      	sub	sp, #116	@ 0x74
 80080b4:	da08      	bge.n	80080c8 <sniprintf+0x20>
 80080b6:	238b      	movs	r3, #139	@ 0x8b
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	f04f 30ff 	mov.w	r0, #4294967295
 80080be:	b01d      	add	sp, #116	@ 0x74
 80080c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080c4:	b002      	add	sp, #8
 80080c6:	4770      	bx	lr
 80080c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80080cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80080d6:	bf14      	ite	ne
 80080d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080dc:	4623      	moveq	r3, r4
 80080de:	9304      	str	r3, [sp, #16]
 80080e0:	9307      	str	r3, [sp, #28]
 80080e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080e6:	9002      	str	r0, [sp, #8]
 80080e8:	9006      	str	r0, [sp, #24]
 80080ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80080f0:	ab21      	add	r3, sp, #132	@ 0x84
 80080f2:	a902      	add	r1, sp, #8
 80080f4:	4628      	mov	r0, r5
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	f002 f8ae 	bl	800a258 <_svfiprintf_r>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	bfbc      	itt	lt
 8008100:	238b      	movlt	r3, #139	@ 0x8b
 8008102:	602b      	strlt	r3, [r5, #0]
 8008104:	2c00      	cmp	r4, #0
 8008106:	d0da      	beq.n	80080be <sniprintf+0x16>
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	e7d6      	b.n	80080be <sniprintf+0x16>
 8008110:	200008b4 	.word	0x200008b4

08008114 <__sread>:
 8008114:	b510      	push	{r4, lr}
 8008116:	460c      	mov	r4, r1
 8008118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811c:	f000 f912 	bl	8008344 <_read_r>
 8008120:	2800      	cmp	r0, #0
 8008122:	bfab      	itete	ge
 8008124:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008126:	89a3      	ldrhlt	r3, [r4, #12]
 8008128:	181b      	addge	r3, r3, r0
 800812a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800812e:	bfac      	ite	ge
 8008130:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008132:	81a3      	strhlt	r3, [r4, #12]
 8008134:	bd10      	pop	{r4, pc}

08008136 <__swrite>:
 8008136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	461f      	mov	r7, r3
 800813c:	898b      	ldrh	r3, [r1, #12]
 800813e:	05db      	lsls	r3, r3, #23
 8008140:	4605      	mov	r5, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4616      	mov	r6, r2
 8008146:	d505      	bpl.n	8008154 <__swrite+0x1e>
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	2302      	movs	r3, #2
 800814e:	2200      	movs	r2, #0
 8008150:	f000 f8e6 	bl	8008320 <_lseek_r>
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800815a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	4632      	mov	r2, r6
 8008162:	463b      	mov	r3, r7
 8008164:	4628      	mov	r0, r5
 8008166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816a:	f000 b90d 	b.w	8008388 <_write_r>

0800816e <__sseek>:
 800816e:	b510      	push	{r4, lr}
 8008170:	460c      	mov	r4, r1
 8008172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008176:	f000 f8d3 	bl	8008320 <_lseek_r>
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	bf15      	itete	ne
 8008180:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008182:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008186:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800818a:	81a3      	strheq	r3, [r4, #12]
 800818c:	bf18      	it	ne
 800818e:	81a3      	strhne	r3, [r4, #12]
 8008190:	bd10      	pop	{r4, pc}

08008192 <__sclose>:
 8008192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008196:	f000 b8b3 	b.w	8008300 <_close_r>

0800819a <__swbuf_r>:
 800819a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819c:	460e      	mov	r6, r1
 800819e:	4614      	mov	r4, r2
 80081a0:	4605      	mov	r5, r0
 80081a2:	b118      	cbz	r0, 80081ac <__swbuf_r+0x12>
 80081a4:	6a03      	ldr	r3, [r0, #32]
 80081a6:	b90b      	cbnz	r3, 80081ac <__swbuf_r+0x12>
 80081a8:	f7ff fed8 	bl	8007f5c <__sinit>
 80081ac:	69a3      	ldr	r3, [r4, #24]
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	071a      	lsls	r2, r3, #28
 80081b4:	d501      	bpl.n	80081ba <__swbuf_r+0x20>
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	b943      	cbnz	r3, 80081cc <__swbuf_r+0x32>
 80081ba:	4621      	mov	r1, r4
 80081bc:	4628      	mov	r0, r5
 80081be:	f000 f82b 	bl	8008218 <__swsetup_r>
 80081c2:	b118      	cbz	r0, 80081cc <__swbuf_r+0x32>
 80081c4:	f04f 37ff 	mov.w	r7, #4294967295
 80081c8:	4638      	mov	r0, r7
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	6922      	ldr	r2, [r4, #16]
 80081d0:	1a98      	subs	r0, r3, r2
 80081d2:	6963      	ldr	r3, [r4, #20]
 80081d4:	b2f6      	uxtb	r6, r6
 80081d6:	4283      	cmp	r3, r0
 80081d8:	4637      	mov	r7, r6
 80081da:	dc05      	bgt.n	80081e8 <__swbuf_r+0x4e>
 80081dc:	4621      	mov	r1, r4
 80081de:	4628      	mov	r0, r5
 80081e0:	f002 fafc 	bl	800a7dc <_fflush_r>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d1ed      	bne.n	80081c4 <__swbuf_r+0x2a>
 80081e8:	68a3      	ldr	r3, [r4, #8]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	701e      	strb	r6, [r3, #0]
 80081f6:	6962      	ldr	r2, [r4, #20]
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d004      	beq.n	8008208 <__swbuf_r+0x6e>
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	07db      	lsls	r3, r3, #31
 8008202:	d5e1      	bpl.n	80081c8 <__swbuf_r+0x2e>
 8008204:	2e0a      	cmp	r6, #10
 8008206:	d1df      	bne.n	80081c8 <__swbuf_r+0x2e>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f002 fae6 	bl	800a7dc <_fflush_r>
 8008210:	2800      	cmp	r0, #0
 8008212:	d0d9      	beq.n	80081c8 <__swbuf_r+0x2e>
 8008214:	e7d6      	b.n	80081c4 <__swbuf_r+0x2a>
	...

08008218 <__swsetup_r>:
 8008218:	b538      	push	{r3, r4, r5, lr}
 800821a:	4b29      	ldr	r3, [pc, #164]	@ (80082c0 <__swsetup_r+0xa8>)
 800821c:	4605      	mov	r5, r0
 800821e:	6818      	ldr	r0, [r3, #0]
 8008220:	460c      	mov	r4, r1
 8008222:	b118      	cbz	r0, 800822c <__swsetup_r+0x14>
 8008224:	6a03      	ldr	r3, [r0, #32]
 8008226:	b90b      	cbnz	r3, 800822c <__swsetup_r+0x14>
 8008228:	f7ff fe98 	bl	8007f5c <__sinit>
 800822c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	d422      	bmi.n	800827a <__swsetup_r+0x62>
 8008234:	06da      	lsls	r2, r3, #27
 8008236:	d407      	bmi.n	8008248 <__swsetup_r+0x30>
 8008238:	2209      	movs	r2, #9
 800823a:	602a      	str	r2, [r5, #0]
 800823c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	e033      	b.n	80082b0 <__swsetup_r+0x98>
 8008248:	0758      	lsls	r0, r3, #29
 800824a:	d512      	bpl.n	8008272 <__swsetup_r+0x5a>
 800824c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800824e:	b141      	cbz	r1, 8008262 <__swsetup_r+0x4a>
 8008250:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008254:	4299      	cmp	r1, r3
 8008256:	d002      	beq.n	800825e <__swsetup_r+0x46>
 8008258:	4628      	mov	r0, r5
 800825a:	f000 ff4d 	bl	80090f8 <_free_r>
 800825e:	2300      	movs	r3, #0
 8008260:	6363      	str	r3, [r4, #52]	@ 0x34
 8008262:	89a3      	ldrh	r3, [r4, #12]
 8008264:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	2300      	movs	r3, #0
 800826c:	6063      	str	r3, [r4, #4]
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f043 0308 	orr.w	r3, r3, #8
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	b94b      	cbnz	r3, 8008292 <__swsetup_r+0x7a>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008288:	d003      	beq.n	8008292 <__swsetup_r+0x7a>
 800828a:	4621      	mov	r1, r4
 800828c:	4628      	mov	r0, r5
 800828e:	f002 faf3 	bl	800a878 <__smakebuf_r>
 8008292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008296:	f013 0201 	ands.w	r2, r3, #1
 800829a:	d00a      	beq.n	80082b2 <__swsetup_r+0x9a>
 800829c:	2200      	movs	r2, #0
 800829e:	60a2      	str	r2, [r4, #8]
 80082a0:	6962      	ldr	r2, [r4, #20]
 80082a2:	4252      	negs	r2, r2
 80082a4:	61a2      	str	r2, [r4, #24]
 80082a6:	6922      	ldr	r2, [r4, #16]
 80082a8:	b942      	cbnz	r2, 80082bc <__swsetup_r+0xa4>
 80082aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082ae:	d1c5      	bne.n	800823c <__swsetup_r+0x24>
 80082b0:	bd38      	pop	{r3, r4, r5, pc}
 80082b2:	0799      	lsls	r1, r3, #30
 80082b4:	bf58      	it	pl
 80082b6:	6962      	ldrpl	r2, [r4, #20]
 80082b8:	60a2      	str	r2, [r4, #8]
 80082ba:	e7f4      	b.n	80082a6 <__swsetup_r+0x8e>
 80082bc:	2000      	movs	r0, #0
 80082be:	e7f7      	b.n	80082b0 <__swsetup_r+0x98>
 80082c0:	200008b4 	.word	0x200008b4

080082c4 <memset>:
 80082c4:	4402      	add	r2, r0
 80082c6:	4603      	mov	r3, r0
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d100      	bne.n	80082ce <memset+0xa>
 80082cc:	4770      	bx	lr
 80082ce:	f803 1b01 	strb.w	r1, [r3], #1
 80082d2:	e7f9      	b.n	80082c8 <memset+0x4>

080082d4 <strncmp>:
 80082d4:	b510      	push	{r4, lr}
 80082d6:	b16a      	cbz	r2, 80082f4 <strncmp+0x20>
 80082d8:	3901      	subs	r1, #1
 80082da:	1884      	adds	r4, r0, r2
 80082dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d103      	bne.n	80082f0 <strncmp+0x1c>
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d001      	beq.n	80082f0 <strncmp+0x1c>
 80082ec:	2a00      	cmp	r2, #0
 80082ee:	d1f5      	bne.n	80082dc <strncmp+0x8>
 80082f0:	1ad0      	subs	r0, r2, r3
 80082f2:	bd10      	pop	{r4, pc}
 80082f4:	4610      	mov	r0, r2
 80082f6:	e7fc      	b.n	80082f2 <strncmp+0x1e>

080082f8 <_localeconv_r>:
 80082f8:	4800      	ldr	r0, [pc, #0]	@ (80082fc <_localeconv_r+0x4>)
 80082fa:	4770      	bx	lr
 80082fc:	20000838 	.word	0x20000838

08008300 <_close_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4d06      	ldr	r5, [pc, #24]	@ (800831c <_close_r+0x1c>)
 8008304:	2300      	movs	r3, #0
 8008306:	4604      	mov	r4, r0
 8008308:	4608      	mov	r0, r1
 800830a:	602b      	str	r3, [r5, #0]
 800830c:	f7f9 f9a3 	bl	8001656 <_close>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d102      	bne.n	800831a <_close_r+0x1a>
 8008314:	682b      	ldr	r3, [r5, #0]
 8008316:	b103      	cbz	r3, 800831a <_close_r+0x1a>
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	bd38      	pop	{r3, r4, r5, pc}
 800831c:	20000c84 	.word	0x20000c84

08008320 <_lseek_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	@ (8008340 <_lseek_r+0x20>)
 8008324:	4604      	mov	r4, r0
 8008326:	4608      	mov	r0, r1
 8008328:	4611      	mov	r1, r2
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	f7f9 f9bb 	bl	80016aa <_lseek>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d102      	bne.n	800833e <_lseek_r+0x1e>
 8008338:	682b      	ldr	r3, [r5, #0]
 800833a:	b103      	cbz	r3, 800833e <_lseek_r+0x1e>
 800833c:	6023      	str	r3, [r4, #0]
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	20000c84 	.word	0x20000c84

08008344 <_read_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d07      	ldr	r5, [pc, #28]	@ (8008364 <_read_r+0x20>)
 8008348:	4604      	mov	r4, r0
 800834a:	4608      	mov	r0, r1
 800834c:	4611      	mov	r1, r2
 800834e:	2200      	movs	r2, #0
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	f7f9 f96e 	bl	8001634 <_read>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_read_r+0x1e>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_read_r+0x1e>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	20000c84 	.word	0x20000c84

08008368 <_sbrk_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d06      	ldr	r5, [pc, #24]	@ (8008384 <_sbrk_r+0x1c>)
 800836c:	2300      	movs	r3, #0
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	f7f9 f9be 	bl	80016f4 <_sbrk>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_sbrk_r+0x1a>
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	b103      	cbz	r3, 8008382 <_sbrk_r+0x1a>
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20000c84 	.word	0x20000c84

08008388 <_write_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d07      	ldr	r5, [pc, #28]	@ (80083a8 <_write_r+0x20>)
 800838c:	4604      	mov	r4, r0
 800838e:	4608      	mov	r0, r1
 8008390:	4611      	mov	r1, r2
 8008392:	2200      	movs	r2, #0
 8008394:	602a      	str	r2, [r5, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	f7f9 f936 	bl	8001608 <_write>
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	d102      	bne.n	80083a6 <_write_r+0x1e>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	b103      	cbz	r3, 80083a6 <_write_r+0x1e>
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	20000c84 	.word	0x20000c84

080083ac <__errno>:
 80083ac:	4b01      	ldr	r3, [pc, #4]	@ (80083b4 <__errno+0x8>)
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200008b4 	.word	0x200008b4

080083b8 <__libc_init_array>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	4d0d      	ldr	r5, [pc, #52]	@ (80083f0 <__libc_init_array+0x38>)
 80083bc:	4c0d      	ldr	r4, [pc, #52]	@ (80083f4 <__libc_init_array+0x3c>)
 80083be:	1b64      	subs	r4, r4, r5
 80083c0:	10a4      	asrs	r4, r4, #2
 80083c2:	2600      	movs	r6, #0
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	d109      	bne.n	80083dc <__libc_init_array+0x24>
 80083c8:	4d0b      	ldr	r5, [pc, #44]	@ (80083f8 <__libc_init_array+0x40>)
 80083ca:	4c0c      	ldr	r4, [pc, #48]	@ (80083fc <__libc_init_array+0x44>)
 80083cc:	f002 fc92 	bl	800acf4 <_init>
 80083d0:	1b64      	subs	r4, r4, r5
 80083d2:	10a4      	asrs	r4, r4, #2
 80083d4:	2600      	movs	r6, #0
 80083d6:	42a6      	cmp	r6, r4
 80083d8:	d105      	bne.n	80083e6 <__libc_init_array+0x2e>
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083e0:	4798      	blx	r3
 80083e2:	3601      	adds	r6, #1
 80083e4:	e7ee      	b.n	80083c4 <__libc_init_array+0xc>
 80083e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ea:	4798      	blx	r3
 80083ec:	3601      	adds	r6, #1
 80083ee:	e7f2      	b.n	80083d6 <__libc_init_array+0x1e>
 80083f0:	0800be54 	.word	0x0800be54
 80083f4:	0800be54 	.word	0x0800be54
 80083f8:	0800be54 	.word	0x0800be54
 80083fc:	0800be58 	.word	0x0800be58

08008400 <__retarget_lock_init_recursive>:
 8008400:	4770      	bx	lr

08008402 <__retarget_lock_acquire_recursive>:
 8008402:	4770      	bx	lr

08008404 <__retarget_lock_release_recursive>:
 8008404:	4770      	bx	lr

08008406 <memcpy>:
 8008406:	440a      	add	r2, r1
 8008408:	4291      	cmp	r1, r2
 800840a:	f100 33ff 	add.w	r3, r0, #4294967295
 800840e:	d100      	bne.n	8008412 <memcpy+0xc>
 8008410:	4770      	bx	lr
 8008412:	b510      	push	{r4, lr}
 8008414:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800841c:	4291      	cmp	r1, r2
 800841e:	d1f9      	bne.n	8008414 <memcpy+0xe>
 8008420:	bd10      	pop	{r4, pc}
 8008422:	0000      	movs	r0, r0
 8008424:	0000      	movs	r0, r0
	...

08008428 <nan>:
 8008428:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008430 <nan+0x8>
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	00000000 	.word	0x00000000
 8008434:	7ff80000 	.word	0x7ff80000

08008438 <nanf>:
 8008438:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008440 <nanf+0x8>
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	7fc00000 	.word	0x7fc00000

08008444 <quorem>:
 8008444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	6903      	ldr	r3, [r0, #16]
 800844a:	690c      	ldr	r4, [r1, #16]
 800844c:	42a3      	cmp	r3, r4
 800844e:	4607      	mov	r7, r0
 8008450:	db7e      	blt.n	8008550 <quorem+0x10c>
 8008452:	3c01      	subs	r4, #1
 8008454:	f101 0814 	add.w	r8, r1, #20
 8008458:	00a3      	lsls	r3, r4, #2
 800845a:	f100 0514 	add.w	r5, r0, #20
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800846a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800846e:	3301      	adds	r3, #1
 8008470:	429a      	cmp	r2, r3
 8008472:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008476:	fbb2 f6f3 	udiv	r6, r2, r3
 800847a:	d32e      	bcc.n	80084da <quorem+0x96>
 800847c:	f04f 0a00 	mov.w	sl, #0
 8008480:	46c4      	mov	ip, r8
 8008482:	46ae      	mov	lr, r5
 8008484:	46d3      	mov	fp, sl
 8008486:	f85c 3b04 	ldr.w	r3, [ip], #4
 800848a:	b298      	uxth	r0, r3
 800848c:	fb06 a000 	mla	r0, r6, r0, sl
 8008490:	0c02      	lsrs	r2, r0, #16
 8008492:	0c1b      	lsrs	r3, r3, #16
 8008494:	fb06 2303 	mla	r3, r6, r3, r2
 8008498:	f8de 2000 	ldr.w	r2, [lr]
 800849c:	b280      	uxth	r0, r0
 800849e:	b292      	uxth	r2, r2
 80084a0:	1a12      	subs	r2, r2, r0
 80084a2:	445a      	add	r2, fp
 80084a4:	f8de 0000 	ldr.w	r0, [lr]
 80084a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084b6:	b292      	uxth	r2, r2
 80084b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084bc:	45e1      	cmp	r9, ip
 80084be:	f84e 2b04 	str.w	r2, [lr], #4
 80084c2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084c6:	d2de      	bcs.n	8008486 <quorem+0x42>
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	58eb      	ldr	r3, [r5, r3]
 80084cc:	b92b      	cbnz	r3, 80084da <quorem+0x96>
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	3b04      	subs	r3, #4
 80084d2:	429d      	cmp	r5, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	d32f      	bcc.n	8008538 <quorem+0xf4>
 80084d8:	613c      	str	r4, [r7, #16]
 80084da:	4638      	mov	r0, r7
 80084dc:	f001 fc5e 	bl	8009d9c <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	db25      	blt.n	8008530 <quorem+0xec>
 80084e4:	4629      	mov	r1, r5
 80084e6:	2000      	movs	r0, #0
 80084e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80084ec:	f8d1 c000 	ldr.w	ip, [r1]
 80084f0:	fa1f fe82 	uxth.w	lr, r2
 80084f4:	fa1f f38c 	uxth.w	r3, ip
 80084f8:	eba3 030e 	sub.w	r3, r3, lr
 80084fc:	4403      	add	r3, r0
 80084fe:	0c12      	lsrs	r2, r2, #16
 8008500:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008504:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800850e:	45c1      	cmp	r9, r8
 8008510:	f841 3b04 	str.w	r3, [r1], #4
 8008514:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008518:	d2e6      	bcs.n	80084e8 <quorem+0xa4>
 800851a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800851e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008522:	b922      	cbnz	r2, 800852e <quorem+0xea>
 8008524:	3b04      	subs	r3, #4
 8008526:	429d      	cmp	r5, r3
 8008528:	461a      	mov	r2, r3
 800852a:	d30b      	bcc.n	8008544 <quorem+0x100>
 800852c:	613c      	str	r4, [r7, #16]
 800852e:	3601      	adds	r6, #1
 8008530:	4630      	mov	r0, r6
 8008532:	b003      	add	sp, #12
 8008534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	3b04      	subs	r3, #4
 800853c:	2a00      	cmp	r2, #0
 800853e:	d1cb      	bne.n	80084d8 <quorem+0x94>
 8008540:	3c01      	subs	r4, #1
 8008542:	e7c6      	b.n	80084d2 <quorem+0x8e>
 8008544:	6812      	ldr	r2, [r2, #0]
 8008546:	3b04      	subs	r3, #4
 8008548:	2a00      	cmp	r2, #0
 800854a:	d1ef      	bne.n	800852c <quorem+0xe8>
 800854c:	3c01      	subs	r4, #1
 800854e:	e7ea      	b.n	8008526 <quorem+0xe2>
 8008550:	2000      	movs	r0, #0
 8008552:	e7ee      	b.n	8008532 <quorem+0xee>
 8008554:	0000      	movs	r0, r0
	...

08008558 <_dtoa_r>:
 8008558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855c:	69c7      	ldr	r7, [r0, #28]
 800855e:	b097      	sub	sp, #92	@ 0x5c
 8008560:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008564:	ec55 4b10 	vmov	r4, r5, d0
 8008568:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800856a:	9107      	str	r1, [sp, #28]
 800856c:	4681      	mov	r9, r0
 800856e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008570:	9311      	str	r3, [sp, #68]	@ 0x44
 8008572:	b97f      	cbnz	r7, 8008594 <_dtoa_r+0x3c>
 8008574:	2010      	movs	r0, #16
 8008576:	f7fe f8c5 	bl	8006704 <malloc>
 800857a:	4602      	mov	r2, r0
 800857c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008580:	b920      	cbnz	r0, 800858c <_dtoa_r+0x34>
 8008582:	4ba9      	ldr	r3, [pc, #676]	@ (8008828 <_dtoa_r+0x2d0>)
 8008584:	21ef      	movs	r1, #239	@ 0xef
 8008586:	48a9      	ldr	r0, [pc, #676]	@ (800882c <_dtoa_r+0x2d4>)
 8008588:	f002 f9ee 	bl	800a968 <__assert_func>
 800858c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008590:	6007      	str	r7, [r0, #0]
 8008592:	60c7      	str	r7, [r0, #12]
 8008594:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	b159      	cbz	r1, 80085b4 <_dtoa_r+0x5c>
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	604a      	str	r2, [r1, #4]
 80085a0:	2301      	movs	r3, #1
 80085a2:	4093      	lsls	r3, r2
 80085a4:	608b      	str	r3, [r1, #8]
 80085a6:	4648      	mov	r0, r9
 80085a8:	f001 f97c 	bl	80098a4 <_Bfree>
 80085ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	1e2b      	subs	r3, r5, #0
 80085b6:	bfb9      	ittee	lt
 80085b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085bc:	9305      	strlt	r3, [sp, #20]
 80085be:	2300      	movge	r3, #0
 80085c0:	6033      	strge	r3, [r6, #0]
 80085c2:	9f05      	ldr	r7, [sp, #20]
 80085c4:	4b9a      	ldr	r3, [pc, #616]	@ (8008830 <_dtoa_r+0x2d8>)
 80085c6:	bfbc      	itt	lt
 80085c8:	2201      	movlt	r2, #1
 80085ca:	6032      	strlt	r2, [r6, #0]
 80085cc:	43bb      	bics	r3, r7
 80085ce:	d112      	bne.n	80085f6 <_dtoa_r+0x9e>
 80085d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085dc:	4323      	orrs	r3, r4
 80085de:	f000 855a 	beq.w	8009096 <_dtoa_r+0xb3e>
 80085e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085e4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008844 <_dtoa_r+0x2ec>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 855c 	beq.w	80090a6 <_dtoa_r+0xb4e>
 80085ee:	f10a 0303 	add.w	r3, sl, #3
 80085f2:	f000 bd56 	b.w	80090a2 <_dtoa_r+0xb4a>
 80085f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80085fa:	2200      	movs	r2, #0
 80085fc:	ec51 0b17 	vmov	r0, r1, d7
 8008600:	2300      	movs	r3, #0
 8008602:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008606:	f7f8 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800860a:	4680      	mov	r8, r0
 800860c:	b158      	cbz	r0, 8008626 <_dtoa_r+0xce>
 800860e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008610:	2301      	movs	r3, #1
 8008612:	6013      	str	r3, [r2, #0]
 8008614:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008616:	b113      	cbz	r3, 800861e <_dtoa_r+0xc6>
 8008618:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800861a:	4b86      	ldr	r3, [pc, #536]	@ (8008834 <_dtoa_r+0x2dc>)
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008848 <_dtoa_r+0x2f0>
 8008622:	f000 bd40 	b.w	80090a6 <_dtoa_r+0xb4e>
 8008626:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800862a:	aa14      	add	r2, sp, #80	@ 0x50
 800862c:	a915      	add	r1, sp, #84	@ 0x54
 800862e:	4648      	mov	r0, r9
 8008630:	f001 fcd4 	bl	8009fdc <__d2b>
 8008634:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	2e00      	cmp	r6, #0
 800863c:	d078      	beq.n	8008730 <_dtoa_r+0x1d8>
 800863e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008640:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800864c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008650:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008654:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008658:	4619      	mov	r1, r3
 800865a:	2200      	movs	r2, #0
 800865c:	4b76      	ldr	r3, [pc, #472]	@ (8008838 <_dtoa_r+0x2e0>)
 800865e:	f7f7 fe13 	bl	8000288 <__aeabi_dsub>
 8008662:	a36b      	add	r3, pc, #428	@ (adr r3, 8008810 <_dtoa_r+0x2b8>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f7 ffc6 	bl	80005f8 <__aeabi_dmul>
 800866c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008818 <_dtoa_r+0x2c0>)
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	f7f7 fe0b 	bl	800028c <__adddf3>
 8008676:	4604      	mov	r4, r0
 8008678:	4630      	mov	r0, r6
 800867a:	460d      	mov	r5, r1
 800867c:	f7f7 ff52 	bl	8000524 <__aeabi_i2d>
 8008680:	a367      	add	r3, pc, #412	@ (adr r3, 8008820 <_dtoa_r+0x2c8>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 ffb7 	bl	80005f8 <__aeabi_dmul>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f7 fdfb 	bl	800028c <__adddf3>
 8008696:	4604      	mov	r4, r0
 8008698:	460d      	mov	r5, r1
 800869a:	f7f8 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800869e:	2200      	movs	r2, #0
 80086a0:	4607      	mov	r7, r0
 80086a2:	2300      	movs	r3, #0
 80086a4:	4620      	mov	r0, r4
 80086a6:	4629      	mov	r1, r5
 80086a8:	f7f8 fa18 	bl	8000adc <__aeabi_dcmplt>
 80086ac:	b140      	cbz	r0, 80086c0 <_dtoa_r+0x168>
 80086ae:	4638      	mov	r0, r7
 80086b0:	f7f7 ff38 	bl	8000524 <__aeabi_i2d>
 80086b4:	4622      	mov	r2, r4
 80086b6:	462b      	mov	r3, r5
 80086b8:	f7f8 fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80086bc:	b900      	cbnz	r0, 80086c0 <_dtoa_r+0x168>
 80086be:	3f01      	subs	r7, #1
 80086c0:	2f16      	cmp	r7, #22
 80086c2:	d852      	bhi.n	800876a <_dtoa_r+0x212>
 80086c4:	4b5d      	ldr	r3, [pc, #372]	@ (800883c <_dtoa_r+0x2e4>)
 80086c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086d2:	f7f8 fa03 	bl	8000adc <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d049      	beq.n	800876e <_dtoa_r+0x216>
 80086da:	3f01      	subs	r7, #1
 80086dc:	2300      	movs	r3, #0
 80086de:	9310      	str	r3, [sp, #64]	@ 0x40
 80086e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086e2:	1b9b      	subs	r3, r3, r6
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	bf45      	ittet	mi
 80086e8:	f1c3 0301 	rsbmi	r3, r3, #1
 80086ec:	9300      	strmi	r3, [sp, #0]
 80086ee:	2300      	movpl	r3, #0
 80086f0:	2300      	movmi	r3, #0
 80086f2:	9206      	str	r2, [sp, #24]
 80086f4:	bf54      	ite	pl
 80086f6:	9300      	strpl	r3, [sp, #0]
 80086f8:	9306      	strmi	r3, [sp, #24]
 80086fa:	2f00      	cmp	r7, #0
 80086fc:	db39      	blt.n	8008772 <_dtoa_r+0x21a>
 80086fe:	9b06      	ldr	r3, [sp, #24]
 8008700:	970d      	str	r7, [sp, #52]	@ 0x34
 8008702:	443b      	add	r3, r7
 8008704:	9306      	str	r3, [sp, #24]
 8008706:	2300      	movs	r3, #0
 8008708:	9308      	str	r3, [sp, #32]
 800870a:	9b07      	ldr	r3, [sp, #28]
 800870c:	2b09      	cmp	r3, #9
 800870e:	d863      	bhi.n	80087d8 <_dtoa_r+0x280>
 8008710:	2b05      	cmp	r3, #5
 8008712:	bfc4      	itt	gt
 8008714:	3b04      	subgt	r3, #4
 8008716:	9307      	strgt	r3, [sp, #28]
 8008718:	9b07      	ldr	r3, [sp, #28]
 800871a:	f1a3 0302 	sub.w	r3, r3, #2
 800871e:	bfcc      	ite	gt
 8008720:	2400      	movgt	r4, #0
 8008722:	2401      	movle	r4, #1
 8008724:	2b03      	cmp	r3, #3
 8008726:	d863      	bhi.n	80087f0 <_dtoa_r+0x298>
 8008728:	e8df f003 	tbb	[pc, r3]
 800872c:	2b375452 	.word	0x2b375452
 8008730:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008734:	441e      	add	r6, r3
 8008736:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800873a:	2b20      	cmp	r3, #32
 800873c:	bfc1      	itttt	gt
 800873e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008742:	409f      	lslgt	r7, r3
 8008744:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008748:	fa24 f303 	lsrgt.w	r3, r4, r3
 800874c:	bfd6      	itet	le
 800874e:	f1c3 0320 	rsble	r3, r3, #32
 8008752:	ea47 0003 	orrgt.w	r0, r7, r3
 8008756:	fa04 f003 	lslle.w	r0, r4, r3
 800875a:	f7f7 fed3 	bl	8000504 <__aeabi_ui2d>
 800875e:	2201      	movs	r2, #1
 8008760:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008764:	3e01      	subs	r6, #1
 8008766:	9212      	str	r2, [sp, #72]	@ 0x48
 8008768:	e776      	b.n	8008658 <_dtoa_r+0x100>
 800876a:	2301      	movs	r3, #1
 800876c:	e7b7      	b.n	80086de <_dtoa_r+0x186>
 800876e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008770:	e7b6      	b.n	80086e0 <_dtoa_r+0x188>
 8008772:	9b00      	ldr	r3, [sp, #0]
 8008774:	1bdb      	subs	r3, r3, r7
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	427b      	negs	r3, r7
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	2300      	movs	r3, #0
 800877e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008780:	e7c3      	b.n	800870a <_dtoa_r+0x1b2>
 8008782:	2301      	movs	r3, #1
 8008784:	9309      	str	r3, [sp, #36]	@ 0x24
 8008786:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008788:	eb07 0b03 	add.w	fp, r7, r3
 800878c:	f10b 0301 	add.w	r3, fp, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	9303      	str	r3, [sp, #12]
 8008794:	bfb8      	it	lt
 8008796:	2301      	movlt	r3, #1
 8008798:	e006      	b.n	80087a8 <_dtoa_r+0x250>
 800879a:	2301      	movs	r3, #1
 800879c:	9309      	str	r3, [sp, #36]	@ 0x24
 800879e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dd28      	ble.n	80087f6 <_dtoa_r+0x29e>
 80087a4:	469b      	mov	fp, r3
 80087a6:	9303      	str	r3, [sp, #12]
 80087a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80087ac:	2100      	movs	r1, #0
 80087ae:	2204      	movs	r2, #4
 80087b0:	f102 0514 	add.w	r5, r2, #20
 80087b4:	429d      	cmp	r5, r3
 80087b6:	d926      	bls.n	8008806 <_dtoa_r+0x2ae>
 80087b8:	6041      	str	r1, [r0, #4]
 80087ba:	4648      	mov	r0, r9
 80087bc:	f001 f832 	bl	8009824 <_Balloc>
 80087c0:	4682      	mov	sl, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d142      	bne.n	800884c <_dtoa_r+0x2f4>
 80087c6:	4b1e      	ldr	r3, [pc, #120]	@ (8008840 <_dtoa_r+0x2e8>)
 80087c8:	4602      	mov	r2, r0
 80087ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80087ce:	e6da      	b.n	8008586 <_dtoa_r+0x2e>
 80087d0:	2300      	movs	r3, #0
 80087d2:	e7e3      	b.n	800879c <_dtoa_r+0x244>
 80087d4:	2300      	movs	r3, #0
 80087d6:	e7d5      	b.n	8008784 <_dtoa_r+0x22c>
 80087d8:	2401      	movs	r4, #1
 80087da:	2300      	movs	r3, #0
 80087dc:	9307      	str	r3, [sp, #28]
 80087de:	9409      	str	r4, [sp, #36]	@ 0x24
 80087e0:	f04f 3bff 	mov.w	fp, #4294967295
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8cd b00c 	str.w	fp, [sp, #12]
 80087ea:	2312      	movs	r3, #18
 80087ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80087ee:	e7db      	b.n	80087a8 <_dtoa_r+0x250>
 80087f0:	2301      	movs	r3, #1
 80087f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087f4:	e7f4      	b.n	80087e0 <_dtoa_r+0x288>
 80087f6:	f04f 0b01 	mov.w	fp, #1
 80087fa:	f8cd b00c 	str.w	fp, [sp, #12]
 80087fe:	465b      	mov	r3, fp
 8008800:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008804:	e7d0      	b.n	80087a8 <_dtoa_r+0x250>
 8008806:	3101      	adds	r1, #1
 8008808:	0052      	lsls	r2, r2, #1
 800880a:	e7d1      	b.n	80087b0 <_dtoa_r+0x258>
 800880c:	f3af 8000 	nop.w
 8008810:	636f4361 	.word	0x636f4361
 8008814:	3fd287a7 	.word	0x3fd287a7
 8008818:	8b60c8b3 	.word	0x8b60c8b3
 800881c:	3fc68a28 	.word	0x3fc68a28
 8008820:	509f79fb 	.word	0x509f79fb
 8008824:	3fd34413 	.word	0x3fd34413
 8008828:	0800ba53 	.word	0x0800ba53
 800882c:	0800ba6a 	.word	0x0800ba6a
 8008830:	7ff00000 	.word	0x7ff00000
 8008834:	0800ba1b 	.word	0x0800ba1b
 8008838:	3ff80000 	.word	0x3ff80000
 800883c:	0800bc68 	.word	0x0800bc68
 8008840:	0800bac2 	.word	0x0800bac2
 8008844:	0800ba4f 	.word	0x0800ba4f
 8008848:	0800ba1a 	.word	0x0800ba1a
 800884c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008850:	6018      	str	r0, [r3, #0]
 8008852:	9b03      	ldr	r3, [sp, #12]
 8008854:	2b0e      	cmp	r3, #14
 8008856:	f200 80a1 	bhi.w	800899c <_dtoa_r+0x444>
 800885a:	2c00      	cmp	r4, #0
 800885c:	f000 809e 	beq.w	800899c <_dtoa_r+0x444>
 8008860:	2f00      	cmp	r7, #0
 8008862:	dd33      	ble.n	80088cc <_dtoa_r+0x374>
 8008864:	4b9c      	ldr	r3, [pc, #624]	@ (8008ad8 <_dtoa_r+0x580>)
 8008866:	f007 020f 	and.w	r2, r7, #15
 800886a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800886e:	ed93 7b00 	vldr	d7, [r3]
 8008872:	05f8      	lsls	r0, r7, #23
 8008874:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008878:	ea4f 1427 	mov.w	r4, r7, asr #4
 800887c:	d516      	bpl.n	80088ac <_dtoa_r+0x354>
 800887e:	4b97      	ldr	r3, [pc, #604]	@ (8008adc <_dtoa_r+0x584>)
 8008880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008888:	f7f7 ffe0 	bl	800084c <__aeabi_ddiv>
 800888c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008890:	f004 040f 	and.w	r4, r4, #15
 8008894:	2603      	movs	r6, #3
 8008896:	4d91      	ldr	r5, [pc, #580]	@ (8008adc <_dtoa_r+0x584>)
 8008898:	b954      	cbnz	r4, 80088b0 <_dtoa_r+0x358>
 800889a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800889e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a2:	f7f7 ffd3 	bl	800084c <__aeabi_ddiv>
 80088a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088aa:	e028      	b.n	80088fe <_dtoa_r+0x3a6>
 80088ac:	2602      	movs	r6, #2
 80088ae:	e7f2      	b.n	8008896 <_dtoa_r+0x33e>
 80088b0:	07e1      	lsls	r1, r4, #31
 80088b2:	d508      	bpl.n	80088c6 <_dtoa_r+0x36e>
 80088b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088c4:	3601      	adds	r6, #1
 80088c6:	1064      	asrs	r4, r4, #1
 80088c8:	3508      	adds	r5, #8
 80088ca:	e7e5      	b.n	8008898 <_dtoa_r+0x340>
 80088cc:	f000 80af 	beq.w	8008a2e <_dtoa_r+0x4d6>
 80088d0:	427c      	negs	r4, r7
 80088d2:	4b81      	ldr	r3, [pc, #516]	@ (8008ad8 <_dtoa_r+0x580>)
 80088d4:	4d81      	ldr	r5, [pc, #516]	@ (8008adc <_dtoa_r+0x584>)
 80088d6:	f004 020f 	and.w	r2, r4, #15
 80088da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088e6:	f7f7 fe87 	bl	80005f8 <__aeabi_dmul>
 80088ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088ee:	1124      	asrs	r4, r4, #4
 80088f0:	2300      	movs	r3, #0
 80088f2:	2602      	movs	r6, #2
 80088f4:	2c00      	cmp	r4, #0
 80088f6:	f040 808f 	bne.w	8008a18 <_dtoa_r+0x4c0>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1d3      	bne.n	80088a6 <_dtoa_r+0x34e>
 80088fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008900:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8094 	beq.w	8008a32 <_dtoa_r+0x4da>
 800890a:	4b75      	ldr	r3, [pc, #468]	@ (8008ae0 <_dtoa_r+0x588>)
 800890c:	2200      	movs	r2, #0
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f8e3 	bl	8000adc <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f000 808b 	beq.w	8008a32 <_dtoa_r+0x4da>
 800891c:	9b03      	ldr	r3, [sp, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 8087 	beq.w	8008a32 <_dtoa_r+0x4da>
 8008924:	f1bb 0f00 	cmp.w	fp, #0
 8008928:	dd34      	ble.n	8008994 <_dtoa_r+0x43c>
 800892a:	4620      	mov	r0, r4
 800892c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ae4 <_dtoa_r+0x58c>)
 800892e:	2200      	movs	r2, #0
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fe61 	bl	80005f8 <__aeabi_dmul>
 8008936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800893a:	f107 38ff 	add.w	r8, r7, #4294967295
 800893e:	3601      	adds	r6, #1
 8008940:	465c      	mov	r4, fp
 8008942:	4630      	mov	r0, r6
 8008944:	f7f7 fdee 	bl	8000524 <__aeabi_i2d>
 8008948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894c:	f7f7 fe54 	bl	80005f8 <__aeabi_dmul>
 8008950:	4b65      	ldr	r3, [pc, #404]	@ (8008ae8 <_dtoa_r+0x590>)
 8008952:	2200      	movs	r2, #0
 8008954:	f7f7 fc9a 	bl	800028c <__adddf3>
 8008958:	4605      	mov	r5, r0
 800895a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800895e:	2c00      	cmp	r4, #0
 8008960:	d16a      	bne.n	8008a38 <_dtoa_r+0x4e0>
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	4b61      	ldr	r3, [pc, #388]	@ (8008aec <_dtoa_r+0x594>)
 8008968:	2200      	movs	r2, #0
 800896a:	f7f7 fc8d 	bl	8000288 <__aeabi_dsub>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008976:	462a      	mov	r2, r5
 8008978:	4633      	mov	r3, r6
 800897a:	f7f8 f8cd 	bl	8000b18 <__aeabi_dcmpgt>
 800897e:	2800      	cmp	r0, #0
 8008980:	f040 8298 	bne.w	8008eb4 <_dtoa_r+0x95c>
 8008984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008988:	462a      	mov	r2, r5
 800898a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800898e:	f7f8 f8a5 	bl	8000adc <__aeabi_dcmplt>
 8008992:	bb38      	cbnz	r0, 80089e4 <_dtoa_r+0x48c>
 8008994:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008998:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800899c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f2c0 8157 	blt.w	8008c52 <_dtoa_r+0x6fa>
 80089a4:	2f0e      	cmp	r7, #14
 80089a6:	f300 8154 	bgt.w	8008c52 <_dtoa_r+0x6fa>
 80089aa:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad8 <_dtoa_r+0x580>)
 80089ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089b0:	ed93 7b00 	vldr	d7, [r3]
 80089b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	ed8d 7b00 	vstr	d7, [sp]
 80089bc:	f280 80e5 	bge.w	8008b8a <_dtoa_r+0x632>
 80089c0:	9b03      	ldr	r3, [sp, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f300 80e1 	bgt.w	8008b8a <_dtoa_r+0x632>
 80089c8:	d10c      	bne.n	80089e4 <_dtoa_r+0x48c>
 80089ca:	4b48      	ldr	r3, [pc, #288]	@ (8008aec <_dtoa_r+0x594>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	ec51 0b17 	vmov	r0, r1, d7
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089da:	f7f8 f893 	bl	8000b04 <__aeabi_dcmpge>
 80089de:	2800      	cmp	r0, #0
 80089e0:	f000 8266 	beq.w	8008eb0 <_dtoa_r+0x958>
 80089e4:	2400      	movs	r4, #0
 80089e6:	4625      	mov	r5, r4
 80089e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089ea:	4656      	mov	r6, sl
 80089ec:	ea6f 0803 	mvn.w	r8, r3
 80089f0:	2700      	movs	r7, #0
 80089f2:	4621      	mov	r1, r4
 80089f4:	4648      	mov	r0, r9
 80089f6:	f000 ff55 	bl	80098a4 <_Bfree>
 80089fa:	2d00      	cmp	r5, #0
 80089fc:	f000 80bd 	beq.w	8008b7a <_dtoa_r+0x622>
 8008a00:	b12f      	cbz	r7, 8008a0e <_dtoa_r+0x4b6>
 8008a02:	42af      	cmp	r7, r5
 8008a04:	d003      	beq.n	8008a0e <_dtoa_r+0x4b6>
 8008a06:	4639      	mov	r1, r7
 8008a08:	4648      	mov	r0, r9
 8008a0a:	f000 ff4b 	bl	80098a4 <_Bfree>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 ff47 	bl	80098a4 <_Bfree>
 8008a16:	e0b0      	b.n	8008b7a <_dtoa_r+0x622>
 8008a18:	07e2      	lsls	r2, r4, #31
 8008a1a:	d505      	bpl.n	8008a28 <_dtoa_r+0x4d0>
 8008a1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a20:	f7f7 fdea 	bl	80005f8 <__aeabi_dmul>
 8008a24:	3601      	adds	r6, #1
 8008a26:	2301      	movs	r3, #1
 8008a28:	1064      	asrs	r4, r4, #1
 8008a2a:	3508      	adds	r5, #8
 8008a2c:	e762      	b.n	80088f4 <_dtoa_r+0x39c>
 8008a2e:	2602      	movs	r6, #2
 8008a30:	e765      	b.n	80088fe <_dtoa_r+0x3a6>
 8008a32:	9c03      	ldr	r4, [sp, #12]
 8008a34:	46b8      	mov	r8, r7
 8008a36:	e784      	b.n	8008942 <_dtoa_r+0x3ea>
 8008a38:	4b27      	ldr	r3, [pc, #156]	@ (8008ad8 <_dtoa_r+0x580>)
 8008a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a44:	4454      	add	r4, sl
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d054      	beq.n	8008af4 <_dtoa_r+0x59c>
 8008a4a:	4929      	ldr	r1, [pc, #164]	@ (8008af0 <_dtoa_r+0x598>)
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f7 fefd 	bl	800084c <__aeabi_ddiv>
 8008a52:	4633      	mov	r3, r6
 8008a54:	462a      	mov	r2, r5
 8008a56:	f7f7 fc17 	bl	8000288 <__aeabi_dsub>
 8008a5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a5e:	4656      	mov	r6, sl
 8008a60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a64:	f7f8 f878 	bl	8000b58 <__aeabi_d2iz>
 8008a68:	4605      	mov	r5, r0
 8008a6a:	f7f7 fd5b 	bl	8000524 <__aeabi_i2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a76:	f7f7 fc07 	bl	8000288 <__aeabi_dsub>
 8008a7a:	3530      	adds	r5, #48	@ 0x30
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a84:	f806 5b01 	strb.w	r5, [r6], #1
 8008a88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a8c:	f7f8 f826 	bl	8000adc <__aeabi_dcmplt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d172      	bne.n	8008b7a <_dtoa_r+0x622>
 8008a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a98:	4911      	ldr	r1, [pc, #68]	@ (8008ae0 <_dtoa_r+0x588>)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7f7 fbf4 	bl	8000288 <__aeabi_dsub>
 8008aa0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008aa4:	f7f8 f81a 	bl	8000adc <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 80b4 	bne.w	8008c16 <_dtoa_r+0x6be>
 8008aae:	42a6      	cmp	r6, r4
 8008ab0:	f43f af70 	beq.w	8008994 <_dtoa_r+0x43c>
 8008ab4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae4 <_dtoa_r+0x58c>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	f7f7 fd9c 	bl	80005f8 <__aeabi_dmul>
 8008ac0:	4b08      	ldr	r3, [pc, #32]	@ (8008ae4 <_dtoa_r+0x58c>)
 8008ac2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008acc:	f7f7 fd94 	bl	80005f8 <__aeabi_dmul>
 8008ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad4:	e7c4      	b.n	8008a60 <_dtoa_r+0x508>
 8008ad6:	bf00      	nop
 8008ad8:	0800bc68 	.word	0x0800bc68
 8008adc:	0800bc40 	.word	0x0800bc40
 8008ae0:	3ff00000 	.word	0x3ff00000
 8008ae4:	40240000 	.word	0x40240000
 8008ae8:	401c0000 	.word	0x401c0000
 8008aec:	40140000 	.word	0x40140000
 8008af0:	3fe00000 	.word	0x3fe00000
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	f7f7 fd7e 	bl	80005f8 <__aeabi_dmul>
 8008afc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008b00:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b02:	4656      	mov	r6, sl
 8008b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b08:	f7f8 f826 	bl	8000b58 <__aeabi_d2iz>
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	f7f7 fd09 	bl	8000524 <__aeabi_i2d>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b1a:	f7f7 fbb5 	bl	8000288 <__aeabi_dsub>
 8008b1e:	3530      	adds	r5, #48	@ 0x30
 8008b20:	f806 5b01 	strb.w	r5, [r6], #1
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	42a6      	cmp	r6, r4
 8008b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b2e:	f04f 0200 	mov.w	r2, #0
 8008b32:	d124      	bne.n	8008b7e <_dtoa_r+0x626>
 8008b34:	4baf      	ldr	r3, [pc, #700]	@ (8008df4 <_dtoa_r+0x89c>)
 8008b36:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b3a:	f7f7 fba7 	bl	800028c <__adddf3>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b46:	f7f7 ffe7 	bl	8000b18 <__aeabi_dcmpgt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d163      	bne.n	8008c16 <_dtoa_r+0x6be>
 8008b4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b52:	49a8      	ldr	r1, [pc, #672]	@ (8008df4 <_dtoa_r+0x89c>)
 8008b54:	2000      	movs	r0, #0
 8008b56:	f7f7 fb97 	bl	8000288 <__aeabi_dsub>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b62:	f7f7 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f af14 	beq.w	8008994 <_dtoa_r+0x43c>
 8008b6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b6e:	1e73      	subs	r3, r6, #1
 8008b70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b76:	2b30      	cmp	r3, #48	@ 0x30
 8008b78:	d0f8      	beq.n	8008b6c <_dtoa_r+0x614>
 8008b7a:	4647      	mov	r7, r8
 8008b7c:	e03b      	b.n	8008bf6 <_dtoa_r+0x69e>
 8008b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8008df8 <_dtoa_r+0x8a0>)
 8008b80:	f7f7 fd3a 	bl	80005f8 <__aeabi_dmul>
 8008b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b88:	e7bc      	b.n	8008b04 <_dtoa_r+0x5ac>
 8008b8a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b8e:	4656      	mov	r6, sl
 8008b90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fe58 	bl	800084c <__aeabi_ddiv>
 8008b9c:	f7f7 ffdc 	bl	8000b58 <__aeabi_d2iz>
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	f7f7 fcbf 	bl	8000524 <__aeabi_i2d>
 8008ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008baa:	f7f7 fd25 	bl	80005f8 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008bba:	f7f7 fb65 	bl	8000288 <__aeabi_dsub>
 8008bbe:	f806 4b01 	strb.w	r4, [r6], #1
 8008bc2:	9d03      	ldr	r5, [sp, #12]
 8008bc4:	eba6 040a 	sub.w	r4, r6, sl
 8008bc8:	42a5      	cmp	r5, r4
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	d133      	bne.n	8008c38 <_dtoa_r+0x6e0>
 8008bd0:	f7f7 fb5c 	bl	800028c <__adddf3>
 8008bd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	f7f7 ff9c 	bl	8000b18 <__aeabi_dcmpgt>
 8008be0:	b9c0      	cbnz	r0, 8008c14 <_dtoa_r+0x6bc>
 8008be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	f7f7 ff6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bee:	b110      	cbz	r0, 8008bf6 <_dtoa_r+0x69e>
 8008bf0:	f018 0f01 	tst.w	r8, #1
 8008bf4:	d10e      	bne.n	8008c14 <_dtoa_r+0x6bc>
 8008bf6:	9902      	ldr	r1, [sp, #8]
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f000 fe53 	bl	80098a4 <_Bfree>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	7033      	strb	r3, [r6, #0]
 8008c02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c04:	3701      	adds	r7, #1
 8008c06:	601f      	str	r7, [r3, #0]
 8008c08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 824b 	beq.w	80090a6 <_dtoa_r+0xb4e>
 8008c10:	601e      	str	r6, [r3, #0]
 8008c12:	e248      	b.n	80090a6 <_dtoa_r+0xb4e>
 8008c14:	46b8      	mov	r8, r7
 8008c16:	4633      	mov	r3, r6
 8008c18:	461e      	mov	r6, r3
 8008c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c1e:	2a39      	cmp	r2, #57	@ 0x39
 8008c20:	d106      	bne.n	8008c30 <_dtoa_r+0x6d8>
 8008c22:	459a      	cmp	sl, r3
 8008c24:	d1f8      	bne.n	8008c18 <_dtoa_r+0x6c0>
 8008c26:	2230      	movs	r2, #48	@ 0x30
 8008c28:	f108 0801 	add.w	r8, r8, #1
 8008c2c:	f88a 2000 	strb.w	r2, [sl]
 8008c30:	781a      	ldrb	r2, [r3, #0]
 8008c32:	3201      	adds	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e7a0      	b.n	8008b7a <_dtoa_r+0x622>
 8008c38:	4b6f      	ldr	r3, [pc, #444]	@ (8008df8 <_dtoa_r+0x8a0>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fcdc 	bl	80005f8 <__aeabi_dmul>
 8008c40:	2200      	movs	r2, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	f7f7 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d09f      	beq.n	8008b90 <_dtoa_r+0x638>
 8008c50:	e7d1      	b.n	8008bf6 <_dtoa_r+0x69e>
 8008c52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	f000 80ea 	beq.w	8008e2e <_dtoa_r+0x8d6>
 8008c5a:	9a07      	ldr	r2, [sp, #28]
 8008c5c:	2a01      	cmp	r2, #1
 8008c5e:	f300 80cd 	bgt.w	8008dfc <_dtoa_r+0x8a4>
 8008c62:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	f000 80c1 	beq.w	8008dec <_dtoa_r+0x894>
 8008c6a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c6e:	9c08      	ldr	r4, [sp, #32]
 8008c70:	9e00      	ldr	r6, [sp, #0]
 8008c72:	9a00      	ldr	r2, [sp, #0]
 8008c74:	441a      	add	r2, r3
 8008c76:	9200      	str	r2, [sp, #0]
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	2101      	movs	r1, #1
 8008c7c:	441a      	add	r2, r3
 8008c7e:	4648      	mov	r0, r9
 8008c80:	9206      	str	r2, [sp, #24]
 8008c82:	f000 ff0d 	bl	8009aa0 <__i2b>
 8008c86:	4605      	mov	r5, r0
 8008c88:	b166      	cbz	r6, 8008ca4 <_dtoa_r+0x74c>
 8008c8a:	9b06      	ldr	r3, [sp, #24]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	dd09      	ble.n	8008ca4 <_dtoa_r+0x74c>
 8008c90:	42b3      	cmp	r3, r6
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	bfa8      	it	ge
 8008c96:	4633      	movge	r3, r6
 8008c98:	1ad2      	subs	r2, r2, r3
 8008c9a:	9200      	str	r2, [sp, #0]
 8008c9c:	9a06      	ldr	r2, [sp, #24]
 8008c9e:	1af6      	subs	r6, r6, r3
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	9306      	str	r3, [sp, #24]
 8008ca4:	9b08      	ldr	r3, [sp, #32]
 8008ca6:	b30b      	cbz	r3, 8008cec <_dtoa_r+0x794>
 8008ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 80c6 	beq.w	8008e3c <_dtoa_r+0x8e4>
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f000 80c0 	beq.w	8008e36 <_dtoa_r+0x8de>
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4622      	mov	r2, r4
 8008cba:	4648      	mov	r0, r9
 8008cbc:	f000 ffa8 	bl	8009c10 <__pow5mult>
 8008cc0:	9a02      	ldr	r2, [sp, #8]
 8008cc2:	4601      	mov	r1, r0
 8008cc4:	4605      	mov	r5, r0
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	f000 ff00 	bl	8009acc <__multiply>
 8008ccc:	9902      	ldr	r1, [sp, #8]
 8008cce:	4680      	mov	r8, r0
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	f000 fde7 	bl	80098a4 <_Bfree>
 8008cd6:	9b08      	ldr	r3, [sp, #32]
 8008cd8:	1b1b      	subs	r3, r3, r4
 8008cda:	9308      	str	r3, [sp, #32]
 8008cdc:	f000 80b1 	beq.w	8008e42 <_dtoa_r+0x8ea>
 8008ce0:	9a08      	ldr	r2, [sp, #32]
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	4648      	mov	r0, r9
 8008ce6:	f000 ff93 	bl	8009c10 <__pow5mult>
 8008cea:	9002      	str	r0, [sp, #8]
 8008cec:	2101      	movs	r1, #1
 8008cee:	4648      	mov	r0, r9
 8008cf0:	f000 fed6 	bl	8009aa0 <__i2b>
 8008cf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 81d8 	beq.w	80090ae <_dtoa_r+0xb56>
 8008cfe:	461a      	mov	r2, r3
 8008d00:	4601      	mov	r1, r0
 8008d02:	4648      	mov	r0, r9
 8008d04:	f000 ff84 	bl	8009c10 <__pow5mult>
 8008d08:	9b07      	ldr	r3, [sp, #28]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	f300 809f 	bgt.w	8008e50 <_dtoa_r+0x8f8>
 8008d12:	9b04      	ldr	r3, [sp, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 8097 	bne.w	8008e48 <_dtoa_r+0x8f0>
 8008d1a:	9b05      	ldr	r3, [sp, #20]
 8008d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f040 8093 	bne.w	8008e4c <_dtoa_r+0x8f4>
 8008d26:	9b05      	ldr	r3, [sp, #20]
 8008d28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d2c:	0d1b      	lsrs	r3, r3, #20
 8008d2e:	051b      	lsls	r3, r3, #20
 8008d30:	b133      	cbz	r3, 8008d40 <_dtoa_r+0x7e8>
 8008d32:	9b00      	ldr	r3, [sp, #0]
 8008d34:	3301      	adds	r3, #1
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	9b06      	ldr	r3, [sp, #24]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	9306      	str	r3, [sp, #24]
 8008d3e:	2301      	movs	r3, #1
 8008d40:	9308      	str	r3, [sp, #32]
 8008d42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 81b8 	beq.w	80090ba <_dtoa_r+0xb62>
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d50:	6918      	ldr	r0, [r3, #16]
 8008d52:	f000 fe59 	bl	8009a08 <__hi0bits>
 8008d56:	f1c0 0020 	rsb	r0, r0, #32
 8008d5a:	9b06      	ldr	r3, [sp, #24]
 8008d5c:	4418      	add	r0, r3
 8008d5e:	f010 001f 	ands.w	r0, r0, #31
 8008d62:	f000 8082 	beq.w	8008e6a <_dtoa_r+0x912>
 8008d66:	f1c0 0320 	rsb	r3, r0, #32
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	dd73      	ble.n	8008e56 <_dtoa_r+0x8fe>
 8008d6e:	9b00      	ldr	r3, [sp, #0]
 8008d70:	f1c0 001c 	rsb	r0, r0, #28
 8008d74:	4403      	add	r3, r0
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	9b06      	ldr	r3, [sp, #24]
 8008d7a:	4403      	add	r3, r0
 8008d7c:	4406      	add	r6, r0
 8008d7e:	9306      	str	r3, [sp, #24]
 8008d80:	9b00      	ldr	r3, [sp, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd05      	ble.n	8008d92 <_dtoa_r+0x83a>
 8008d86:	9902      	ldr	r1, [sp, #8]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4648      	mov	r0, r9
 8008d8c:	f000 ff9a 	bl	8009cc4 <__lshift>
 8008d90:	9002      	str	r0, [sp, #8]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dd05      	ble.n	8008da4 <_dtoa_r+0x84c>
 8008d98:	4621      	mov	r1, r4
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	f000 ff91 	bl	8009cc4 <__lshift>
 8008da2:	4604      	mov	r4, r0
 8008da4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d061      	beq.n	8008e6e <_dtoa_r+0x916>
 8008daa:	9802      	ldr	r0, [sp, #8]
 8008dac:	4621      	mov	r1, r4
 8008dae:	f000 fff5 	bl	8009d9c <__mcmp>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	da5b      	bge.n	8008e6e <_dtoa_r+0x916>
 8008db6:	2300      	movs	r3, #0
 8008db8:	9902      	ldr	r1, [sp, #8]
 8008dba:	220a      	movs	r2, #10
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	f000 fd93 	bl	80098e8 <__multadd>
 8008dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc4:	9002      	str	r0, [sp, #8]
 8008dc6:	f107 38ff 	add.w	r8, r7, #4294967295
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 8177 	beq.w	80090be <_dtoa_r+0xb66>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	220a      	movs	r2, #10
 8008dd6:	4648      	mov	r0, r9
 8008dd8:	f000 fd86 	bl	80098e8 <__multadd>
 8008ddc:	f1bb 0f00 	cmp.w	fp, #0
 8008de0:	4605      	mov	r5, r0
 8008de2:	dc6f      	bgt.n	8008ec4 <_dtoa_r+0x96c>
 8008de4:	9b07      	ldr	r3, [sp, #28]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	dc49      	bgt.n	8008e7e <_dtoa_r+0x926>
 8008dea:	e06b      	b.n	8008ec4 <_dtoa_r+0x96c>
 8008dec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008df2:	e73c      	b.n	8008c6e <_dtoa_r+0x716>
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	40240000 	.word	0x40240000
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	1e5c      	subs	r4, r3, #1
 8008e00:	9b08      	ldr	r3, [sp, #32]
 8008e02:	42a3      	cmp	r3, r4
 8008e04:	db09      	blt.n	8008e1a <_dtoa_r+0x8c2>
 8008e06:	1b1c      	subs	r4, r3, r4
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f6bf af30 	bge.w	8008c70 <_dtoa_r+0x718>
 8008e10:	9b00      	ldr	r3, [sp, #0]
 8008e12:	9a03      	ldr	r2, [sp, #12]
 8008e14:	1a9e      	subs	r6, r3, r2
 8008e16:	2300      	movs	r3, #0
 8008e18:	e72b      	b.n	8008c72 <_dtoa_r+0x71a>
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e1e:	9408      	str	r4, [sp, #32]
 8008e20:	1ae3      	subs	r3, r4, r3
 8008e22:	441a      	add	r2, r3
 8008e24:	9e00      	ldr	r6, [sp, #0]
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	e721      	b.n	8008c72 <_dtoa_r+0x71a>
 8008e2e:	9c08      	ldr	r4, [sp, #32]
 8008e30:	9e00      	ldr	r6, [sp, #0]
 8008e32:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e34:	e728      	b.n	8008c88 <_dtoa_r+0x730>
 8008e36:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e3a:	e751      	b.n	8008ce0 <_dtoa_r+0x788>
 8008e3c:	9a08      	ldr	r2, [sp, #32]
 8008e3e:	9902      	ldr	r1, [sp, #8]
 8008e40:	e750      	b.n	8008ce4 <_dtoa_r+0x78c>
 8008e42:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e46:	e751      	b.n	8008cec <_dtoa_r+0x794>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e779      	b.n	8008d40 <_dtoa_r+0x7e8>
 8008e4c:	9b04      	ldr	r3, [sp, #16]
 8008e4e:	e777      	b.n	8008d40 <_dtoa_r+0x7e8>
 8008e50:	2300      	movs	r3, #0
 8008e52:	9308      	str	r3, [sp, #32]
 8008e54:	e779      	b.n	8008d4a <_dtoa_r+0x7f2>
 8008e56:	d093      	beq.n	8008d80 <_dtoa_r+0x828>
 8008e58:	9a00      	ldr	r2, [sp, #0]
 8008e5a:	331c      	adds	r3, #28
 8008e5c:	441a      	add	r2, r3
 8008e5e:	9200      	str	r2, [sp, #0]
 8008e60:	9a06      	ldr	r2, [sp, #24]
 8008e62:	441a      	add	r2, r3
 8008e64:	441e      	add	r6, r3
 8008e66:	9206      	str	r2, [sp, #24]
 8008e68:	e78a      	b.n	8008d80 <_dtoa_r+0x828>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	e7f4      	b.n	8008e58 <_dtoa_r+0x900>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	46b8      	mov	r8, r7
 8008e74:	dc20      	bgt.n	8008eb8 <_dtoa_r+0x960>
 8008e76:	469b      	mov	fp, r3
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	dd1e      	ble.n	8008ebc <_dtoa_r+0x964>
 8008e7e:	f1bb 0f00 	cmp.w	fp, #0
 8008e82:	f47f adb1 	bne.w	80089e8 <_dtoa_r+0x490>
 8008e86:	4621      	mov	r1, r4
 8008e88:	465b      	mov	r3, fp
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	f000 fd2b 	bl	80098e8 <__multadd>
 8008e92:	4601      	mov	r1, r0
 8008e94:	4604      	mov	r4, r0
 8008e96:	9802      	ldr	r0, [sp, #8]
 8008e98:	f000 ff80 	bl	8009d9c <__mcmp>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	f77f ada3 	ble.w	80089e8 <_dtoa_r+0x490>
 8008ea2:	4656      	mov	r6, sl
 8008ea4:	2331      	movs	r3, #49	@ 0x31
 8008ea6:	f806 3b01 	strb.w	r3, [r6], #1
 8008eaa:	f108 0801 	add.w	r8, r8, #1
 8008eae:	e59f      	b.n	80089f0 <_dtoa_r+0x498>
 8008eb0:	9c03      	ldr	r4, [sp, #12]
 8008eb2:	46b8      	mov	r8, r7
 8008eb4:	4625      	mov	r5, r4
 8008eb6:	e7f4      	b.n	8008ea2 <_dtoa_r+0x94a>
 8008eb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f000 8101 	beq.w	80090c6 <_dtoa_r+0xb6e>
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	dd05      	ble.n	8008ed4 <_dtoa_r+0x97c>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4632      	mov	r2, r6
 8008ecc:	4648      	mov	r0, r9
 8008ece:	f000 fef9 	bl	8009cc4 <__lshift>
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	9b08      	ldr	r3, [sp, #32]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d05c      	beq.n	8008f94 <_dtoa_r+0xa3c>
 8008eda:	6869      	ldr	r1, [r5, #4]
 8008edc:	4648      	mov	r0, r9
 8008ede:	f000 fca1 	bl	8009824 <_Balloc>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	b928      	cbnz	r0, 8008ef2 <_dtoa_r+0x99a>
 8008ee6:	4b82      	ldr	r3, [pc, #520]	@ (80090f0 <_dtoa_r+0xb98>)
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008eee:	f7ff bb4a 	b.w	8008586 <_dtoa_r+0x2e>
 8008ef2:	692a      	ldr	r2, [r5, #16]
 8008ef4:	3202      	adds	r2, #2
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	f105 010c 	add.w	r1, r5, #12
 8008efc:	300c      	adds	r0, #12
 8008efe:	f7ff fa82 	bl	8008406 <memcpy>
 8008f02:	2201      	movs	r2, #1
 8008f04:	4631      	mov	r1, r6
 8008f06:	4648      	mov	r0, r9
 8008f08:	f000 fedc 	bl	8009cc4 <__lshift>
 8008f0c:	f10a 0301 	add.w	r3, sl, #1
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	eb0a 030b 	add.w	r3, sl, fp
 8008f16:	9308      	str	r3, [sp, #32]
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	462f      	mov	r7, r5
 8008f20:	9306      	str	r3, [sp, #24]
 8008f22:	4605      	mov	r5, r0
 8008f24:	9b00      	ldr	r3, [sp, #0]
 8008f26:	9802      	ldr	r0, [sp, #8]
 8008f28:	4621      	mov	r1, r4
 8008f2a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008f2e:	f7ff fa89 	bl	8008444 <quorem>
 8008f32:	4603      	mov	r3, r0
 8008f34:	3330      	adds	r3, #48	@ 0x30
 8008f36:	9003      	str	r0, [sp, #12]
 8008f38:	4639      	mov	r1, r7
 8008f3a:	9802      	ldr	r0, [sp, #8]
 8008f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3e:	f000 ff2d 	bl	8009d9c <__mcmp>
 8008f42:	462a      	mov	r2, r5
 8008f44:	9004      	str	r0, [sp, #16]
 8008f46:	4621      	mov	r1, r4
 8008f48:	4648      	mov	r0, r9
 8008f4a:	f000 ff43 	bl	8009dd4 <__mdiff>
 8008f4e:	68c2      	ldr	r2, [r0, #12]
 8008f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f52:	4606      	mov	r6, r0
 8008f54:	bb02      	cbnz	r2, 8008f98 <_dtoa_r+0xa40>
 8008f56:	4601      	mov	r1, r0
 8008f58:	9802      	ldr	r0, [sp, #8]
 8008f5a:	f000 ff1f 	bl	8009d9c <__mcmp>
 8008f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f60:	4602      	mov	r2, r0
 8008f62:	4631      	mov	r1, r6
 8008f64:	4648      	mov	r0, r9
 8008f66:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6a:	f000 fc9b 	bl	80098a4 <_Bfree>
 8008f6e:	9b07      	ldr	r3, [sp, #28]
 8008f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f72:	9e00      	ldr	r6, [sp, #0]
 8008f74:	ea42 0103 	orr.w	r1, r2, r3
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	4319      	orrs	r1, r3
 8008f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7e:	d10d      	bne.n	8008f9c <_dtoa_r+0xa44>
 8008f80:	2b39      	cmp	r3, #57	@ 0x39
 8008f82:	d027      	beq.n	8008fd4 <_dtoa_r+0xa7c>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	dd01      	ble.n	8008f8e <_dtoa_r+0xa36>
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	3331      	adds	r3, #49	@ 0x31
 8008f8e:	f88b 3000 	strb.w	r3, [fp]
 8008f92:	e52e      	b.n	80089f2 <_dtoa_r+0x49a>
 8008f94:	4628      	mov	r0, r5
 8008f96:	e7b9      	b.n	8008f0c <_dtoa_r+0x9b4>
 8008f98:	2201      	movs	r2, #1
 8008f9a:	e7e2      	b.n	8008f62 <_dtoa_r+0xa0a>
 8008f9c:	9904      	ldr	r1, [sp, #16]
 8008f9e:	2900      	cmp	r1, #0
 8008fa0:	db04      	blt.n	8008fac <_dtoa_r+0xa54>
 8008fa2:	9807      	ldr	r0, [sp, #28]
 8008fa4:	4301      	orrs	r1, r0
 8008fa6:	9806      	ldr	r0, [sp, #24]
 8008fa8:	4301      	orrs	r1, r0
 8008faa:	d120      	bne.n	8008fee <_dtoa_r+0xa96>
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	ddee      	ble.n	8008f8e <_dtoa_r+0xa36>
 8008fb0:	9902      	ldr	r1, [sp, #8]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	4648      	mov	r0, r9
 8008fb8:	f000 fe84 	bl	8009cc4 <__lshift>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	9002      	str	r0, [sp, #8]
 8008fc0:	f000 feec 	bl	8009d9c <__mcmp>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	9b00      	ldr	r3, [sp, #0]
 8008fc8:	dc02      	bgt.n	8008fd0 <_dtoa_r+0xa78>
 8008fca:	d1e0      	bne.n	8008f8e <_dtoa_r+0xa36>
 8008fcc:	07da      	lsls	r2, r3, #31
 8008fce:	d5de      	bpl.n	8008f8e <_dtoa_r+0xa36>
 8008fd0:	2b39      	cmp	r3, #57	@ 0x39
 8008fd2:	d1da      	bne.n	8008f8a <_dtoa_r+0xa32>
 8008fd4:	2339      	movs	r3, #57	@ 0x39
 8008fd6:	f88b 3000 	strb.w	r3, [fp]
 8008fda:	4633      	mov	r3, r6
 8008fdc:	461e      	mov	r6, r3
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fe4:	2a39      	cmp	r2, #57	@ 0x39
 8008fe6:	d04e      	beq.n	8009086 <_dtoa_r+0xb2e>
 8008fe8:	3201      	adds	r2, #1
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	e501      	b.n	80089f2 <_dtoa_r+0x49a>
 8008fee:	2a00      	cmp	r2, #0
 8008ff0:	dd03      	ble.n	8008ffa <_dtoa_r+0xaa2>
 8008ff2:	2b39      	cmp	r3, #57	@ 0x39
 8008ff4:	d0ee      	beq.n	8008fd4 <_dtoa_r+0xa7c>
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	e7c9      	b.n	8008f8e <_dtoa_r+0xa36>
 8008ffa:	9a00      	ldr	r2, [sp, #0]
 8008ffc:	9908      	ldr	r1, [sp, #32]
 8008ffe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009002:	428a      	cmp	r2, r1
 8009004:	d028      	beq.n	8009058 <_dtoa_r+0xb00>
 8009006:	9902      	ldr	r1, [sp, #8]
 8009008:	2300      	movs	r3, #0
 800900a:	220a      	movs	r2, #10
 800900c:	4648      	mov	r0, r9
 800900e:	f000 fc6b 	bl	80098e8 <__multadd>
 8009012:	42af      	cmp	r7, r5
 8009014:	9002      	str	r0, [sp, #8]
 8009016:	f04f 0300 	mov.w	r3, #0
 800901a:	f04f 020a 	mov.w	r2, #10
 800901e:	4639      	mov	r1, r7
 8009020:	4648      	mov	r0, r9
 8009022:	d107      	bne.n	8009034 <_dtoa_r+0xadc>
 8009024:	f000 fc60 	bl	80098e8 <__multadd>
 8009028:	4607      	mov	r7, r0
 800902a:	4605      	mov	r5, r0
 800902c:	9b00      	ldr	r3, [sp, #0]
 800902e:	3301      	adds	r3, #1
 8009030:	9300      	str	r3, [sp, #0]
 8009032:	e777      	b.n	8008f24 <_dtoa_r+0x9cc>
 8009034:	f000 fc58 	bl	80098e8 <__multadd>
 8009038:	4629      	mov	r1, r5
 800903a:	4607      	mov	r7, r0
 800903c:	2300      	movs	r3, #0
 800903e:	220a      	movs	r2, #10
 8009040:	4648      	mov	r0, r9
 8009042:	f000 fc51 	bl	80098e8 <__multadd>
 8009046:	4605      	mov	r5, r0
 8009048:	e7f0      	b.n	800902c <_dtoa_r+0xad4>
 800904a:	f1bb 0f00 	cmp.w	fp, #0
 800904e:	bfcc      	ite	gt
 8009050:	465e      	movgt	r6, fp
 8009052:	2601      	movle	r6, #1
 8009054:	4456      	add	r6, sl
 8009056:	2700      	movs	r7, #0
 8009058:	9902      	ldr	r1, [sp, #8]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	2201      	movs	r2, #1
 800905e:	4648      	mov	r0, r9
 8009060:	f000 fe30 	bl	8009cc4 <__lshift>
 8009064:	4621      	mov	r1, r4
 8009066:	9002      	str	r0, [sp, #8]
 8009068:	f000 fe98 	bl	8009d9c <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	dcb4      	bgt.n	8008fda <_dtoa_r+0xa82>
 8009070:	d102      	bne.n	8009078 <_dtoa_r+0xb20>
 8009072:	9b00      	ldr	r3, [sp, #0]
 8009074:	07db      	lsls	r3, r3, #31
 8009076:	d4b0      	bmi.n	8008fda <_dtoa_r+0xa82>
 8009078:	4633      	mov	r3, r6
 800907a:	461e      	mov	r6, r3
 800907c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009080:	2a30      	cmp	r2, #48	@ 0x30
 8009082:	d0fa      	beq.n	800907a <_dtoa_r+0xb22>
 8009084:	e4b5      	b.n	80089f2 <_dtoa_r+0x49a>
 8009086:	459a      	cmp	sl, r3
 8009088:	d1a8      	bne.n	8008fdc <_dtoa_r+0xa84>
 800908a:	2331      	movs	r3, #49	@ 0x31
 800908c:	f108 0801 	add.w	r8, r8, #1
 8009090:	f88a 3000 	strb.w	r3, [sl]
 8009094:	e4ad      	b.n	80089f2 <_dtoa_r+0x49a>
 8009096:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009098:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80090f4 <_dtoa_r+0xb9c>
 800909c:	b11b      	cbz	r3, 80090a6 <_dtoa_r+0xb4e>
 800909e:	f10a 0308 	add.w	r3, sl, #8
 80090a2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	4650      	mov	r0, sl
 80090a8:	b017      	add	sp, #92	@ 0x5c
 80090aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ae:	9b07      	ldr	r3, [sp, #28]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	f77f ae2e 	ble.w	8008d12 <_dtoa_r+0x7ba>
 80090b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	2001      	movs	r0, #1
 80090bc:	e64d      	b.n	8008d5a <_dtoa_r+0x802>
 80090be:	f1bb 0f00 	cmp.w	fp, #0
 80090c2:	f77f aed9 	ble.w	8008e78 <_dtoa_r+0x920>
 80090c6:	4656      	mov	r6, sl
 80090c8:	9802      	ldr	r0, [sp, #8]
 80090ca:	4621      	mov	r1, r4
 80090cc:	f7ff f9ba 	bl	8008444 <quorem>
 80090d0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80090d4:	f806 3b01 	strb.w	r3, [r6], #1
 80090d8:	eba6 020a 	sub.w	r2, r6, sl
 80090dc:	4593      	cmp	fp, r2
 80090de:	ddb4      	ble.n	800904a <_dtoa_r+0xaf2>
 80090e0:	9902      	ldr	r1, [sp, #8]
 80090e2:	2300      	movs	r3, #0
 80090e4:	220a      	movs	r2, #10
 80090e6:	4648      	mov	r0, r9
 80090e8:	f000 fbfe 	bl	80098e8 <__multadd>
 80090ec:	9002      	str	r0, [sp, #8]
 80090ee:	e7eb      	b.n	80090c8 <_dtoa_r+0xb70>
 80090f0:	0800bac2 	.word	0x0800bac2
 80090f4:	0800ba46 	.word	0x0800ba46

080090f8 <_free_r>:
 80090f8:	b538      	push	{r3, r4, r5, lr}
 80090fa:	4605      	mov	r5, r0
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d041      	beq.n	8009184 <_free_r+0x8c>
 8009100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009104:	1f0c      	subs	r4, r1, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	bfb8      	it	lt
 800910a:	18e4      	addlt	r4, r4, r3
 800910c:	f7fd fba4 	bl	8006858 <__malloc_lock>
 8009110:	4a1d      	ldr	r2, [pc, #116]	@ (8009188 <_free_r+0x90>)
 8009112:	6813      	ldr	r3, [r2, #0]
 8009114:	b933      	cbnz	r3, 8009124 <_free_r+0x2c>
 8009116:	6063      	str	r3, [r4, #4]
 8009118:	6014      	str	r4, [r2, #0]
 800911a:	4628      	mov	r0, r5
 800911c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009120:	f7fd bba0 	b.w	8006864 <__malloc_unlock>
 8009124:	42a3      	cmp	r3, r4
 8009126:	d908      	bls.n	800913a <_free_r+0x42>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	1821      	adds	r1, r4, r0
 800912c:	428b      	cmp	r3, r1
 800912e:	bf01      	itttt	eq
 8009130:	6819      	ldreq	r1, [r3, #0]
 8009132:	685b      	ldreq	r3, [r3, #4]
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	e7ed      	b.n	8009116 <_free_r+0x1e>
 800913a:	461a      	mov	r2, r3
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b10b      	cbz	r3, 8009144 <_free_r+0x4c>
 8009140:	42a3      	cmp	r3, r4
 8009142:	d9fa      	bls.n	800913a <_free_r+0x42>
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	1850      	adds	r0, r2, r1
 8009148:	42a0      	cmp	r0, r4
 800914a:	d10b      	bne.n	8009164 <_free_r+0x6c>
 800914c:	6820      	ldr	r0, [r4, #0]
 800914e:	4401      	add	r1, r0
 8009150:	1850      	adds	r0, r2, r1
 8009152:	4283      	cmp	r3, r0
 8009154:	6011      	str	r1, [r2, #0]
 8009156:	d1e0      	bne.n	800911a <_free_r+0x22>
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	6053      	str	r3, [r2, #4]
 800915e:	4408      	add	r0, r1
 8009160:	6010      	str	r0, [r2, #0]
 8009162:	e7da      	b.n	800911a <_free_r+0x22>
 8009164:	d902      	bls.n	800916c <_free_r+0x74>
 8009166:	230c      	movs	r3, #12
 8009168:	602b      	str	r3, [r5, #0]
 800916a:	e7d6      	b.n	800911a <_free_r+0x22>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	1821      	adds	r1, r4, r0
 8009170:	428b      	cmp	r3, r1
 8009172:	bf04      	itt	eq
 8009174:	6819      	ldreq	r1, [r3, #0]
 8009176:	685b      	ldreq	r3, [r3, #4]
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	bf04      	itt	eq
 800917c:	1809      	addeq	r1, r1, r0
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	6054      	str	r4, [r2, #4]
 8009182:	e7ca      	b.n	800911a <_free_r+0x22>
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20000b44 	.word	0x20000b44

0800918c <rshift>:
 800918c:	6903      	ldr	r3, [r0, #16]
 800918e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009192:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009196:	ea4f 1261 	mov.w	r2, r1, asr #5
 800919a:	f100 0414 	add.w	r4, r0, #20
 800919e:	dd45      	ble.n	800922c <rshift+0xa0>
 80091a0:	f011 011f 	ands.w	r1, r1, #31
 80091a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091ac:	d10c      	bne.n	80091c8 <rshift+0x3c>
 80091ae:	f100 0710 	add.w	r7, r0, #16
 80091b2:	4629      	mov	r1, r5
 80091b4:	42b1      	cmp	r1, r6
 80091b6:	d334      	bcc.n	8009222 <rshift+0x96>
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	1eea      	subs	r2, r5, #3
 80091be:	4296      	cmp	r6, r2
 80091c0:	bf38      	it	cc
 80091c2:	2300      	movcc	r3, #0
 80091c4:	4423      	add	r3, r4
 80091c6:	e015      	b.n	80091f4 <rshift+0x68>
 80091c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091cc:	f1c1 0820 	rsb	r8, r1, #32
 80091d0:	40cf      	lsrs	r7, r1
 80091d2:	f105 0e04 	add.w	lr, r5, #4
 80091d6:	46a1      	mov	r9, r4
 80091d8:	4576      	cmp	r6, lr
 80091da:	46f4      	mov	ip, lr
 80091dc:	d815      	bhi.n	800920a <rshift+0x7e>
 80091de:	1a9a      	subs	r2, r3, r2
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	3a04      	subs	r2, #4
 80091e4:	3501      	adds	r5, #1
 80091e6:	42ae      	cmp	r6, r5
 80091e8:	bf38      	it	cc
 80091ea:	2200      	movcc	r2, #0
 80091ec:	18a3      	adds	r3, r4, r2
 80091ee:	50a7      	str	r7, [r4, r2]
 80091f0:	b107      	cbz	r7, 80091f4 <rshift+0x68>
 80091f2:	3304      	adds	r3, #4
 80091f4:	1b1a      	subs	r2, r3, r4
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091fc:	bf08      	it	eq
 80091fe:	2300      	moveq	r3, #0
 8009200:	6102      	str	r2, [r0, #16]
 8009202:	bf08      	it	eq
 8009204:	6143      	streq	r3, [r0, #20]
 8009206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800920a:	f8dc c000 	ldr.w	ip, [ip]
 800920e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009212:	ea4c 0707 	orr.w	r7, ip, r7
 8009216:	f849 7b04 	str.w	r7, [r9], #4
 800921a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800921e:	40cf      	lsrs	r7, r1
 8009220:	e7da      	b.n	80091d8 <rshift+0x4c>
 8009222:	f851 cb04 	ldr.w	ip, [r1], #4
 8009226:	f847 cf04 	str.w	ip, [r7, #4]!
 800922a:	e7c3      	b.n	80091b4 <rshift+0x28>
 800922c:	4623      	mov	r3, r4
 800922e:	e7e1      	b.n	80091f4 <rshift+0x68>

08009230 <__hexdig_fun>:
 8009230:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009234:	2b09      	cmp	r3, #9
 8009236:	d802      	bhi.n	800923e <__hexdig_fun+0xe>
 8009238:	3820      	subs	r0, #32
 800923a:	b2c0      	uxtb	r0, r0
 800923c:	4770      	bx	lr
 800923e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009242:	2b05      	cmp	r3, #5
 8009244:	d801      	bhi.n	800924a <__hexdig_fun+0x1a>
 8009246:	3847      	subs	r0, #71	@ 0x47
 8009248:	e7f7      	b.n	800923a <__hexdig_fun+0xa>
 800924a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800924e:	2b05      	cmp	r3, #5
 8009250:	d801      	bhi.n	8009256 <__hexdig_fun+0x26>
 8009252:	3827      	subs	r0, #39	@ 0x27
 8009254:	e7f1      	b.n	800923a <__hexdig_fun+0xa>
 8009256:	2000      	movs	r0, #0
 8009258:	4770      	bx	lr
	...

0800925c <__gethex>:
 800925c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009260:	b085      	sub	sp, #20
 8009262:	468a      	mov	sl, r1
 8009264:	9302      	str	r3, [sp, #8]
 8009266:	680b      	ldr	r3, [r1, #0]
 8009268:	9001      	str	r0, [sp, #4]
 800926a:	4690      	mov	r8, r2
 800926c:	1c9c      	adds	r4, r3, #2
 800926e:	46a1      	mov	r9, r4
 8009270:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009274:	2830      	cmp	r0, #48	@ 0x30
 8009276:	d0fa      	beq.n	800926e <__gethex+0x12>
 8009278:	eba9 0303 	sub.w	r3, r9, r3
 800927c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009280:	f7ff ffd6 	bl	8009230 <__hexdig_fun>
 8009284:	4605      	mov	r5, r0
 8009286:	2800      	cmp	r0, #0
 8009288:	d168      	bne.n	800935c <__gethex+0x100>
 800928a:	49a0      	ldr	r1, [pc, #640]	@ (800950c <__gethex+0x2b0>)
 800928c:	2201      	movs	r2, #1
 800928e:	4648      	mov	r0, r9
 8009290:	f7ff f820 	bl	80082d4 <strncmp>
 8009294:	4607      	mov	r7, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	d167      	bne.n	800936a <__gethex+0x10e>
 800929a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800929e:	4626      	mov	r6, r4
 80092a0:	f7ff ffc6 	bl	8009230 <__hexdig_fun>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d062      	beq.n	800936e <__gethex+0x112>
 80092a8:	4623      	mov	r3, r4
 80092aa:	7818      	ldrb	r0, [r3, #0]
 80092ac:	2830      	cmp	r0, #48	@ 0x30
 80092ae:	4699      	mov	r9, r3
 80092b0:	f103 0301 	add.w	r3, r3, #1
 80092b4:	d0f9      	beq.n	80092aa <__gethex+0x4e>
 80092b6:	f7ff ffbb 	bl	8009230 <__hexdig_fun>
 80092ba:	fab0 f580 	clz	r5, r0
 80092be:	096d      	lsrs	r5, r5, #5
 80092c0:	f04f 0b01 	mov.w	fp, #1
 80092c4:	464a      	mov	r2, r9
 80092c6:	4616      	mov	r6, r2
 80092c8:	3201      	adds	r2, #1
 80092ca:	7830      	ldrb	r0, [r6, #0]
 80092cc:	f7ff ffb0 	bl	8009230 <__hexdig_fun>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1f8      	bne.n	80092c6 <__gethex+0x6a>
 80092d4:	498d      	ldr	r1, [pc, #564]	@ (800950c <__gethex+0x2b0>)
 80092d6:	2201      	movs	r2, #1
 80092d8:	4630      	mov	r0, r6
 80092da:	f7fe fffb 	bl	80082d4 <strncmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d13f      	bne.n	8009362 <__gethex+0x106>
 80092e2:	b944      	cbnz	r4, 80092f6 <__gethex+0x9a>
 80092e4:	1c74      	adds	r4, r6, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4616      	mov	r6, r2
 80092ea:	3201      	adds	r2, #1
 80092ec:	7830      	ldrb	r0, [r6, #0]
 80092ee:	f7ff ff9f 	bl	8009230 <__hexdig_fun>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d1f8      	bne.n	80092e8 <__gethex+0x8c>
 80092f6:	1ba4      	subs	r4, r4, r6
 80092f8:	00a7      	lsls	r7, r4, #2
 80092fa:	7833      	ldrb	r3, [r6, #0]
 80092fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009300:	2b50      	cmp	r3, #80	@ 0x50
 8009302:	d13e      	bne.n	8009382 <__gethex+0x126>
 8009304:	7873      	ldrb	r3, [r6, #1]
 8009306:	2b2b      	cmp	r3, #43	@ 0x2b
 8009308:	d033      	beq.n	8009372 <__gethex+0x116>
 800930a:	2b2d      	cmp	r3, #45	@ 0x2d
 800930c:	d034      	beq.n	8009378 <__gethex+0x11c>
 800930e:	1c71      	adds	r1, r6, #1
 8009310:	2400      	movs	r4, #0
 8009312:	7808      	ldrb	r0, [r1, #0]
 8009314:	f7ff ff8c 	bl	8009230 <__hexdig_fun>
 8009318:	1e43      	subs	r3, r0, #1
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b18      	cmp	r3, #24
 800931e:	d830      	bhi.n	8009382 <__gethex+0x126>
 8009320:	f1a0 0210 	sub.w	r2, r0, #16
 8009324:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009328:	f7ff ff82 	bl	8009230 <__hexdig_fun>
 800932c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009330:	fa5f fc8c 	uxtb.w	ip, ip
 8009334:	f1bc 0f18 	cmp.w	ip, #24
 8009338:	f04f 030a 	mov.w	r3, #10
 800933c:	d91e      	bls.n	800937c <__gethex+0x120>
 800933e:	b104      	cbz	r4, 8009342 <__gethex+0xe6>
 8009340:	4252      	negs	r2, r2
 8009342:	4417      	add	r7, r2
 8009344:	f8ca 1000 	str.w	r1, [sl]
 8009348:	b1ed      	cbz	r5, 8009386 <__gethex+0x12a>
 800934a:	f1bb 0f00 	cmp.w	fp, #0
 800934e:	bf0c      	ite	eq
 8009350:	2506      	moveq	r5, #6
 8009352:	2500      	movne	r5, #0
 8009354:	4628      	mov	r0, r5
 8009356:	b005      	add	sp, #20
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	2500      	movs	r5, #0
 800935e:	462c      	mov	r4, r5
 8009360:	e7b0      	b.n	80092c4 <__gethex+0x68>
 8009362:	2c00      	cmp	r4, #0
 8009364:	d1c7      	bne.n	80092f6 <__gethex+0x9a>
 8009366:	4627      	mov	r7, r4
 8009368:	e7c7      	b.n	80092fa <__gethex+0x9e>
 800936a:	464e      	mov	r6, r9
 800936c:	462f      	mov	r7, r5
 800936e:	2501      	movs	r5, #1
 8009370:	e7c3      	b.n	80092fa <__gethex+0x9e>
 8009372:	2400      	movs	r4, #0
 8009374:	1cb1      	adds	r1, r6, #2
 8009376:	e7cc      	b.n	8009312 <__gethex+0xb6>
 8009378:	2401      	movs	r4, #1
 800937a:	e7fb      	b.n	8009374 <__gethex+0x118>
 800937c:	fb03 0002 	mla	r0, r3, r2, r0
 8009380:	e7ce      	b.n	8009320 <__gethex+0xc4>
 8009382:	4631      	mov	r1, r6
 8009384:	e7de      	b.n	8009344 <__gethex+0xe8>
 8009386:	eba6 0309 	sub.w	r3, r6, r9
 800938a:	3b01      	subs	r3, #1
 800938c:	4629      	mov	r1, r5
 800938e:	2b07      	cmp	r3, #7
 8009390:	dc0a      	bgt.n	80093a8 <__gethex+0x14c>
 8009392:	9801      	ldr	r0, [sp, #4]
 8009394:	f000 fa46 	bl	8009824 <_Balloc>
 8009398:	4604      	mov	r4, r0
 800939a:	b940      	cbnz	r0, 80093ae <__gethex+0x152>
 800939c:	4b5c      	ldr	r3, [pc, #368]	@ (8009510 <__gethex+0x2b4>)
 800939e:	4602      	mov	r2, r0
 80093a0:	21e4      	movs	r1, #228	@ 0xe4
 80093a2:	485c      	ldr	r0, [pc, #368]	@ (8009514 <__gethex+0x2b8>)
 80093a4:	f001 fae0 	bl	800a968 <__assert_func>
 80093a8:	3101      	adds	r1, #1
 80093aa:	105b      	asrs	r3, r3, #1
 80093ac:	e7ef      	b.n	800938e <__gethex+0x132>
 80093ae:	f100 0a14 	add.w	sl, r0, #20
 80093b2:	2300      	movs	r3, #0
 80093b4:	4655      	mov	r5, sl
 80093b6:	469b      	mov	fp, r3
 80093b8:	45b1      	cmp	r9, r6
 80093ba:	d337      	bcc.n	800942c <__gethex+0x1d0>
 80093bc:	f845 bb04 	str.w	fp, [r5], #4
 80093c0:	eba5 050a 	sub.w	r5, r5, sl
 80093c4:	10ad      	asrs	r5, r5, #2
 80093c6:	6125      	str	r5, [r4, #16]
 80093c8:	4658      	mov	r0, fp
 80093ca:	f000 fb1d 	bl	8009a08 <__hi0bits>
 80093ce:	016d      	lsls	r5, r5, #5
 80093d0:	f8d8 6000 	ldr.w	r6, [r8]
 80093d4:	1a2d      	subs	r5, r5, r0
 80093d6:	42b5      	cmp	r5, r6
 80093d8:	dd54      	ble.n	8009484 <__gethex+0x228>
 80093da:	1bad      	subs	r5, r5, r6
 80093dc:	4629      	mov	r1, r5
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fea9 	bl	800a136 <__any_on>
 80093e4:	4681      	mov	r9, r0
 80093e6:	b178      	cbz	r0, 8009408 <__gethex+0x1ac>
 80093e8:	1e6b      	subs	r3, r5, #1
 80093ea:	1159      	asrs	r1, r3, #5
 80093ec:	f003 021f 	and.w	r2, r3, #31
 80093f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093f4:	f04f 0901 	mov.w	r9, #1
 80093f8:	fa09 f202 	lsl.w	r2, r9, r2
 80093fc:	420a      	tst	r2, r1
 80093fe:	d003      	beq.n	8009408 <__gethex+0x1ac>
 8009400:	454b      	cmp	r3, r9
 8009402:	dc36      	bgt.n	8009472 <__gethex+0x216>
 8009404:	f04f 0902 	mov.w	r9, #2
 8009408:	4629      	mov	r1, r5
 800940a:	4620      	mov	r0, r4
 800940c:	f7ff febe 	bl	800918c <rshift>
 8009410:	442f      	add	r7, r5
 8009412:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009416:	42bb      	cmp	r3, r7
 8009418:	da42      	bge.n	80094a0 <__gethex+0x244>
 800941a:	9801      	ldr	r0, [sp, #4]
 800941c:	4621      	mov	r1, r4
 800941e:	f000 fa41 	bl	80098a4 <_Bfree>
 8009422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009424:	2300      	movs	r3, #0
 8009426:	6013      	str	r3, [r2, #0]
 8009428:	25a3      	movs	r5, #163	@ 0xa3
 800942a:	e793      	b.n	8009354 <__gethex+0xf8>
 800942c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009430:	2a2e      	cmp	r2, #46	@ 0x2e
 8009432:	d012      	beq.n	800945a <__gethex+0x1fe>
 8009434:	2b20      	cmp	r3, #32
 8009436:	d104      	bne.n	8009442 <__gethex+0x1e6>
 8009438:	f845 bb04 	str.w	fp, [r5], #4
 800943c:	f04f 0b00 	mov.w	fp, #0
 8009440:	465b      	mov	r3, fp
 8009442:	7830      	ldrb	r0, [r6, #0]
 8009444:	9303      	str	r3, [sp, #12]
 8009446:	f7ff fef3 	bl	8009230 <__hexdig_fun>
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	f000 000f 	and.w	r0, r0, #15
 8009450:	4098      	lsls	r0, r3
 8009452:	ea4b 0b00 	orr.w	fp, fp, r0
 8009456:	3304      	adds	r3, #4
 8009458:	e7ae      	b.n	80093b8 <__gethex+0x15c>
 800945a:	45b1      	cmp	r9, r6
 800945c:	d8ea      	bhi.n	8009434 <__gethex+0x1d8>
 800945e:	492b      	ldr	r1, [pc, #172]	@ (800950c <__gethex+0x2b0>)
 8009460:	9303      	str	r3, [sp, #12]
 8009462:	2201      	movs	r2, #1
 8009464:	4630      	mov	r0, r6
 8009466:	f7fe ff35 	bl	80082d4 <strncmp>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	2800      	cmp	r0, #0
 800946e:	d1e1      	bne.n	8009434 <__gethex+0x1d8>
 8009470:	e7a2      	b.n	80093b8 <__gethex+0x15c>
 8009472:	1ea9      	subs	r1, r5, #2
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fe5e 	bl	800a136 <__any_on>
 800947a:	2800      	cmp	r0, #0
 800947c:	d0c2      	beq.n	8009404 <__gethex+0x1a8>
 800947e:	f04f 0903 	mov.w	r9, #3
 8009482:	e7c1      	b.n	8009408 <__gethex+0x1ac>
 8009484:	da09      	bge.n	800949a <__gethex+0x23e>
 8009486:	1b75      	subs	r5, r6, r5
 8009488:	4621      	mov	r1, r4
 800948a:	9801      	ldr	r0, [sp, #4]
 800948c:	462a      	mov	r2, r5
 800948e:	f000 fc19 	bl	8009cc4 <__lshift>
 8009492:	1b7f      	subs	r7, r7, r5
 8009494:	4604      	mov	r4, r0
 8009496:	f100 0a14 	add.w	sl, r0, #20
 800949a:	f04f 0900 	mov.w	r9, #0
 800949e:	e7b8      	b.n	8009412 <__gethex+0x1b6>
 80094a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094a4:	42bd      	cmp	r5, r7
 80094a6:	dd6f      	ble.n	8009588 <__gethex+0x32c>
 80094a8:	1bed      	subs	r5, r5, r7
 80094aa:	42ae      	cmp	r6, r5
 80094ac:	dc34      	bgt.n	8009518 <__gethex+0x2bc>
 80094ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d022      	beq.n	80094fc <__gethex+0x2a0>
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d024      	beq.n	8009504 <__gethex+0x2a8>
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d115      	bne.n	80094ea <__gethex+0x28e>
 80094be:	42ae      	cmp	r6, r5
 80094c0:	d113      	bne.n	80094ea <__gethex+0x28e>
 80094c2:	2e01      	cmp	r6, #1
 80094c4:	d10b      	bne.n	80094de <__gethex+0x282>
 80094c6:	9a02      	ldr	r2, [sp, #8]
 80094c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	2301      	movs	r3, #1
 80094d0:	6123      	str	r3, [r4, #16]
 80094d2:	f8ca 3000 	str.w	r3, [sl]
 80094d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094d8:	2562      	movs	r5, #98	@ 0x62
 80094da:	601c      	str	r4, [r3, #0]
 80094dc:	e73a      	b.n	8009354 <__gethex+0xf8>
 80094de:	1e71      	subs	r1, r6, #1
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fe28 	bl	800a136 <__any_on>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d1ed      	bne.n	80094c6 <__gethex+0x26a>
 80094ea:	9801      	ldr	r0, [sp, #4]
 80094ec:	4621      	mov	r1, r4
 80094ee:	f000 f9d9 	bl	80098a4 <_Bfree>
 80094f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094f4:	2300      	movs	r3, #0
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	2550      	movs	r5, #80	@ 0x50
 80094fa:	e72b      	b.n	8009354 <__gethex+0xf8>
 80094fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1f3      	bne.n	80094ea <__gethex+0x28e>
 8009502:	e7e0      	b.n	80094c6 <__gethex+0x26a>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1dd      	bne.n	80094c6 <__gethex+0x26a>
 800950a:	e7ee      	b.n	80094ea <__gethex+0x28e>
 800950c:	0800ba08 	.word	0x0800ba08
 8009510:	0800bac2 	.word	0x0800bac2
 8009514:	0800bad3 	.word	0x0800bad3
 8009518:	1e6f      	subs	r7, r5, #1
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	d130      	bne.n	8009582 <__gethex+0x326>
 8009520:	b127      	cbz	r7, 800952c <__gethex+0x2d0>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fe06 	bl	800a136 <__any_on>
 800952a:	4681      	mov	r9, r0
 800952c:	117a      	asrs	r2, r7, #5
 800952e:	2301      	movs	r3, #1
 8009530:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009534:	f007 071f 	and.w	r7, r7, #31
 8009538:	40bb      	lsls	r3, r7
 800953a:	4213      	tst	r3, r2
 800953c:	4629      	mov	r1, r5
 800953e:	4620      	mov	r0, r4
 8009540:	bf18      	it	ne
 8009542:	f049 0902 	orrne.w	r9, r9, #2
 8009546:	f7ff fe21 	bl	800918c <rshift>
 800954a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800954e:	1b76      	subs	r6, r6, r5
 8009550:	2502      	movs	r5, #2
 8009552:	f1b9 0f00 	cmp.w	r9, #0
 8009556:	d047      	beq.n	80095e8 <__gethex+0x38c>
 8009558:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d015      	beq.n	800958c <__gethex+0x330>
 8009560:	2b03      	cmp	r3, #3
 8009562:	d017      	beq.n	8009594 <__gethex+0x338>
 8009564:	2b01      	cmp	r3, #1
 8009566:	d109      	bne.n	800957c <__gethex+0x320>
 8009568:	f019 0f02 	tst.w	r9, #2
 800956c:	d006      	beq.n	800957c <__gethex+0x320>
 800956e:	f8da 3000 	ldr.w	r3, [sl]
 8009572:	ea49 0903 	orr.w	r9, r9, r3
 8009576:	f019 0f01 	tst.w	r9, #1
 800957a:	d10e      	bne.n	800959a <__gethex+0x33e>
 800957c:	f045 0510 	orr.w	r5, r5, #16
 8009580:	e032      	b.n	80095e8 <__gethex+0x38c>
 8009582:	f04f 0901 	mov.w	r9, #1
 8009586:	e7d1      	b.n	800952c <__gethex+0x2d0>
 8009588:	2501      	movs	r5, #1
 800958a:	e7e2      	b.n	8009552 <__gethex+0x2f6>
 800958c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958e:	f1c3 0301 	rsb	r3, r3, #1
 8009592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0f0      	beq.n	800957c <__gethex+0x320>
 800959a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800959e:	f104 0314 	add.w	r3, r4, #20
 80095a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095b8:	d01b      	beq.n	80095f2 <__gethex+0x396>
 80095ba:	3201      	adds	r2, #1
 80095bc:	6002      	str	r2, [r0, #0]
 80095be:	2d02      	cmp	r5, #2
 80095c0:	f104 0314 	add.w	r3, r4, #20
 80095c4:	d13c      	bne.n	8009640 <__gethex+0x3e4>
 80095c6:	f8d8 2000 	ldr.w	r2, [r8]
 80095ca:	3a01      	subs	r2, #1
 80095cc:	42b2      	cmp	r2, r6
 80095ce:	d109      	bne.n	80095e4 <__gethex+0x388>
 80095d0:	1171      	asrs	r1, r6, #5
 80095d2:	2201      	movs	r2, #1
 80095d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095d8:	f006 061f 	and.w	r6, r6, #31
 80095dc:	fa02 f606 	lsl.w	r6, r2, r6
 80095e0:	421e      	tst	r6, r3
 80095e2:	d13a      	bne.n	800965a <__gethex+0x3fe>
 80095e4:	f045 0520 	orr.w	r5, r5, #32
 80095e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095ea:	601c      	str	r4, [r3, #0]
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	601f      	str	r7, [r3, #0]
 80095f0:	e6b0      	b.n	8009354 <__gethex+0xf8>
 80095f2:	4299      	cmp	r1, r3
 80095f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80095f8:	d8d9      	bhi.n	80095ae <__gethex+0x352>
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	459b      	cmp	fp, r3
 80095fe:	db17      	blt.n	8009630 <__gethex+0x3d4>
 8009600:	6861      	ldr	r1, [r4, #4]
 8009602:	9801      	ldr	r0, [sp, #4]
 8009604:	3101      	adds	r1, #1
 8009606:	f000 f90d 	bl	8009824 <_Balloc>
 800960a:	4681      	mov	r9, r0
 800960c:	b918      	cbnz	r0, 8009616 <__gethex+0x3ba>
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <__gethex+0x41c>)
 8009610:	4602      	mov	r2, r0
 8009612:	2184      	movs	r1, #132	@ 0x84
 8009614:	e6c5      	b.n	80093a2 <__gethex+0x146>
 8009616:	6922      	ldr	r2, [r4, #16]
 8009618:	3202      	adds	r2, #2
 800961a:	f104 010c 	add.w	r1, r4, #12
 800961e:	0092      	lsls	r2, r2, #2
 8009620:	300c      	adds	r0, #12
 8009622:	f7fe fef0 	bl	8008406 <memcpy>
 8009626:	4621      	mov	r1, r4
 8009628:	9801      	ldr	r0, [sp, #4]
 800962a:	f000 f93b 	bl	80098a4 <_Bfree>
 800962e:	464c      	mov	r4, r9
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009638:	6122      	str	r2, [r4, #16]
 800963a:	2201      	movs	r2, #1
 800963c:	615a      	str	r2, [r3, #20]
 800963e:	e7be      	b.n	80095be <__gethex+0x362>
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	455a      	cmp	r2, fp
 8009644:	dd0b      	ble.n	800965e <__gethex+0x402>
 8009646:	2101      	movs	r1, #1
 8009648:	4620      	mov	r0, r4
 800964a:	f7ff fd9f 	bl	800918c <rshift>
 800964e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009652:	3701      	adds	r7, #1
 8009654:	42bb      	cmp	r3, r7
 8009656:	f6ff aee0 	blt.w	800941a <__gethex+0x1be>
 800965a:	2501      	movs	r5, #1
 800965c:	e7c2      	b.n	80095e4 <__gethex+0x388>
 800965e:	f016 061f 	ands.w	r6, r6, #31
 8009662:	d0fa      	beq.n	800965a <__gethex+0x3fe>
 8009664:	4453      	add	r3, sl
 8009666:	f1c6 0620 	rsb	r6, r6, #32
 800966a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800966e:	f000 f9cb 	bl	8009a08 <__hi0bits>
 8009672:	42b0      	cmp	r0, r6
 8009674:	dbe7      	blt.n	8009646 <__gethex+0x3ea>
 8009676:	e7f0      	b.n	800965a <__gethex+0x3fe>
 8009678:	0800bac2 	.word	0x0800bac2

0800967c <L_shift>:
 800967c:	f1c2 0208 	rsb	r2, r2, #8
 8009680:	0092      	lsls	r2, r2, #2
 8009682:	b570      	push	{r4, r5, r6, lr}
 8009684:	f1c2 0620 	rsb	r6, r2, #32
 8009688:	6843      	ldr	r3, [r0, #4]
 800968a:	6804      	ldr	r4, [r0, #0]
 800968c:	fa03 f506 	lsl.w	r5, r3, r6
 8009690:	432c      	orrs	r4, r5
 8009692:	40d3      	lsrs	r3, r2
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	f840 3f04 	str.w	r3, [r0, #4]!
 800969a:	4288      	cmp	r0, r1
 800969c:	d3f4      	bcc.n	8009688 <L_shift+0xc>
 800969e:	bd70      	pop	{r4, r5, r6, pc}

080096a0 <__match>:
 80096a0:	b530      	push	{r4, r5, lr}
 80096a2:	6803      	ldr	r3, [r0, #0]
 80096a4:	3301      	adds	r3, #1
 80096a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096aa:	b914      	cbnz	r4, 80096b2 <__match+0x12>
 80096ac:	6003      	str	r3, [r0, #0]
 80096ae:	2001      	movs	r0, #1
 80096b0:	bd30      	pop	{r4, r5, pc}
 80096b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096ba:	2d19      	cmp	r5, #25
 80096bc:	bf98      	it	ls
 80096be:	3220      	addls	r2, #32
 80096c0:	42a2      	cmp	r2, r4
 80096c2:	d0f0      	beq.n	80096a6 <__match+0x6>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7f3      	b.n	80096b0 <__match+0x10>

080096c8 <__hexnan>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	680b      	ldr	r3, [r1, #0]
 80096ce:	6801      	ldr	r1, [r0, #0]
 80096d0:	115e      	asrs	r6, r3, #5
 80096d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096d6:	f013 031f 	ands.w	r3, r3, #31
 80096da:	b087      	sub	sp, #28
 80096dc:	bf18      	it	ne
 80096de:	3604      	addne	r6, #4
 80096e0:	2500      	movs	r5, #0
 80096e2:	1f37      	subs	r7, r6, #4
 80096e4:	4682      	mov	sl, r0
 80096e6:	4690      	mov	r8, r2
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80096ee:	46b9      	mov	r9, r7
 80096f0:	463c      	mov	r4, r7
 80096f2:	9502      	str	r5, [sp, #8]
 80096f4:	46ab      	mov	fp, r5
 80096f6:	784a      	ldrb	r2, [r1, #1]
 80096f8:	1c4b      	adds	r3, r1, #1
 80096fa:	9303      	str	r3, [sp, #12]
 80096fc:	b342      	cbz	r2, 8009750 <__hexnan+0x88>
 80096fe:	4610      	mov	r0, r2
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	9204      	str	r2, [sp, #16]
 8009704:	f7ff fd94 	bl	8009230 <__hexdig_fun>
 8009708:	2800      	cmp	r0, #0
 800970a:	d151      	bne.n	80097b0 <__hexnan+0xe8>
 800970c:	9a04      	ldr	r2, [sp, #16]
 800970e:	9905      	ldr	r1, [sp, #20]
 8009710:	2a20      	cmp	r2, #32
 8009712:	d818      	bhi.n	8009746 <__hexnan+0x7e>
 8009714:	9b02      	ldr	r3, [sp, #8]
 8009716:	459b      	cmp	fp, r3
 8009718:	dd13      	ble.n	8009742 <__hexnan+0x7a>
 800971a:	454c      	cmp	r4, r9
 800971c:	d206      	bcs.n	800972c <__hexnan+0x64>
 800971e:	2d07      	cmp	r5, #7
 8009720:	dc04      	bgt.n	800972c <__hexnan+0x64>
 8009722:	462a      	mov	r2, r5
 8009724:	4649      	mov	r1, r9
 8009726:	4620      	mov	r0, r4
 8009728:	f7ff ffa8 	bl	800967c <L_shift>
 800972c:	4544      	cmp	r4, r8
 800972e:	d952      	bls.n	80097d6 <__hexnan+0x10e>
 8009730:	2300      	movs	r3, #0
 8009732:	f1a4 0904 	sub.w	r9, r4, #4
 8009736:	f844 3c04 	str.w	r3, [r4, #-4]
 800973a:	f8cd b008 	str.w	fp, [sp, #8]
 800973e:	464c      	mov	r4, r9
 8009740:	461d      	mov	r5, r3
 8009742:	9903      	ldr	r1, [sp, #12]
 8009744:	e7d7      	b.n	80096f6 <__hexnan+0x2e>
 8009746:	2a29      	cmp	r2, #41	@ 0x29
 8009748:	d157      	bne.n	80097fa <__hexnan+0x132>
 800974a:	3102      	adds	r1, #2
 800974c:	f8ca 1000 	str.w	r1, [sl]
 8009750:	f1bb 0f00 	cmp.w	fp, #0
 8009754:	d051      	beq.n	80097fa <__hexnan+0x132>
 8009756:	454c      	cmp	r4, r9
 8009758:	d206      	bcs.n	8009768 <__hexnan+0xa0>
 800975a:	2d07      	cmp	r5, #7
 800975c:	dc04      	bgt.n	8009768 <__hexnan+0xa0>
 800975e:	462a      	mov	r2, r5
 8009760:	4649      	mov	r1, r9
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff ff8a 	bl	800967c <L_shift>
 8009768:	4544      	cmp	r4, r8
 800976a:	d936      	bls.n	80097da <__hexnan+0x112>
 800976c:	f1a8 0204 	sub.w	r2, r8, #4
 8009770:	4623      	mov	r3, r4
 8009772:	f853 1b04 	ldr.w	r1, [r3], #4
 8009776:	f842 1f04 	str.w	r1, [r2, #4]!
 800977a:	429f      	cmp	r7, r3
 800977c:	d2f9      	bcs.n	8009772 <__hexnan+0xaa>
 800977e:	1b3b      	subs	r3, r7, r4
 8009780:	f023 0303 	bic.w	r3, r3, #3
 8009784:	3304      	adds	r3, #4
 8009786:	3401      	adds	r4, #1
 8009788:	3e03      	subs	r6, #3
 800978a:	42b4      	cmp	r4, r6
 800978c:	bf88      	it	hi
 800978e:	2304      	movhi	r3, #4
 8009790:	4443      	add	r3, r8
 8009792:	2200      	movs	r2, #0
 8009794:	f843 2b04 	str.w	r2, [r3], #4
 8009798:	429f      	cmp	r7, r3
 800979a:	d2fb      	bcs.n	8009794 <__hexnan+0xcc>
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	b91b      	cbnz	r3, 80097a8 <__hexnan+0xe0>
 80097a0:	4547      	cmp	r7, r8
 80097a2:	d128      	bne.n	80097f6 <__hexnan+0x12e>
 80097a4:	2301      	movs	r3, #1
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	2005      	movs	r0, #5
 80097aa:	b007      	add	sp, #28
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	3501      	adds	r5, #1
 80097b2:	2d08      	cmp	r5, #8
 80097b4:	f10b 0b01 	add.w	fp, fp, #1
 80097b8:	dd06      	ble.n	80097c8 <__hexnan+0x100>
 80097ba:	4544      	cmp	r4, r8
 80097bc:	d9c1      	bls.n	8009742 <__hexnan+0x7a>
 80097be:	2300      	movs	r3, #0
 80097c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80097c4:	2501      	movs	r5, #1
 80097c6:	3c04      	subs	r4, #4
 80097c8:	6822      	ldr	r2, [r4, #0]
 80097ca:	f000 000f 	and.w	r0, r0, #15
 80097ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097d2:	6020      	str	r0, [r4, #0]
 80097d4:	e7b5      	b.n	8009742 <__hexnan+0x7a>
 80097d6:	2508      	movs	r5, #8
 80097d8:	e7b3      	b.n	8009742 <__hexnan+0x7a>
 80097da:	9b01      	ldr	r3, [sp, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0dd      	beq.n	800979c <__hexnan+0xd4>
 80097e0:	f1c3 0320 	rsb	r3, r3, #32
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295
 80097e8:	40da      	lsrs	r2, r3
 80097ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80097ee:	4013      	ands	r3, r2
 80097f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80097f4:	e7d2      	b.n	800979c <__hexnan+0xd4>
 80097f6:	3f04      	subs	r7, #4
 80097f8:	e7d0      	b.n	800979c <__hexnan+0xd4>
 80097fa:	2004      	movs	r0, #4
 80097fc:	e7d5      	b.n	80097aa <__hexnan+0xe2>

080097fe <__ascii_mbtowc>:
 80097fe:	b082      	sub	sp, #8
 8009800:	b901      	cbnz	r1, 8009804 <__ascii_mbtowc+0x6>
 8009802:	a901      	add	r1, sp, #4
 8009804:	b142      	cbz	r2, 8009818 <__ascii_mbtowc+0x1a>
 8009806:	b14b      	cbz	r3, 800981c <__ascii_mbtowc+0x1e>
 8009808:	7813      	ldrb	r3, [r2, #0]
 800980a:	600b      	str	r3, [r1, #0]
 800980c:	7812      	ldrb	r2, [r2, #0]
 800980e:	1e10      	subs	r0, r2, #0
 8009810:	bf18      	it	ne
 8009812:	2001      	movne	r0, #1
 8009814:	b002      	add	sp, #8
 8009816:	4770      	bx	lr
 8009818:	4610      	mov	r0, r2
 800981a:	e7fb      	b.n	8009814 <__ascii_mbtowc+0x16>
 800981c:	f06f 0001 	mvn.w	r0, #1
 8009820:	e7f8      	b.n	8009814 <__ascii_mbtowc+0x16>
	...

08009824 <_Balloc>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	69c6      	ldr	r6, [r0, #28]
 8009828:	4604      	mov	r4, r0
 800982a:	460d      	mov	r5, r1
 800982c:	b976      	cbnz	r6, 800984c <_Balloc+0x28>
 800982e:	2010      	movs	r0, #16
 8009830:	f7fc ff68 	bl	8006704 <malloc>
 8009834:	4602      	mov	r2, r0
 8009836:	61e0      	str	r0, [r4, #28]
 8009838:	b920      	cbnz	r0, 8009844 <_Balloc+0x20>
 800983a:	4b18      	ldr	r3, [pc, #96]	@ (800989c <_Balloc+0x78>)
 800983c:	4818      	ldr	r0, [pc, #96]	@ (80098a0 <_Balloc+0x7c>)
 800983e:	216b      	movs	r1, #107	@ 0x6b
 8009840:	f001 f892 	bl	800a968 <__assert_func>
 8009844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009848:	6006      	str	r6, [r0, #0]
 800984a:	60c6      	str	r6, [r0, #12]
 800984c:	69e6      	ldr	r6, [r4, #28]
 800984e:	68f3      	ldr	r3, [r6, #12]
 8009850:	b183      	cbz	r3, 8009874 <_Balloc+0x50>
 8009852:	69e3      	ldr	r3, [r4, #28]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800985a:	b9b8      	cbnz	r0, 800988c <_Balloc+0x68>
 800985c:	2101      	movs	r1, #1
 800985e:	fa01 f605 	lsl.w	r6, r1, r5
 8009862:	1d72      	adds	r2, r6, #5
 8009864:	0092      	lsls	r2, r2, #2
 8009866:	4620      	mov	r0, r4
 8009868:	f001 f89c 	bl	800a9a4 <_calloc_r>
 800986c:	b160      	cbz	r0, 8009888 <_Balloc+0x64>
 800986e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009872:	e00e      	b.n	8009892 <_Balloc+0x6e>
 8009874:	2221      	movs	r2, #33	@ 0x21
 8009876:	2104      	movs	r1, #4
 8009878:	4620      	mov	r0, r4
 800987a:	f001 f893 	bl	800a9a4 <_calloc_r>
 800987e:	69e3      	ldr	r3, [r4, #28]
 8009880:	60f0      	str	r0, [r6, #12]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1e4      	bne.n	8009852 <_Balloc+0x2e>
 8009888:	2000      	movs	r0, #0
 800988a:	bd70      	pop	{r4, r5, r6, pc}
 800988c:	6802      	ldr	r2, [r0, #0]
 800988e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009892:	2300      	movs	r3, #0
 8009894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009898:	e7f7      	b.n	800988a <_Balloc+0x66>
 800989a:	bf00      	nop
 800989c:	0800ba53 	.word	0x0800ba53
 80098a0:	0800bb33 	.word	0x0800bb33

080098a4 <_Bfree>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	69c6      	ldr	r6, [r0, #28]
 80098a8:	4605      	mov	r5, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	b976      	cbnz	r6, 80098cc <_Bfree+0x28>
 80098ae:	2010      	movs	r0, #16
 80098b0:	f7fc ff28 	bl	8006704 <malloc>
 80098b4:	4602      	mov	r2, r0
 80098b6:	61e8      	str	r0, [r5, #28]
 80098b8:	b920      	cbnz	r0, 80098c4 <_Bfree+0x20>
 80098ba:	4b09      	ldr	r3, [pc, #36]	@ (80098e0 <_Bfree+0x3c>)
 80098bc:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <_Bfree+0x40>)
 80098be:	218f      	movs	r1, #143	@ 0x8f
 80098c0:	f001 f852 	bl	800a968 <__assert_func>
 80098c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c8:	6006      	str	r6, [r0, #0]
 80098ca:	60c6      	str	r6, [r0, #12]
 80098cc:	b13c      	cbz	r4, 80098de <_Bfree+0x3a>
 80098ce:	69eb      	ldr	r3, [r5, #28]
 80098d0:	6862      	ldr	r2, [r4, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098d8:	6021      	str	r1, [r4, #0]
 80098da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	0800ba53 	.word	0x0800ba53
 80098e4:	0800bb33 	.word	0x0800bb33

080098e8 <__multadd>:
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	690d      	ldr	r5, [r1, #16]
 80098ee:	4607      	mov	r7, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	461e      	mov	r6, r3
 80098f4:	f101 0c14 	add.w	ip, r1, #20
 80098f8:	2000      	movs	r0, #0
 80098fa:	f8dc 3000 	ldr.w	r3, [ip]
 80098fe:	b299      	uxth	r1, r3
 8009900:	fb02 6101 	mla	r1, r2, r1, r6
 8009904:	0c1e      	lsrs	r6, r3, #16
 8009906:	0c0b      	lsrs	r3, r1, #16
 8009908:	fb02 3306 	mla	r3, r2, r6, r3
 800990c:	b289      	uxth	r1, r1
 800990e:	3001      	adds	r0, #1
 8009910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009914:	4285      	cmp	r5, r0
 8009916:	f84c 1b04 	str.w	r1, [ip], #4
 800991a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800991e:	dcec      	bgt.n	80098fa <__multadd+0x12>
 8009920:	b30e      	cbz	r6, 8009966 <__multadd+0x7e>
 8009922:	68a3      	ldr	r3, [r4, #8]
 8009924:	42ab      	cmp	r3, r5
 8009926:	dc19      	bgt.n	800995c <__multadd+0x74>
 8009928:	6861      	ldr	r1, [r4, #4]
 800992a:	4638      	mov	r0, r7
 800992c:	3101      	adds	r1, #1
 800992e:	f7ff ff79 	bl	8009824 <_Balloc>
 8009932:	4680      	mov	r8, r0
 8009934:	b928      	cbnz	r0, 8009942 <__multadd+0x5a>
 8009936:	4602      	mov	r2, r0
 8009938:	4b0c      	ldr	r3, [pc, #48]	@ (800996c <__multadd+0x84>)
 800993a:	480d      	ldr	r0, [pc, #52]	@ (8009970 <__multadd+0x88>)
 800993c:	21ba      	movs	r1, #186	@ 0xba
 800993e:	f001 f813 	bl	800a968 <__assert_func>
 8009942:	6922      	ldr	r2, [r4, #16]
 8009944:	3202      	adds	r2, #2
 8009946:	f104 010c 	add.w	r1, r4, #12
 800994a:	0092      	lsls	r2, r2, #2
 800994c:	300c      	adds	r0, #12
 800994e:	f7fe fd5a 	bl	8008406 <memcpy>
 8009952:	4621      	mov	r1, r4
 8009954:	4638      	mov	r0, r7
 8009956:	f7ff ffa5 	bl	80098a4 <_Bfree>
 800995a:	4644      	mov	r4, r8
 800995c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009960:	3501      	adds	r5, #1
 8009962:	615e      	str	r6, [r3, #20]
 8009964:	6125      	str	r5, [r4, #16]
 8009966:	4620      	mov	r0, r4
 8009968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800996c:	0800bac2 	.word	0x0800bac2
 8009970:	0800bb33 	.word	0x0800bb33

08009974 <__s2b>:
 8009974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009978:	460c      	mov	r4, r1
 800997a:	4615      	mov	r5, r2
 800997c:	461f      	mov	r7, r3
 800997e:	2209      	movs	r2, #9
 8009980:	3308      	adds	r3, #8
 8009982:	4606      	mov	r6, r0
 8009984:	fb93 f3f2 	sdiv	r3, r3, r2
 8009988:	2100      	movs	r1, #0
 800998a:	2201      	movs	r2, #1
 800998c:	429a      	cmp	r2, r3
 800998e:	db09      	blt.n	80099a4 <__s2b+0x30>
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff ff47 	bl	8009824 <_Balloc>
 8009996:	b940      	cbnz	r0, 80099aa <__s2b+0x36>
 8009998:	4602      	mov	r2, r0
 800999a:	4b19      	ldr	r3, [pc, #100]	@ (8009a00 <__s2b+0x8c>)
 800999c:	4819      	ldr	r0, [pc, #100]	@ (8009a04 <__s2b+0x90>)
 800999e:	21d3      	movs	r1, #211	@ 0xd3
 80099a0:	f000 ffe2 	bl	800a968 <__assert_func>
 80099a4:	0052      	lsls	r2, r2, #1
 80099a6:	3101      	adds	r1, #1
 80099a8:	e7f0      	b.n	800998c <__s2b+0x18>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	6143      	str	r3, [r0, #20]
 80099ae:	2d09      	cmp	r5, #9
 80099b0:	f04f 0301 	mov.w	r3, #1
 80099b4:	6103      	str	r3, [r0, #16]
 80099b6:	dd16      	ble.n	80099e6 <__s2b+0x72>
 80099b8:	f104 0909 	add.w	r9, r4, #9
 80099bc:	46c8      	mov	r8, r9
 80099be:	442c      	add	r4, r5
 80099c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099c4:	4601      	mov	r1, r0
 80099c6:	3b30      	subs	r3, #48	@ 0x30
 80099c8:	220a      	movs	r2, #10
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff8c 	bl	80098e8 <__multadd>
 80099d0:	45a0      	cmp	r8, r4
 80099d2:	d1f5      	bne.n	80099c0 <__s2b+0x4c>
 80099d4:	f1a5 0408 	sub.w	r4, r5, #8
 80099d8:	444c      	add	r4, r9
 80099da:	1b2d      	subs	r5, r5, r4
 80099dc:	1963      	adds	r3, r4, r5
 80099de:	42bb      	cmp	r3, r7
 80099e0:	db04      	blt.n	80099ec <__s2b+0x78>
 80099e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e6:	340a      	adds	r4, #10
 80099e8:	2509      	movs	r5, #9
 80099ea:	e7f6      	b.n	80099da <__s2b+0x66>
 80099ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099f0:	4601      	mov	r1, r0
 80099f2:	3b30      	subs	r3, #48	@ 0x30
 80099f4:	220a      	movs	r2, #10
 80099f6:	4630      	mov	r0, r6
 80099f8:	f7ff ff76 	bl	80098e8 <__multadd>
 80099fc:	e7ee      	b.n	80099dc <__s2b+0x68>
 80099fe:	bf00      	nop
 8009a00:	0800bac2 	.word	0x0800bac2
 8009a04:	0800bb33 	.word	0x0800bb33

08009a08 <__hi0bits>:
 8009a08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	bf36      	itet	cc
 8009a10:	0403      	lslcc	r3, r0, #16
 8009a12:	2000      	movcs	r0, #0
 8009a14:	2010      	movcc	r0, #16
 8009a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a1a:	bf3c      	itt	cc
 8009a1c:	021b      	lslcc	r3, r3, #8
 8009a1e:	3008      	addcc	r0, #8
 8009a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a24:	bf3c      	itt	cc
 8009a26:	011b      	lslcc	r3, r3, #4
 8009a28:	3004      	addcc	r0, #4
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2e:	bf3c      	itt	cc
 8009a30:	009b      	lslcc	r3, r3, #2
 8009a32:	3002      	addcc	r0, #2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	db05      	blt.n	8009a44 <__hi0bits+0x3c>
 8009a38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a3c:	f100 0001 	add.w	r0, r0, #1
 8009a40:	bf08      	it	eq
 8009a42:	2020      	moveq	r0, #32
 8009a44:	4770      	bx	lr

08009a46 <__lo0bits>:
 8009a46:	6803      	ldr	r3, [r0, #0]
 8009a48:	4602      	mov	r2, r0
 8009a4a:	f013 0007 	ands.w	r0, r3, #7
 8009a4e:	d00b      	beq.n	8009a68 <__lo0bits+0x22>
 8009a50:	07d9      	lsls	r1, r3, #31
 8009a52:	d421      	bmi.n	8009a98 <__lo0bits+0x52>
 8009a54:	0798      	lsls	r0, r3, #30
 8009a56:	bf49      	itett	mi
 8009a58:	085b      	lsrmi	r3, r3, #1
 8009a5a:	089b      	lsrpl	r3, r3, #2
 8009a5c:	2001      	movmi	r0, #1
 8009a5e:	6013      	strmi	r3, [r2, #0]
 8009a60:	bf5c      	itt	pl
 8009a62:	6013      	strpl	r3, [r2, #0]
 8009a64:	2002      	movpl	r0, #2
 8009a66:	4770      	bx	lr
 8009a68:	b299      	uxth	r1, r3
 8009a6a:	b909      	cbnz	r1, 8009a70 <__lo0bits+0x2a>
 8009a6c:	0c1b      	lsrs	r3, r3, #16
 8009a6e:	2010      	movs	r0, #16
 8009a70:	b2d9      	uxtb	r1, r3
 8009a72:	b909      	cbnz	r1, 8009a78 <__lo0bits+0x32>
 8009a74:	3008      	adds	r0, #8
 8009a76:	0a1b      	lsrs	r3, r3, #8
 8009a78:	0719      	lsls	r1, r3, #28
 8009a7a:	bf04      	itt	eq
 8009a7c:	091b      	lsreq	r3, r3, #4
 8009a7e:	3004      	addeq	r0, #4
 8009a80:	0799      	lsls	r1, r3, #30
 8009a82:	bf04      	itt	eq
 8009a84:	089b      	lsreq	r3, r3, #2
 8009a86:	3002      	addeq	r0, #2
 8009a88:	07d9      	lsls	r1, r3, #31
 8009a8a:	d403      	bmi.n	8009a94 <__lo0bits+0x4e>
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	f100 0001 	add.w	r0, r0, #1
 8009a92:	d003      	beq.n	8009a9c <__lo0bits+0x56>
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	4770      	bx	lr
 8009a98:	2000      	movs	r0, #0
 8009a9a:	4770      	bx	lr
 8009a9c:	2020      	movs	r0, #32
 8009a9e:	4770      	bx	lr

08009aa0 <__i2b>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	f7ff febd 	bl	8009824 <_Balloc>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	b928      	cbnz	r0, 8009aba <__i2b+0x1a>
 8009aae:	4b05      	ldr	r3, [pc, #20]	@ (8009ac4 <__i2b+0x24>)
 8009ab0:	4805      	ldr	r0, [pc, #20]	@ (8009ac8 <__i2b+0x28>)
 8009ab2:	f240 1145 	movw	r1, #325	@ 0x145
 8009ab6:	f000 ff57 	bl	800a968 <__assert_func>
 8009aba:	2301      	movs	r3, #1
 8009abc:	6144      	str	r4, [r0, #20]
 8009abe:	6103      	str	r3, [r0, #16]
 8009ac0:	bd10      	pop	{r4, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0800bac2 	.word	0x0800bac2
 8009ac8:	0800bb33 	.word	0x0800bb33

08009acc <__multiply>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	4617      	mov	r7, r2
 8009ad2:	690a      	ldr	r2, [r1, #16]
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	bfa8      	it	ge
 8009ada:	463b      	movge	r3, r7
 8009adc:	4689      	mov	r9, r1
 8009ade:	bfa4      	itt	ge
 8009ae0:	460f      	movge	r7, r1
 8009ae2:	4699      	movge	r9, r3
 8009ae4:	693d      	ldr	r5, [r7, #16]
 8009ae6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	eb05 060a 	add.w	r6, r5, sl
 8009af2:	42b3      	cmp	r3, r6
 8009af4:	b085      	sub	sp, #20
 8009af6:	bfb8      	it	lt
 8009af8:	3101      	addlt	r1, #1
 8009afa:	f7ff fe93 	bl	8009824 <_Balloc>
 8009afe:	b930      	cbnz	r0, 8009b0e <__multiply+0x42>
 8009b00:	4602      	mov	r2, r0
 8009b02:	4b41      	ldr	r3, [pc, #260]	@ (8009c08 <__multiply+0x13c>)
 8009b04:	4841      	ldr	r0, [pc, #260]	@ (8009c0c <__multiply+0x140>)
 8009b06:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b0a:	f000 ff2d 	bl	800a968 <__assert_func>
 8009b0e:	f100 0414 	add.w	r4, r0, #20
 8009b12:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b16:	4623      	mov	r3, r4
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4573      	cmp	r3, lr
 8009b1c:	d320      	bcc.n	8009b60 <__multiply+0x94>
 8009b1e:	f107 0814 	add.w	r8, r7, #20
 8009b22:	f109 0114 	add.w	r1, r9, #20
 8009b26:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b2a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b2e:	9302      	str	r3, [sp, #8]
 8009b30:	1beb      	subs	r3, r5, r7
 8009b32:	3b15      	subs	r3, #21
 8009b34:	f023 0303 	bic.w	r3, r3, #3
 8009b38:	3304      	adds	r3, #4
 8009b3a:	3715      	adds	r7, #21
 8009b3c:	42bd      	cmp	r5, r7
 8009b3e:	bf38      	it	cc
 8009b40:	2304      	movcc	r3, #4
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	428b      	cmp	r3, r1
 8009b4a:	d80c      	bhi.n	8009b66 <__multiply+0x9a>
 8009b4c:	2e00      	cmp	r6, #0
 8009b4e:	dd03      	ble.n	8009b58 <__multiply+0x8c>
 8009b50:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d055      	beq.n	8009c04 <__multiply+0x138>
 8009b58:	6106      	str	r6, [r0, #16]
 8009b5a:	b005      	add	sp, #20
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b60:	f843 2b04 	str.w	r2, [r3], #4
 8009b64:	e7d9      	b.n	8009b1a <__multiply+0x4e>
 8009b66:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b6a:	f1ba 0f00 	cmp.w	sl, #0
 8009b6e:	d01f      	beq.n	8009bb0 <__multiply+0xe4>
 8009b70:	46c4      	mov	ip, r8
 8009b72:	46a1      	mov	r9, r4
 8009b74:	2700      	movs	r7, #0
 8009b76:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b7a:	f8d9 3000 	ldr.w	r3, [r9]
 8009b7e:	fa1f fb82 	uxth.w	fp, r2
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b88:	443b      	add	r3, r7
 8009b8a:	f8d9 7000 	ldr.w	r7, [r9]
 8009b8e:	0c12      	lsrs	r2, r2, #16
 8009b90:	0c3f      	lsrs	r7, r7, #16
 8009b92:	fb0a 7202 	mla	r2, sl, r2, r7
 8009b96:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ba0:	4565      	cmp	r5, ip
 8009ba2:	f849 3b04 	str.w	r3, [r9], #4
 8009ba6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009baa:	d8e4      	bhi.n	8009b76 <__multiply+0xaa>
 8009bac:	9b01      	ldr	r3, [sp, #4]
 8009bae:	50e7      	str	r7, [r4, r3]
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bb6:	3104      	adds	r1, #4
 8009bb8:	f1b9 0f00 	cmp.w	r9, #0
 8009bbc:	d020      	beq.n	8009c00 <__multiply+0x134>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	4647      	mov	r7, r8
 8009bc2:	46a4      	mov	ip, r4
 8009bc4:	f04f 0a00 	mov.w	sl, #0
 8009bc8:	f8b7 b000 	ldrh.w	fp, [r7]
 8009bcc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009bd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009bd4:	4452      	add	r2, sl
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bdc:	f84c 3b04 	str.w	r3, [ip], #4
 8009be0:	f857 3b04 	ldr.w	r3, [r7], #4
 8009be4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009be8:	f8bc 3000 	ldrh.w	r3, [ip]
 8009bec:	fb09 330a 	mla	r3, r9, sl, r3
 8009bf0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009bf4:	42bd      	cmp	r5, r7
 8009bf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bfa:	d8e5      	bhi.n	8009bc8 <__multiply+0xfc>
 8009bfc:	9a01      	ldr	r2, [sp, #4]
 8009bfe:	50a3      	str	r3, [r4, r2]
 8009c00:	3404      	adds	r4, #4
 8009c02:	e79f      	b.n	8009b44 <__multiply+0x78>
 8009c04:	3e01      	subs	r6, #1
 8009c06:	e7a1      	b.n	8009b4c <__multiply+0x80>
 8009c08:	0800bac2 	.word	0x0800bac2
 8009c0c:	0800bb33 	.word	0x0800bb33

08009c10 <__pow5mult>:
 8009c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c14:	4615      	mov	r5, r2
 8009c16:	f012 0203 	ands.w	r2, r2, #3
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	460e      	mov	r6, r1
 8009c1e:	d007      	beq.n	8009c30 <__pow5mult+0x20>
 8009c20:	4c25      	ldr	r4, [pc, #148]	@ (8009cb8 <__pow5mult+0xa8>)
 8009c22:	3a01      	subs	r2, #1
 8009c24:	2300      	movs	r3, #0
 8009c26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c2a:	f7ff fe5d 	bl	80098e8 <__multadd>
 8009c2e:	4606      	mov	r6, r0
 8009c30:	10ad      	asrs	r5, r5, #2
 8009c32:	d03d      	beq.n	8009cb0 <__pow5mult+0xa0>
 8009c34:	69fc      	ldr	r4, [r7, #28]
 8009c36:	b97c      	cbnz	r4, 8009c58 <__pow5mult+0x48>
 8009c38:	2010      	movs	r0, #16
 8009c3a:	f7fc fd63 	bl	8006704 <malloc>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	61f8      	str	r0, [r7, #28]
 8009c42:	b928      	cbnz	r0, 8009c50 <__pow5mult+0x40>
 8009c44:	4b1d      	ldr	r3, [pc, #116]	@ (8009cbc <__pow5mult+0xac>)
 8009c46:	481e      	ldr	r0, [pc, #120]	@ (8009cc0 <__pow5mult+0xb0>)
 8009c48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c4c:	f000 fe8c 	bl	800a968 <__assert_func>
 8009c50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c54:	6004      	str	r4, [r0, #0]
 8009c56:	60c4      	str	r4, [r0, #12]
 8009c58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c60:	b94c      	cbnz	r4, 8009c76 <__pow5mult+0x66>
 8009c62:	f240 2171 	movw	r1, #625	@ 0x271
 8009c66:	4638      	mov	r0, r7
 8009c68:	f7ff ff1a 	bl	8009aa0 <__i2b>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c72:	4604      	mov	r4, r0
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	f04f 0900 	mov.w	r9, #0
 8009c7a:	07eb      	lsls	r3, r5, #31
 8009c7c:	d50a      	bpl.n	8009c94 <__pow5mult+0x84>
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4622      	mov	r2, r4
 8009c82:	4638      	mov	r0, r7
 8009c84:	f7ff ff22 	bl	8009acc <__multiply>
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4680      	mov	r8, r0
 8009c8c:	4638      	mov	r0, r7
 8009c8e:	f7ff fe09 	bl	80098a4 <_Bfree>
 8009c92:	4646      	mov	r6, r8
 8009c94:	106d      	asrs	r5, r5, #1
 8009c96:	d00b      	beq.n	8009cb0 <__pow5mult+0xa0>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	b938      	cbnz	r0, 8009cac <__pow5mult+0x9c>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4638      	mov	r0, r7
 8009ca2:	f7ff ff13 	bl	8009acc <__multiply>
 8009ca6:	6020      	str	r0, [r4, #0]
 8009ca8:	f8c0 9000 	str.w	r9, [r0]
 8009cac:	4604      	mov	r4, r0
 8009cae:	e7e4      	b.n	8009c7a <__pow5mult+0x6a>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800bc30 	.word	0x0800bc30
 8009cbc:	0800ba53 	.word	0x0800ba53
 8009cc0:	0800bb33 	.word	0x0800bb33

08009cc4 <__lshift>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	460c      	mov	r4, r1
 8009cca:	6849      	ldr	r1, [r1, #4]
 8009ccc:	6923      	ldr	r3, [r4, #16]
 8009cce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	4691      	mov	r9, r2
 8009cd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cdc:	f108 0601 	add.w	r6, r8, #1
 8009ce0:	42b3      	cmp	r3, r6
 8009ce2:	db0b      	blt.n	8009cfc <__lshift+0x38>
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f7ff fd9d 	bl	8009824 <_Balloc>
 8009cea:	4605      	mov	r5, r0
 8009cec:	b948      	cbnz	r0, 8009d02 <__lshift+0x3e>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	4b28      	ldr	r3, [pc, #160]	@ (8009d94 <__lshift+0xd0>)
 8009cf2:	4829      	ldr	r0, [pc, #164]	@ (8009d98 <__lshift+0xd4>)
 8009cf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cf8:	f000 fe36 	bl	800a968 <__assert_func>
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	005b      	lsls	r3, r3, #1
 8009d00:	e7ee      	b.n	8009ce0 <__lshift+0x1c>
 8009d02:	2300      	movs	r3, #0
 8009d04:	f100 0114 	add.w	r1, r0, #20
 8009d08:	f100 0210 	add.w	r2, r0, #16
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	4553      	cmp	r3, sl
 8009d10:	db33      	blt.n	8009d7a <__lshift+0xb6>
 8009d12:	6920      	ldr	r0, [r4, #16]
 8009d14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d18:	f104 0314 	add.w	r3, r4, #20
 8009d1c:	f019 091f 	ands.w	r9, r9, #31
 8009d20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d28:	d02b      	beq.n	8009d82 <__lshift+0xbe>
 8009d2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009d2e:	468a      	mov	sl, r1
 8009d30:	2200      	movs	r2, #0
 8009d32:	6818      	ldr	r0, [r3, #0]
 8009d34:	fa00 f009 	lsl.w	r0, r0, r9
 8009d38:	4310      	orrs	r0, r2
 8009d3a:	f84a 0b04 	str.w	r0, [sl], #4
 8009d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d42:	459c      	cmp	ip, r3
 8009d44:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d48:	d8f3      	bhi.n	8009d32 <__lshift+0x6e>
 8009d4a:	ebac 0304 	sub.w	r3, ip, r4
 8009d4e:	3b15      	subs	r3, #21
 8009d50:	f023 0303 	bic.w	r3, r3, #3
 8009d54:	3304      	adds	r3, #4
 8009d56:	f104 0015 	add.w	r0, r4, #21
 8009d5a:	4560      	cmp	r0, ip
 8009d5c:	bf88      	it	hi
 8009d5e:	2304      	movhi	r3, #4
 8009d60:	50ca      	str	r2, [r1, r3]
 8009d62:	b10a      	cbz	r2, 8009d68 <__lshift+0xa4>
 8009d64:	f108 0602 	add.w	r6, r8, #2
 8009d68:	3e01      	subs	r6, #1
 8009d6a:	4638      	mov	r0, r7
 8009d6c:	612e      	str	r6, [r5, #16]
 8009d6e:	4621      	mov	r1, r4
 8009d70:	f7ff fd98 	bl	80098a4 <_Bfree>
 8009d74:	4628      	mov	r0, r5
 8009d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d7e:	3301      	adds	r3, #1
 8009d80:	e7c5      	b.n	8009d0e <__lshift+0x4a>
 8009d82:	3904      	subs	r1, #4
 8009d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d8c:	459c      	cmp	ip, r3
 8009d8e:	d8f9      	bhi.n	8009d84 <__lshift+0xc0>
 8009d90:	e7ea      	b.n	8009d68 <__lshift+0xa4>
 8009d92:	bf00      	nop
 8009d94:	0800bac2 	.word	0x0800bac2
 8009d98:	0800bb33 	.word	0x0800bb33

08009d9c <__mcmp>:
 8009d9c:	690a      	ldr	r2, [r1, #16]
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6900      	ldr	r0, [r0, #16]
 8009da2:	1a80      	subs	r0, r0, r2
 8009da4:	b530      	push	{r4, r5, lr}
 8009da6:	d10e      	bne.n	8009dc6 <__mcmp+0x2a>
 8009da8:	3314      	adds	r3, #20
 8009daa:	3114      	adds	r1, #20
 8009dac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009db0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009db4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009db8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dbc:	4295      	cmp	r5, r2
 8009dbe:	d003      	beq.n	8009dc8 <__mcmp+0x2c>
 8009dc0:	d205      	bcs.n	8009dce <__mcmp+0x32>
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc6:	bd30      	pop	{r4, r5, pc}
 8009dc8:	42a3      	cmp	r3, r4
 8009dca:	d3f3      	bcc.n	8009db4 <__mcmp+0x18>
 8009dcc:	e7fb      	b.n	8009dc6 <__mcmp+0x2a>
 8009dce:	2001      	movs	r0, #1
 8009dd0:	e7f9      	b.n	8009dc6 <__mcmp+0x2a>
	...

08009dd4 <__mdiff>:
 8009dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	4689      	mov	r9, r1
 8009dda:	4606      	mov	r6, r0
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4648      	mov	r0, r9
 8009de0:	4614      	mov	r4, r2
 8009de2:	f7ff ffdb 	bl	8009d9c <__mcmp>
 8009de6:	1e05      	subs	r5, r0, #0
 8009de8:	d112      	bne.n	8009e10 <__mdiff+0x3c>
 8009dea:	4629      	mov	r1, r5
 8009dec:	4630      	mov	r0, r6
 8009dee:	f7ff fd19 	bl	8009824 <_Balloc>
 8009df2:	4602      	mov	r2, r0
 8009df4:	b928      	cbnz	r0, 8009e02 <__mdiff+0x2e>
 8009df6:	4b3f      	ldr	r3, [pc, #252]	@ (8009ef4 <__mdiff+0x120>)
 8009df8:	f240 2137 	movw	r1, #567	@ 0x237
 8009dfc:	483e      	ldr	r0, [pc, #248]	@ (8009ef8 <__mdiff+0x124>)
 8009dfe:	f000 fdb3 	bl	800a968 <__assert_func>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e08:	4610      	mov	r0, r2
 8009e0a:	b003      	add	sp, #12
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	bfbc      	itt	lt
 8009e12:	464b      	movlt	r3, r9
 8009e14:	46a1      	movlt	r9, r4
 8009e16:	4630      	mov	r0, r6
 8009e18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e1c:	bfba      	itte	lt
 8009e1e:	461c      	movlt	r4, r3
 8009e20:	2501      	movlt	r5, #1
 8009e22:	2500      	movge	r5, #0
 8009e24:	f7ff fcfe 	bl	8009824 <_Balloc>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	b918      	cbnz	r0, 8009e34 <__mdiff+0x60>
 8009e2c:	4b31      	ldr	r3, [pc, #196]	@ (8009ef4 <__mdiff+0x120>)
 8009e2e:	f240 2145 	movw	r1, #581	@ 0x245
 8009e32:	e7e3      	b.n	8009dfc <__mdiff+0x28>
 8009e34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e38:	6926      	ldr	r6, [r4, #16]
 8009e3a:	60c5      	str	r5, [r0, #12]
 8009e3c:	f109 0310 	add.w	r3, r9, #16
 8009e40:	f109 0514 	add.w	r5, r9, #20
 8009e44:	f104 0e14 	add.w	lr, r4, #20
 8009e48:	f100 0b14 	add.w	fp, r0, #20
 8009e4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	46d9      	mov	r9, fp
 8009e58:	f04f 0c00 	mov.w	ip, #0
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	fa1f f38a 	uxth.w	r3, sl
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	b283      	uxth	r3, r0
 8009e70:	1acb      	subs	r3, r1, r3
 8009e72:	0c00      	lsrs	r0, r0, #16
 8009e74:	4463      	add	r3, ip
 8009e76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e84:	4576      	cmp	r6, lr
 8009e86:	f849 3b04 	str.w	r3, [r9], #4
 8009e8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e8e:	d8e5      	bhi.n	8009e5c <__mdiff+0x88>
 8009e90:	1b33      	subs	r3, r6, r4
 8009e92:	3b15      	subs	r3, #21
 8009e94:	f023 0303 	bic.w	r3, r3, #3
 8009e98:	3415      	adds	r4, #21
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	42a6      	cmp	r6, r4
 8009e9e:	bf38      	it	cc
 8009ea0:	2304      	movcc	r3, #4
 8009ea2:	441d      	add	r5, r3
 8009ea4:	445b      	add	r3, fp
 8009ea6:	461e      	mov	r6, r3
 8009ea8:	462c      	mov	r4, r5
 8009eaa:	4544      	cmp	r4, r8
 8009eac:	d30e      	bcc.n	8009ecc <__mdiff+0xf8>
 8009eae:	f108 0103 	add.w	r1, r8, #3
 8009eb2:	1b49      	subs	r1, r1, r5
 8009eb4:	f021 0103 	bic.w	r1, r1, #3
 8009eb8:	3d03      	subs	r5, #3
 8009eba:	45a8      	cmp	r8, r5
 8009ebc:	bf38      	it	cc
 8009ebe:	2100      	movcc	r1, #0
 8009ec0:	440b      	add	r3, r1
 8009ec2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ec6:	b191      	cbz	r1, 8009eee <__mdiff+0x11a>
 8009ec8:	6117      	str	r7, [r2, #16]
 8009eca:	e79d      	b.n	8009e08 <__mdiff+0x34>
 8009ecc:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ed0:	46e6      	mov	lr, ip
 8009ed2:	0c08      	lsrs	r0, r1, #16
 8009ed4:	fa1c fc81 	uxtah	ip, ip, r1
 8009ed8:	4471      	add	r1, lr
 8009eda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ede:	b289      	uxth	r1, r1
 8009ee0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ee4:	f846 1b04 	str.w	r1, [r6], #4
 8009ee8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009eec:	e7dd      	b.n	8009eaa <__mdiff+0xd6>
 8009eee:	3f01      	subs	r7, #1
 8009ef0:	e7e7      	b.n	8009ec2 <__mdiff+0xee>
 8009ef2:	bf00      	nop
 8009ef4:	0800bac2 	.word	0x0800bac2
 8009ef8:	0800bb33 	.word	0x0800bb33

08009efc <__ulp>:
 8009efc:	b082      	sub	sp, #8
 8009efe:	ed8d 0b00 	vstr	d0, [sp]
 8009f02:	9a01      	ldr	r2, [sp, #4]
 8009f04:	4b0f      	ldr	r3, [pc, #60]	@ (8009f44 <__ulp+0x48>)
 8009f06:	4013      	ands	r3, r2
 8009f08:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	dc08      	bgt.n	8009f22 <__ulp+0x26>
 8009f10:	425b      	negs	r3, r3
 8009f12:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f1a:	da04      	bge.n	8009f26 <__ulp+0x2a>
 8009f1c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f20:	4113      	asrs	r3, r2
 8009f22:	2200      	movs	r2, #0
 8009f24:	e008      	b.n	8009f38 <__ulp+0x3c>
 8009f26:	f1a2 0314 	sub.w	r3, r2, #20
 8009f2a:	2b1e      	cmp	r3, #30
 8009f2c:	bfda      	itte	le
 8009f2e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f32:	40da      	lsrle	r2, r3
 8009f34:	2201      	movgt	r2, #1
 8009f36:	2300      	movs	r3, #0
 8009f38:	4619      	mov	r1, r3
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	ec41 0b10 	vmov	d0, r0, r1
 8009f40:	b002      	add	sp, #8
 8009f42:	4770      	bx	lr
 8009f44:	7ff00000 	.word	0x7ff00000

08009f48 <__b2d>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	6906      	ldr	r6, [r0, #16]
 8009f4e:	f100 0814 	add.w	r8, r0, #20
 8009f52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f56:	1f37      	subs	r7, r6, #4
 8009f58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	f7ff fd53 	bl	8009a08 <__hi0bits>
 8009f62:	f1c0 0320 	rsb	r3, r0, #32
 8009f66:	280a      	cmp	r0, #10
 8009f68:	600b      	str	r3, [r1, #0]
 8009f6a:	491b      	ldr	r1, [pc, #108]	@ (8009fd8 <__b2d+0x90>)
 8009f6c:	dc15      	bgt.n	8009f9a <__b2d+0x52>
 8009f6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f72:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f76:	45b8      	cmp	r8, r7
 8009f78:	ea43 0501 	orr.w	r5, r3, r1
 8009f7c:	bf34      	ite	cc
 8009f7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f82:	2300      	movcs	r3, #0
 8009f84:	3015      	adds	r0, #21
 8009f86:	fa02 f000 	lsl.w	r0, r2, r0
 8009f8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f8e:	4303      	orrs	r3, r0
 8009f90:	461c      	mov	r4, r3
 8009f92:	ec45 4b10 	vmov	d0, r4, r5
 8009f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9a:	45b8      	cmp	r8, r7
 8009f9c:	bf3a      	itte	cc
 8009f9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fa2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009fa6:	2300      	movcs	r3, #0
 8009fa8:	380b      	subs	r0, #11
 8009faa:	d012      	beq.n	8009fd2 <__b2d+0x8a>
 8009fac:	f1c0 0120 	rsb	r1, r0, #32
 8009fb0:	fa23 f401 	lsr.w	r4, r3, r1
 8009fb4:	4082      	lsls	r2, r0
 8009fb6:	4322      	orrs	r2, r4
 8009fb8:	4547      	cmp	r7, r8
 8009fba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009fbe:	bf8c      	ite	hi
 8009fc0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fc4:	2200      	movls	r2, #0
 8009fc6:	4083      	lsls	r3, r0
 8009fc8:	40ca      	lsrs	r2, r1
 8009fca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	e7de      	b.n	8009f90 <__b2d+0x48>
 8009fd2:	ea42 0501 	orr.w	r5, r2, r1
 8009fd6:	e7db      	b.n	8009f90 <__b2d+0x48>
 8009fd8:	3ff00000 	.word	0x3ff00000

08009fdc <__d2b>:
 8009fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	2101      	movs	r1, #1
 8009fe4:	ec59 8b10 	vmov	r8, r9, d0
 8009fe8:	4616      	mov	r6, r2
 8009fea:	f7ff fc1b 	bl	8009824 <_Balloc>
 8009fee:	4604      	mov	r4, r0
 8009ff0:	b930      	cbnz	r0, 800a000 <__d2b+0x24>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	4b23      	ldr	r3, [pc, #140]	@ (800a084 <__d2b+0xa8>)
 8009ff6:	4824      	ldr	r0, [pc, #144]	@ (800a088 <__d2b+0xac>)
 8009ff8:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ffc:	f000 fcb4 	bl	800a968 <__assert_func>
 800a000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a008:	b10d      	cbz	r5, 800a00e <__d2b+0x32>
 800a00a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	f1b8 0300 	subs.w	r3, r8, #0
 800a014:	d023      	beq.n	800a05e <__d2b+0x82>
 800a016:	4668      	mov	r0, sp
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	f7ff fd14 	bl	8009a46 <__lo0bits>
 800a01e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a022:	b1d0      	cbz	r0, 800a05a <__d2b+0x7e>
 800a024:	f1c0 0320 	rsb	r3, r0, #32
 800a028:	fa02 f303 	lsl.w	r3, r2, r3
 800a02c:	430b      	orrs	r3, r1
 800a02e:	40c2      	lsrs	r2, r0
 800a030:	6163      	str	r3, [r4, #20]
 800a032:	9201      	str	r2, [sp, #4]
 800a034:	9b01      	ldr	r3, [sp, #4]
 800a036:	61a3      	str	r3, [r4, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	bf0c      	ite	eq
 800a03c:	2201      	moveq	r2, #1
 800a03e:	2202      	movne	r2, #2
 800a040:	6122      	str	r2, [r4, #16]
 800a042:	b1a5      	cbz	r5, 800a06e <__d2b+0x92>
 800a044:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a048:	4405      	add	r5, r0
 800a04a:	603d      	str	r5, [r7, #0]
 800a04c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a050:	6030      	str	r0, [r6, #0]
 800a052:	4620      	mov	r0, r4
 800a054:	b003      	add	sp, #12
 800a056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a05a:	6161      	str	r1, [r4, #20]
 800a05c:	e7ea      	b.n	800a034 <__d2b+0x58>
 800a05e:	a801      	add	r0, sp, #4
 800a060:	f7ff fcf1 	bl	8009a46 <__lo0bits>
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	6163      	str	r3, [r4, #20]
 800a068:	3020      	adds	r0, #32
 800a06a:	2201      	movs	r2, #1
 800a06c:	e7e8      	b.n	800a040 <__d2b+0x64>
 800a06e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a072:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a076:	6038      	str	r0, [r7, #0]
 800a078:	6918      	ldr	r0, [r3, #16]
 800a07a:	f7ff fcc5 	bl	8009a08 <__hi0bits>
 800a07e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a082:	e7e5      	b.n	800a050 <__d2b+0x74>
 800a084:	0800bac2 	.word	0x0800bac2
 800a088:	0800bb33 	.word	0x0800bb33

0800a08c <__ratio>:
 800a08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a090:	b085      	sub	sp, #20
 800a092:	e9cd 1000 	strd	r1, r0, [sp]
 800a096:	a902      	add	r1, sp, #8
 800a098:	f7ff ff56 	bl	8009f48 <__b2d>
 800a09c:	9800      	ldr	r0, [sp, #0]
 800a09e:	a903      	add	r1, sp, #12
 800a0a0:	ec55 4b10 	vmov	r4, r5, d0
 800a0a4:	f7ff ff50 	bl	8009f48 <__b2d>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	6919      	ldr	r1, [r3, #16]
 800a0ac:	9b00      	ldr	r3, [sp, #0]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	1ac9      	subs	r1, r1, r3
 800a0b2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0b6:	1a9b      	subs	r3, r3, r2
 800a0b8:	ec5b ab10 	vmov	sl, fp, d0
 800a0bc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	bfce      	itee	gt
 800a0c4:	462a      	movgt	r2, r5
 800a0c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0ca:	465a      	movle	r2, fp
 800a0cc:	462f      	mov	r7, r5
 800a0ce:	46d9      	mov	r9, fp
 800a0d0:	bfcc      	ite	gt
 800a0d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0d6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0da:	464b      	mov	r3, r9
 800a0dc:	4652      	mov	r2, sl
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4639      	mov	r1, r7
 800a0e2:	f7f6 fbb3 	bl	800084c <__aeabi_ddiv>
 800a0e6:	ec41 0b10 	vmov	d0, r0, r1
 800a0ea:	b005      	add	sp, #20
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0f0 <__copybits>:
 800a0f0:	3901      	subs	r1, #1
 800a0f2:	b570      	push	{r4, r5, r6, lr}
 800a0f4:	1149      	asrs	r1, r1, #5
 800a0f6:	6914      	ldr	r4, [r2, #16]
 800a0f8:	3101      	adds	r1, #1
 800a0fa:	f102 0314 	add.w	r3, r2, #20
 800a0fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a102:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a106:	1f05      	subs	r5, r0, #4
 800a108:	42a3      	cmp	r3, r4
 800a10a:	d30c      	bcc.n	800a126 <__copybits+0x36>
 800a10c:	1aa3      	subs	r3, r4, r2
 800a10e:	3b11      	subs	r3, #17
 800a110:	f023 0303 	bic.w	r3, r3, #3
 800a114:	3211      	adds	r2, #17
 800a116:	42a2      	cmp	r2, r4
 800a118:	bf88      	it	hi
 800a11a:	2300      	movhi	r3, #0
 800a11c:	4418      	add	r0, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	4288      	cmp	r0, r1
 800a122:	d305      	bcc.n	800a130 <__copybits+0x40>
 800a124:	bd70      	pop	{r4, r5, r6, pc}
 800a126:	f853 6b04 	ldr.w	r6, [r3], #4
 800a12a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a12e:	e7eb      	b.n	800a108 <__copybits+0x18>
 800a130:	f840 3b04 	str.w	r3, [r0], #4
 800a134:	e7f4      	b.n	800a120 <__copybits+0x30>

0800a136 <__any_on>:
 800a136:	f100 0214 	add.w	r2, r0, #20
 800a13a:	6900      	ldr	r0, [r0, #16]
 800a13c:	114b      	asrs	r3, r1, #5
 800a13e:	4298      	cmp	r0, r3
 800a140:	b510      	push	{r4, lr}
 800a142:	db11      	blt.n	800a168 <__any_on+0x32>
 800a144:	dd0a      	ble.n	800a15c <__any_on+0x26>
 800a146:	f011 011f 	ands.w	r1, r1, #31
 800a14a:	d007      	beq.n	800a15c <__any_on+0x26>
 800a14c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a150:	fa24 f001 	lsr.w	r0, r4, r1
 800a154:	fa00 f101 	lsl.w	r1, r0, r1
 800a158:	428c      	cmp	r4, r1
 800a15a:	d10b      	bne.n	800a174 <__any_on+0x3e>
 800a15c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a160:	4293      	cmp	r3, r2
 800a162:	d803      	bhi.n	800a16c <__any_on+0x36>
 800a164:	2000      	movs	r0, #0
 800a166:	bd10      	pop	{r4, pc}
 800a168:	4603      	mov	r3, r0
 800a16a:	e7f7      	b.n	800a15c <__any_on+0x26>
 800a16c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a170:	2900      	cmp	r1, #0
 800a172:	d0f5      	beq.n	800a160 <__any_on+0x2a>
 800a174:	2001      	movs	r0, #1
 800a176:	e7f6      	b.n	800a166 <__any_on+0x30>

0800a178 <_malloc_usable_size_r>:
 800a178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a17c:	1f18      	subs	r0, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfbc      	itt	lt
 800a182:	580b      	ldrlt	r3, [r1, r0]
 800a184:	18c0      	addlt	r0, r0, r3
 800a186:	4770      	bx	lr

0800a188 <__ascii_wctomb>:
 800a188:	4603      	mov	r3, r0
 800a18a:	4608      	mov	r0, r1
 800a18c:	b141      	cbz	r1, 800a1a0 <__ascii_wctomb+0x18>
 800a18e:	2aff      	cmp	r2, #255	@ 0xff
 800a190:	d904      	bls.n	800a19c <__ascii_wctomb+0x14>
 800a192:	228a      	movs	r2, #138	@ 0x8a
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	f04f 30ff 	mov.w	r0, #4294967295
 800a19a:	4770      	bx	lr
 800a19c:	700a      	strb	r2, [r1, #0]
 800a19e:	2001      	movs	r0, #1
 800a1a0:	4770      	bx	lr

0800a1a2 <__ssputs_r>:
 800a1a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a6:	688e      	ldr	r6, [r1, #8]
 800a1a8:	461f      	mov	r7, r3
 800a1aa:	42be      	cmp	r6, r7
 800a1ac:	680b      	ldr	r3, [r1, #0]
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	4690      	mov	r8, r2
 800a1b4:	d82d      	bhi.n	800a212 <__ssputs_r+0x70>
 800a1b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1be:	d026      	beq.n	800a20e <__ssputs_r+0x6c>
 800a1c0:	6965      	ldr	r5, [r4, #20]
 800a1c2:	6909      	ldr	r1, [r1, #16]
 800a1c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1c8:	eba3 0901 	sub.w	r9, r3, r1
 800a1cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1d0:	1c7b      	adds	r3, r7, #1
 800a1d2:	444b      	add	r3, r9
 800a1d4:	106d      	asrs	r5, r5, #1
 800a1d6:	429d      	cmp	r5, r3
 800a1d8:	bf38      	it	cc
 800a1da:	461d      	movcc	r5, r3
 800a1dc:	0553      	lsls	r3, r2, #21
 800a1de:	d527      	bpl.n	800a230 <__ssputs_r+0x8e>
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	f7fc fab9 	bl	8006758 <_malloc_r>
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	b360      	cbz	r0, 800a244 <__ssputs_r+0xa2>
 800a1ea:	6921      	ldr	r1, [r4, #16]
 800a1ec:	464a      	mov	r2, r9
 800a1ee:	f7fe f90a 	bl	8008406 <memcpy>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	6126      	str	r6, [r4, #16]
 800a200:	6165      	str	r5, [r4, #20]
 800a202:	444e      	add	r6, r9
 800a204:	eba5 0509 	sub.w	r5, r5, r9
 800a208:	6026      	str	r6, [r4, #0]
 800a20a:	60a5      	str	r5, [r4, #8]
 800a20c:	463e      	mov	r6, r7
 800a20e:	42be      	cmp	r6, r7
 800a210:	d900      	bls.n	800a214 <__ssputs_r+0x72>
 800a212:	463e      	mov	r6, r7
 800a214:	6820      	ldr	r0, [r4, #0]
 800a216:	4632      	mov	r2, r6
 800a218:	4641      	mov	r1, r8
 800a21a:	f000 fb69 	bl	800a8f0 <memmove>
 800a21e:	68a3      	ldr	r3, [r4, #8]
 800a220:	1b9b      	subs	r3, r3, r6
 800a222:	60a3      	str	r3, [r4, #8]
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	4433      	add	r3, r6
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	2000      	movs	r0, #0
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	462a      	mov	r2, r5
 800a232:	f7fc fb1d 	bl	8006870 <_realloc_r>
 800a236:	4606      	mov	r6, r0
 800a238:	2800      	cmp	r0, #0
 800a23a:	d1e0      	bne.n	800a1fe <__ssputs_r+0x5c>
 800a23c:	6921      	ldr	r1, [r4, #16]
 800a23e:	4650      	mov	r0, sl
 800a240:	f7fe ff5a 	bl	80090f8 <_free_r>
 800a244:	230c      	movs	r3, #12
 800a246:	f8ca 3000 	str.w	r3, [sl]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	f04f 30ff 	mov.w	r0, #4294967295
 800a256:	e7e9      	b.n	800a22c <__ssputs_r+0x8a>

0800a258 <_svfiprintf_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	4698      	mov	r8, r3
 800a25e:	898b      	ldrh	r3, [r1, #12]
 800a260:	061b      	lsls	r3, r3, #24
 800a262:	b09d      	sub	sp, #116	@ 0x74
 800a264:	4607      	mov	r7, r0
 800a266:	460d      	mov	r5, r1
 800a268:	4614      	mov	r4, r2
 800a26a:	d510      	bpl.n	800a28e <_svfiprintf_r+0x36>
 800a26c:	690b      	ldr	r3, [r1, #16]
 800a26e:	b973      	cbnz	r3, 800a28e <_svfiprintf_r+0x36>
 800a270:	2140      	movs	r1, #64	@ 0x40
 800a272:	f7fc fa71 	bl	8006758 <_malloc_r>
 800a276:	6028      	str	r0, [r5, #0]
 800a278:	6128      	str	r0, [r5, #16]
 800a27a:	b930      	cbnz	r0, 800a28a <_svfiprintf_r+0x32>
 800a27c:	230c      	movs	r3, #12
 800a27e:	603b      	str	r3, [r7, #0]
 800a280:	f04f 30ff 	mov.w	r0, #4294967295
 800a284:	b01d      	add	sp, #116	@ 0x74
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	2340      	movs	r3, #64	@ 0x40
 800a28c:	616b      	str	r3, [r5, #20]
 800a28e:	2300      	movs	r3, #0
 800a290:	9309      	str	r3, [sp, #36]	@ 0x24
 800a292:	2320      	movs	r3, #32
 800a294:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a298:	f8cd 800c 	str.w	r8, [sp, #12]
 800a29c:	2330      	movs	r3, #48	@ 0x30
 800a29e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a43c <_svfiprintf_r+0x1e4>
 800a2a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2a6:	f04f 0901 	mov.w	r9, #1
 800a2aa:	4623      	mov	r3, r4
 800a2ac:	469a      	mov	sl, r3
 800a2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b2:	b10a      	cbz	r2, 800a2b8 <_svfiprintf_r+0x60>
 800a2b4:	2a25      	cmp	r2, #37	@ 0x25
 800a2b6:	d1f9      	bne.n	800a2ac <_svfiprintf_r+0x54>
 800a2b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a2bc:	d00b      	beq.n	800a2d6 <_svfiprintf_r+0x7e>
 800a2be:	465b      	mov	r3, fp
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	f7ff ff6c 	bl	800a1a2 <__ssputs_r>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f000 80a7 	beq.w	800a41e <_svfiprintf_r+0x1c6>
 800a2d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2d2:	445a      	add	r2, fp
 800a2d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 809f 	beq.w	800a41e <_svfiprintf_r+0x1c6>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ea:	f10a 0a01 	add.w	sl, sl, #1
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2f8:	4654      	mov	r4, sl
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	484e      	ldr	r0, [pc, #312]	@ (800a43c <_svfiprintf_r+0x1e4>)
 800a302:	f7f5 ff65 	bl	80001d0 <memchr>
 800a306:	9a04      	ldr	r2, [sp, #16]
 800a308:	b9d8      	cbnz	r0, 800a342 <_svfiprintf_r+0xea>
 800a30a:	06d0      	lsls	r0, r2, #27
 800a30c:	bf44      	itt	mi
 800a30e:	2320      	movmi	r3, #32
 800a310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a314:	0711      	lsls	r1, r2, #28
 800a316:	bf44      	itt	mi
 800a318:	232b      	movmi	r3, #43	@ 0x2b
 800a31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a31e:	f89a 3000 	ldrb.w	r3, [sl]
 800a322:	2b2a      	cmp	r3, #42	@ 0x2a
 800a324:	d015      	beq.n	800a352 <_svfiprintf_r+0xfa>
 800a326:	9a07      	ldr	r2, [sp, #28]
 800a328:	4654      	mov	r4, sl
 800a32a:	2000      	movs	r0, #0
 800a32c:	f04f 0c0a 	mov.w	ip, #10
 800a330:	4621      	mov	r1, r4
 800a332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a336:	3b30      	subs	r3, #48	@ 0x30
 800a338:	2b09      	cmp	r3, #9
 800a33a:	d94b      	bls.n	800a3d4 <_svfiprintf_r+0x17c>
 800a33c:	b1b0      	cbz	r0, 800a36c <_svfiprintf_r+0x114>
 800a33e:	9207      	str	r2, [sp, #28]
 800a340:	e014      	b.n	800a36c <_svfiprintf_r+0x114>
 800a342:	eba0 0308 	sub.w	r3, r0, r8
 800a346:	fa09 f303 	lsl.w	r3, r9, r3
 800a34a:	4313      	orrs	r3, r2
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	46a2      	mov	sl, r4
 800a350:	e7d2      	b.n	800a2f8 <_svfiprintf_r+0xa0>
 800a352:	9b03      	ldr	r3, [sp, #12]
 800a354:	1d19      	adds	r1, r3, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	9103      	str	r1, [sp, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfbb      	ittet	lt
 800a35e:	425b      	neglt	r3, r3
 800a360:	f042 0202 	orrlt.w	r2, r2, #2
 800a364:	9307      	strge	r3, [sp, #28]
 800a366:	9307      	strlt	r3, [sp, #28]
 800a368:	bfb8      	it	lt
 800a36a:	9204      	strlt	r2, [sp, #16]
 800a36c:	7823      	ldrb	r3, [r4, #0]
 800a36e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a370:	d10a      	bne.n	800a388 <_svfiprintf_r+0x130>
 800a372:	7863      	ldrb	r3, [r4, #1]
 800a374:	2b2a      	cmp	r3, #42	@ 0x2a
 800a376:	d132      	bne.n	800a3de <_svfiprintf_r+0x186>
 800a378:	9b03      	ldr	r3, [sp, #12]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	9203      	str	r2, [sp, #12]
 800a380:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a384:	3402      	adds	r4, #2
 800a386:	9305      	str	r3, [sp, #20]
 800a388:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a44c <_svfiprintf_r+0x1f4>
 800a38c:	7821      	ldrb	r1, [r4, #0]
 800a38e:	2203      	movs	r2, #3
 800a390:	4650      	mov	r0, sl
 800a392:	f7f5 ff1d 	bl	80001d0 <memchr>
 800a396:	b138      	cbz	r0, 800a3a8 <_svfiprintf_r+0x150>
 800a398:	9b04      	ldr	r3, [sp, #16]
 800a39a:	eba0 000a 	sub.w	r0, r0, sl
 800a39e:	2240      	movs	r2, #64	@ 0x40
 800a3a0:	4082      	lsls	r2, r0
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	3401      	adds	r4, #1
 800a3a6:	9304      	str	r3, [sp, #16]
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	4824      	ldr	r0, [pc, #144]	@ (800a440 <_svfiprintf_r+0x1e8>)
 800a3ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3b2:	2206      	movs	r2, #6
 800a3b4:	f7f5 ff0c 	bl	80001d0 <memchr>
 800a3b8:	2800      	cmp	r0, #0
 800a3ba:	d036      	beq.n	800a42a <_svfiprintf_r+0x1d2>
 800a3bc:	4b21      	ldr	r3, [pc, #132]	@ (800a444 <_svfiprintf_r+0x1ec>)
 800a3be:	bb1b      	cbnz	r3, 800a408 <_svfiprintf_r+0x1b0>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	3307      	adds	r3, #7
 800a3c4:	f023 0307 	bic.w	r3, r3, #7
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	9303      	str	r3, [sp, #12]
 800a3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ce:	4433      	add	r3, r6
 800a3d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3d2:	e76a      	b.n	800a2aa <_svfiprintf_r+0x52>
 800a3d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d8:	460c      	mov	r4, r1
 800a3da:	2001      	movs	r0, #1
 800a3dc:	e7a8      	b.n	800a330 <_svfiprintf_r+0xd8>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	3401      	adds	r4, #1
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	f04f 0c0a 	mov.w	ip, #10
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f0:	3a30      	subs	r2, #48	@ 0x30
 800a3f2:	2a09      	cmp	r2, #9
 800a3f4:	d903      	bls.n	800a3fe <_svfiprintf_r+0x1a6>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d0c6      	beq.n	800a388 <_svfiprintf_r+0x130>
 800a3fa:	9105      	str	r1, [sp, #20]
 800a3fc:	e7c4      	b.n	800a388 <_svfiprintf_r+0x130>
 800a3fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a402:	4604      	mov	r4, r0
 800a404:	2301      	movs	r3, #1
 800a406:	e7f0      	b.n	800a3ea <_svfiprintf_r+0x192>
 800a408:	ab03      	add	r3, sp, #12
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	462a      	mov	r2, r5
 800a40e:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <_svfiprintf_r+0x1f0>)
 800a410:	a904      	add	r1, sp, #16
 800a412:	4638      	mov	r0, r7
 800a414:	f7fd f960 	bl	80076d8 <_printf_float>
 800a418:	1c42      	adds	r2, r0, #1
 800a41a:	4606      	mov	r6, r0
 800a41c:	d1d6      	bne.n	800a3cc <_svfiprintf_r+0x174>
 800a41e:	89ab      	ldrh	r3, [r5, #12]
 800a420:	065b      	lsls	r3, r3, #25
 800a422:	f53f af2d 	bmi.w	800a280 <_svfiprintf_r+0x28>
 800a426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a428:	e72c      	b.n	800a284 <_svfiprintf_r+0x2c>
 800a42a:	ab03      	add	r3, sp, #12
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	462a      	mov	r2, r5
 800a430:	4b05      	ldr	r3, [pc, #20]	@ (800a448 <_svfiprintf_r+0x1f0>)
 800a432:	a904      	add	r1, sp, #16
 800a434:	4638      	mov	r0, r7
 800a436:	f7fd fbe7 	bl	8007c08 <_printf_i>
 800a43a:	e7ed      	b.n	800a418 <_svfiprintf_r+0x1c0>
 800a43c:	0800bb8c 	.word	0x0800bb8c
 800a440:	0800bb96 	.word	0x0800bb96
 800a444:	080076d9 	.word	0x080076d9
 800a448:	0800a1a3 	.word	0x0800a1a3
 800a44c:	0800bb92 	.word	0x0800bb92

0800a450 <__sfputc_r>:
 800a450:	6893      	ldr	r3, [r2, #8]
 800a452:	3b01      	subs	r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	b410      	push	{r4}
 800a458:	6093      	str	r3, [r2, #8]
 800a45a:	da08      	bge.n	800a46e <__sfputc_r+0x1e>
 800a45c:	6994      	ldr	r4, [r2, #24]
 800a45e:	42a3      	cmp	r3, r4
 800a460:	db01      	blt.n	800a466 <__sfputc_r+0x16>
 800a462:	290a      	cmp	r1, #10
 800a464:	d103      	bne.n	800a46e <__sfputc_r+0x1e>
 800a466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46a:	f7fd be96 	b.w	800819a <__swbuf_r>
 800a46e:	6813      	ldr	r3, [r2, #0]
 800a470:	1c58      	adds	r0, r3, #1
 800a472:	6010      	str	r0, [r2, #0]
 800a474:	7019      	strb	r1, [r3, #0]
 800a476:	4608      	mov	r0, r1
 800a478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <__sfputs_r>:
 800a47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a480:	4606      	mov	r6, r0
 800a482:	460f      	mov	r7, r1
 800a484:	4614      	mov	r4, r2
 800a486:	18d5      	adds	r5, r2, r3
 800a488:	42ac      	cmp	r4, r5
 800a48a:	d101      	bne.n	800a490 <__sfputs_r+0x12>
 800a48c:	2000      	movs	r0, #0
 800a48e:	e007      	b.n	800a4a0 <__sfputs_r+0x22>
 800a490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a494:	463a      	mov	r2, r7
 800a496:	4630      	mov	r0, r6
 800a498:	f7ff ffda 	bl	800a450 <__sfputc_r>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d1f3      	bne.n	800a488 <__sfputs_r+0xa>
 800a4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4a4 <_vfiprintf_r>:
 800a4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	b09d      	sub	sp, #116	@ 0x74
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	4698      	mov	r8, r3
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	b118      	cbz	r0, 800a4bc <_vfiprintf_r+0x18>
 800a4b4:	6a03      	ldr	r3, [r0, #32]
 800a4b6:	b90b      	cbnz	r3, 800a4bc <_vfiprintf_r+0x18>
 800a4b8:	f7fd fd50 	bl	8007f5c <__sinit>
 800a4bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4be:	07d9      	lsls	r1, r3, #31
 800a4c0:	d405      	bmi.n	800a4ce <_vfiprintf_r+0x2a>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	059a      	lsls	r2, r3, #22
 800a4c6:	d402      	bmi.n	800a4ce <_vfiprintf_r+0x2a>
 800a4c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4ca:	f7fd ff9a 	bl	8008402 <__retarget_lock_acquire_recursive>
 800a4ce:	89ab      	ldrh	r3, [r5, #12]
 800a4d0:	071b      	lsls	r3, r3, #28
 800a4d2:	d501      	bpl.n	800a4d8 <_vfiprintf_r+0x34>
 800a4d4:	692b      	ldr	r3, [r5, #16]
 800a4d6:	b99b      	cbnz	r3, 800a500 <_vfiprintf_r+0x5c>
 800a4d8:	4629      	mov	r1, r5
 800a4da:	4630      	mov	r0, r6
 800a4dc:	f7fd fe9c 	bl	8008218 <__swsetup_r>
 800a4e0:	b170      	cbz	r0, 800a500 <_vfiprintf_r+0x5c>
 800a4e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4e4:	07dc      	lsls	r4, r3, #31
 800a4e6:	d504      	bpl.n	800a4f2 <_vfiprintf_r+0x4e>
 800a4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ec:	b01d      	add	sp, #116	@ 0x74
 800a4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f2:	89ab      	ldrh	r3, [r5, #12]
 800a4f4:	0598      	lsls	r0, r3, #22
 800a4f6:	d4f7      	bmi.n	800a4e8 <_vfiprintf_r+0x44>
 800a4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a4fa:	f7fd ff83 	bl	8008404 <__retarget_lock_release_recursive>
 800a4fe:	e7f3      	b.n	800a4e8 <_vfiprintf_r+0x44>
 800a500:	2300      	movs	r3, #0
 800a502:	9309      	str	r3, [sp, #36]	@ 0x24
 800a504:	2320      	movs	r3, #32
 800a506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a50a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a50e:	2330      	movs	r3, #48	@ 0x30
 800a510:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6c0 <_vfiprintf_r+0x21c>
 800a514:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a518:	f04f 0901 	mov.w	r9, #1
 800a51c:	4623      	mov	r3, r4
 800a51e:	469a      	mov	sl, r3
 800a520:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a524:	b10a      	cbz	r2, 800a52a <_vfiprintf_r+0x86>
 800a526:	2a25      	cmp	r2, #37	@ 0x25
 800a528:	d1f9      	bne.n	800a51e <_vfiprintf_r+0x7a>
 800a52a:	ebba 0b04 	subs.w	fp, sl, r4
 800a52e:	d00b      	beq.n	800a548 <_vfiprintf_r+0xa4>
 800a530:	465b      	mov	r3, fp
 800a532:	4622      	mov	r2, r4
 800a534:	4629      	mov	r1, r5
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ffa1 	bl	800a47e <__sfputs_r>
 800a53c:	3001      	adds	r0, #1
 800a53e:	f000 80a7 	beq.w	800a690 <_vfiprintf_r+0x1ec>
 800a542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a544:	445a      	add	r2, fp
 800a546:	9209      	str	r2, [sp, #36]	@ 0x24
 800a548:	f89a 3000 	ldrb.w	r3, [sl]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f000 809f 	beq.w	800a690 <_vfiprintf_r+0x1ec>
 800a552:	2300      	movs	r3, #0
 800a554:	f04f 32ff 	mov.w	r2, #4294967295
 800a558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a55c:	f10a 0a01 	add.w	sl, sl, #1
 800a560:	9304      	str	r3, [sp, #16]
 800a562:	9307      	str	r3, [sp, #28]
 800a564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a568:	931a      	str	r3, [sp, #104]	@ 0x68
 800a56a:	4654      	mov	r4, sl
 800a56c:	2205      	movs	r2, #5
 800a56e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a572:	4853      	ldr	r0, [pc, #332]	@ (800a6c0 <_vfiprintf_r+0x21c>)
 800a574:	f7f5 fe2c 	bl	80001d0 <memchr>
 800a578:	9a04      	ldr	r2, [sp, #16]
 800a57a:	b9d8      	cbnz	r0, 800a5b4 <_vfiprintf_r+0x110>
 800a57c:	06d1      	lsls	r1, r2, #27
 800a57e:	bf44      	itt	mi
 800a580:	2320      	movmi	r3, #32
 800a582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a586:	0713      	lsls	r3, r2, #28
 800a588:	bf44      	itt	mi
 800a58a:	232b      	movmi	r3, #43	@ 0x2b
 800a58c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a590:	f89a 3000 	ldrb.w	r3, [sl]
 800a594:	2b2a      	cmp	r3, #42	@ 0x2a
 800a596:	d015      	beq.n	800a5c4 <_vfiprintf_r+0x120>
 800a598:	9a07      	ldr	r2, [sp, #28]
 800a59a:	4654      	mov	r4, sl
 800a59c:	2000      	movs	r0, #0
 800a59e:	f04f 0c0a 	mov.w	ip, #10
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a8:	3b30      	subs	r3, #48	@ 0x30
 800a5aa:	2b09      	cmp	r3, #9
 800a5ac:	d94b      	bls.n	800a646 <_vfiprintf_r+0x1a2>
 800a5ae:	b1b0      	cbz	r0, 800a5de <_vfiprintf_r+0x13a>
 800a5b0:	9207      	str	r2, [sp, #28]
 800a5b2:	e014      	b.n	800a5de <_vfiprintf_r+0x13a>
 800a5b4:	eba0 0308 	sub.w	r3, r0, r8
 800a5b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	9304      	str	r3, [sp, #16]
 800a5c0:	46a2      	mov	sl, r4
 800a5c2:	e7d2      	b.n	800a56a <_vfiprintf_r+0xc6>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	1d19      	adds	r1, r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	9103      	str	r1, [sp, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	bfbb      	ittet	lt
 800a5d0:	425b      	neglt	r3, r3
 800a5d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d6:	9307      	strge	r3, [sp, #28]
 800a5d8:	9307      	strlt	r3, [sp, #28]
 800a5da:	bfb8      	it	lt
 800a5dc:	9204      	strlt	r2, [sp, #16]
 800a5de:	7823      	ldrb	r3, [r4, #0]
 800a5e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5e2:	d10a      	bne.n	800a5fa <_vfiprintf_r+0x156>
 800a5e4:	7863      	ldrb	r3, [r4, #1]
 800a5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e8:	d132      	bne.n	800a650 <_vfiprintf_r+0x1ac>
 800a5ea:	9b03      	ldr	r3, [sp, #12]
 800a5ec:	1d1a      	adds	r2, r3, #4
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	9203      	str	r2, [sp, #12]
 800a5f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5f6:	3402      	adds	r4, #2
 800a5f8:	9305      	str	r3, [sp, #20]
 800a5fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a6d0 <_vfiprintf_r+0x22c>
 800a5fe:	7821      	ldrb	r1, [r4, #0]
 800a600:	2203      	movs	r2, #3
 800a602:	4650      	mov	r0, sl
 800a604:	f7f5 fde4 	bl	80001d0 <memchr>
 800a608:	b138      	cbz	r0, 800a61a <_vfiprintf_r+0x176>
 800a60a:	9b04      	ldr	r3, [sp, #16]
 800a60c:	eba0 000a 	sub.w	r0, r0, sl
 800a610:	2240      	movs	r2, #64	@ 0x40
 800a612:	4082      	lsls	r2, r0
 800a614:	4313      	orrs	r3, r2
 800a616:	3401      	adds	r4, #1
 800a618:	9304      	str	r3, [sp, #16]
 800a61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61e:	4829      	ldr	r0, [pc, #164]	@ (800a6c4 <_vfiprintf_r+0x220>)
 800a620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a624:	2206      	movs	r2, #6
 800a626:	f7f5 fdd3 	bl	80001d0 <memchr>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d03f      	beq.n	800a6ae <_vfiprintf_r+0x20a>
 800a62e:	4b26      	ldr	r3, [pc, #152]	@ (800a6c8 <_vfiprintf_r+0x224>)
 800a630:	bb1b      	cbnz	r3, 800a67a <_vfiprintf_r+0x1d6>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	3307      	adds	r3, #7
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	3308      	adds	r3, #8
 800a63c:	9303      	str	r3, [sp, #12]
 800a63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a640:	443b      	add	r3, r7
 800a642:	9309      	str	r3, [sp, #36]	@ 0x24
 800a644:	e76a      	b.n	800a51c <_vfiprintf_r+0x78>
 800a646:	fb0c 3202 	mla	r2, ip, r2, r3
 800a64a:	460c      	mov	r4, r1
 800a64c:	2001      	movs	r0, #1
 800a64e:	e7a8      	b.n	800a5a2 <_vfiprintf_r+0xfe>
 800a650:	2300      	movs	r3, #0
 800a652:	3401      	adds	r4, #1
 800a654:	9305      	str	r3, [sp, #20]
 800a656:	4619      	mov	r1, r3
 800a658:	f04f 0c0a 	mov.w	ip, #10
 800a65c:	4620      	mov	r0, r4
 800a65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a662:	3a30      	subs	r2, #48	@ 0x30
 800a664:	2a09      	cmp	r2, #9
 800a666:	d903      	bls.n	800a670 <_vfiprintf_r+0x1cc>
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d0c6      	beq.n	800a5fa <_vfiprintf_r+0x156>
 800a66c:	9105      	str	r1, [sp, #20]
 800a66e:	e7c4      	b.n	800a5fa <_vfiprintf_r+0x156>
 800a670:	fb0c 2101 	mla	r1, ip, r1, r2
 800a674:	4604      	mov	r4, r0
 800a676:	2301      	movs	r3, #1
 800a678:	e7f0      	b.n	800a65c <_vfiprintf_r+0x1b8>
 800a67a:	ab03      	add	r3, sp, #12
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	462a      	mov	r2, r5
 800a680:	4b12      	ldr	r3, [pc, #72]	@ (800a6cc <_vfiprintf_r+0x228>)
 800a682:	a904      	add	r1, sp, #16
 800a684:	4630      	mov	r0, r6
 800a686:	f7fd f827 	bl	80076d8 <_printf_float>
 800a68a:	4607      	mov	r7, r0
 800a68c:	1c78      	adds	r0, r7, #1
 800a68e:	d1d6      	bne.n	800a63e <_vfiprintf_r+0x19a>
 800a690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a692:	07d9      	lsls	r1, r3, #31
 800a694:	d405      	bmi.n	800a6a2 <_vfiprintf_r+0x1fe>
 800a696:	89ab      	ldrh	r3, [r5, #12]
 800a698:	059a      	lsls	r2, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_vfiprintf_r+0x1fe>
 800a69c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a69e:	f7fd feb1 	bl	8008404 <__retarget_lock_release_recursive>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	065b      	lsls	r3, r3, #25
 800a6a6:	f53f af1f 	bmi.w	800a4e8 <_vfiprintf_r+0x44>
 800a6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6ac:	e71e      	b.n	800a4ec <_vfiprintf_r+0x48>
 800a6ae:	ab03      	add	r3, sp, #12
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <_vfiprintf_r+0x228>)
 800a6b6:	a904      	add	r1, sp, #16
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f7fd faa5 	bl	8007c08 <_printf_i>
 800a6be:	e7e4      	b.n	800a68a <_vfiprintf_r+0x1e6>
 800a6c0:	0800bb8c 	.word	0x0800bb8c
 800a6c4:	0800bb96 	.word	0x0800bb96
 800a6c8:	080076d9 	.word	0x080076d9
 800a6cc:	0800a47f 	.word	0x0800a47f
 800a6d0:	0800bb92 	.word	0x0800bb92

0800a6d4 <__sflush_r>:
 800a6d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	0716      	lsls	r6, r2, #28
 800a6de:	4605      	mov	r5, r0
 800a6e0:	460c      	mov	r4, r1
 800a6e2:	d454      	bmi.n	800a78e <__sflush_r+0xba>
 800a6e4:	684b      	ldr	r3, [r1, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	dc02      	bgt.n	800a6f0 <__sflush_r+0x1c>
 800a6ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	dd48      	ble.n	800a782 <__sflush_r+0xae>
 800a6f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6f2:	2e00      	cmp	r6, #0
 800a6f4:	d045      	beq.n	800a782 <__sflush_r+0xae>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6fc:	682f      	ldr	r7, [r5, #0]
 800a6fe:	6a21      	ldr	r1, [r4, #32]
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	d030      	beq.n	800a766 <__sflush_r+0x92>
 800a704:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a706:	89a3      	ldrh	r3, [r4, #12]
 800a708:	0759      	lsls	r1, r3, #29
 800a70a:	d505      	bpl.n	800a718 <__sflush_r+0x44>
 800a70c:	6863      	ldr	r3, [r4, #4]
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a712:	b10b      	cbz	r3, 800a718 <__sflush_r+0x44>
 800a714:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a716:	1ad2      	subs	r2, r2, r3
 800a718:	2300      	movs	r3, #0
 800a71a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a71c:	6a21      	ldr	r1, [r4, #32]
 800a71e:	4628      	mov	r0, r5
 800a720:	47b0      	blx	r6
 800a722:	1c43      	adds	r3, r0, #1
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	d106      	bne.n	800a736 <__sflush_r+0x62>
 800a728:	6829      	ldr	r1, [r5, #0]
 800a72a:	291d      	cmp	r1, #29
 800a72c:	d82b      	bhi.n	800a786 <__sflush_r+0xb2>
 800a72e:	4a2a      	ldr	r2, [pc, #168]	@ (800a7d8 <__sflush_r+0x104>)
 800a730:	40ca      	lsrs	r2, r1
 800a732:	07d6      	lsls	r6, r2, #31
 800a734:	d527      	bpl.n	800a786 <__sflush_r+0xb2>
 800a736:	2200      	movs	r2, #0
 800a738:	6062      	str	r2, [r4, #4]
 800a73a:	04d9      	lsls	r1, r3, #19
 800a73c:	6922      	ldr	r2, [r4, #16]
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	d504      	bpl.n	800a74c <__sflush_r+0x78>
 800a742:	1c42      	adds	r2, r0, #1
 800a744:	d101      	bne.n	800a74a <__sflush_r+0x76>
 800a746:	682b      	ldr	r3, [r5, #0]
 800a748:	b903      	cbnz	r3, 800a74c <__sflush_r+0x78>
 800a74a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a74c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a74e:	602f      	str	r7, [r5, #0]
 800a750:	b1b9      	cbz	r1, 800a782 <__sflush_r+0xae>
 800a752:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a756:	4299      	cmp	r1, r3
 800a758:	d002      	beq.n	800a760 <__sflush_r+0x8c>
 800a75a:	4628      	mov	r0, r5
 800a75c:	f7fe fccc 	bl	80090f8 <_free_r>
 800a760:	2300      	movs	r3, #0
 800a762:	6363      	str	r3, [r4, #52]	@ 0x34
 800a764:	e00d      	b.n	800a782 <__sflush_r+0xae>
 800a766:	2301      	movs	r3, #1
 800a768:	4628      	mov	r0, r5
 800a76a:	47b0      	blx	r6
 800a76c:	4602      	mov	r2, r0
 800a76e:	1c50      	adds	r0, r2, #1
 800a770:	d1c9      	bne.n	800a706 <__sflush_r+0x32>
 800a772:	682b      	ldr	r3, [r5, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d0c6      	beq.n	800a706 <__sflush_r+0x32>
 800a778:	2b1d      	cmp	r3, #29
 800a77a:	d001      	beq.n	800a780 <__sflush_r+0xac>
 800a77c:	2b16      	cmp	r3, #22
 800a77e:	d11e      	bne.n	800a7be <__sflush_r+0xea>
 800a780:	602f      	str	r7, [r5, #0]
 800a782:	2000      	movs	r0, #0
 800a784:	e022      	b.n	800a7cc <__sflush_r+0xf8>
 800a786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a78a:	b21b      	sxth	r3, r3
 800a78c:	e01b      	b.n	800a7c6 <__sflush_r+0xf2>
 800a78e:	690f      	ldr	r7, [r1, #16]
 800a790:	2f00      	cmp	r7, #0
 800a792:	d0f6      	beq.n	800a782 <__sflush_r+0xae>
 800a794:	0793      	lsls	r3, r2, #30
 800a796:	680e      	ldr	r6, [r1, #0]
 800a798:	bf08      	it	eq
 800a79a:	694b      	ldreq	r3, [r1, #20]
 800a79c:	600f      	str	r7, [r1, #0]
 800a79e:	bf18      	it	ne
 800a7a0:	2300      	movne	r3, #0
 800a7a2:	eba6 0807 	sub.w	r8, r6, r7
 800a7a6:	608b      	str	r3, [r1, #8]
 800a7a8:	f1b8 0f00 	cmp.w	r8, #0
 800a7ac:	dde9      	ble.n	800a782 <__sflush_r+0xae>
 800a7ae:	6a21      	ldr	r1, [r4, #32]
 800a7b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a7b2:	4643      	mov	r3, r8
 800a7b4:	463a      	mov	r2, r7
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b0      	blx	r6
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	dc08      	bgt.n	800a7d0 <__sflush_r+0xfc>
 800a7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	4407      	add	r7, r0
 800a7d2:	eba8 0800 	sub.w	r8, r8, r0
 800a7d6:	e7e7      	b.n	800a7a8 <__sflush_r+0xd4>
 800a7d8:	20400001 	.word	0x20400001

0800a7dc <_fflush_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	690b      	ldr	r3, [r1, #16]
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	b913      	cbnz	r3, 800a7ec <_fflush_r+0x10>
 800a7e6:	2500      	movs	r5, #0
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	b118      	cbz	r0, 800a7f6 <_fflush_r+0x1a>
 800a7ee:	6a03      	ldr	r3, [r0, #32]
 800a7f0:	b90b      	cbnz	r3, 800a7f6 <_fflush_r+0x1a>
 800a7f2:	f7fd fbb3 	bl	8007f5c <__sinit>
 800a7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0f3      	beq.n	800a7e6 <_fflush_r+0xa>
 800a7fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a800:	07d0      	lsls	r0, r2, #31
 800a802:	d404      	bmi.n	800a80e <_fflush_r+0x32>
 800a804:	0599      	lsls	r1, r3, #22
 800a806:	d402      	bmi.n	800a80e <_fflush_r+0x32>
 800a808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a80a:	f7fd fdfa 	bl	8008402 <__retarget_lock_acquire_recursive>
 800a80e:	4628      	mov	r0, r5
 800a810:	4621      	mov	r1, r4
 800a812:	f7ff ff5f 	bl	800a6d4 <__sflush_r>
 800a816:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a818:	07da      	lsls	r2, r3, #31
 800a81a:	4605      	mov	r5, r0
 800a81c:	d4e4      	bmi.n	800a7e8 <_fflush_r+0xc>
 800a81e:	89a3      	ldrh	r3, [r4, #12]
 800a820:	059b      	lsls	r3, r3, #22
 800a822:	d4e1      	bmi.n	800a7e8 <_fflush_r+0xc>
 800a824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a826:	f7fd fded 	bl	8008404 <__retarget_lock_release_recursive>
 800a82a:	e7dd      	b.n	800a7e8 <_fflush_r+0xc>

0800a82c <__swhatbuf_r>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	2900      	cmp	r1, #0
 800a836:	b096      	sub	sp, #88	@ 0x58
 800a838:	4615      	mov	r5, r2
 800a83a:	461e      	mov	r6, r3
 800a83c:	da0d      	bge.n	800a85a <__swhatbuf_r+0x2e>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	bf14      	ite	ne
 800a84a:	2340      	movne	r3, #64	@ 0x40
 800a84c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a850:	2000      	movs	r0, #0
 800a852:	6031      	str	r1, [r6, #0]
 800a854:	602b      	str	r3, [r5, #0]
 800a856:	b016      	add	sp, #88	@ 0x58
 800a858:	bd70      	pop	{r4, r5, r6, pc}
 800a85a:	466a      	mov	r2, sp
 800a85c:	f000 f862 	bl	800a924 <_fstat_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	dbec      	blt.n	800a83e <__swhatbuf_r+0x12>
 800a864:	9901      	ldr	r1, [sp, #4]
 800a866:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a86a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a86e:	4259      	negs	r1, r3
 800a870:	4159      	adcs	r1, r3
 800a872:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a876:	e7eb      	b.n	800a850 <__swhatbuf_r+0x24>

0800a878 <__smakebuf_r>:
 800a878:	898b      	ldrh	r3, [r1, #12]
 800a87a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a87c:	079d      	lsls	r5, r3, #30
 800a87e:	4606      	mov	r6, r0
 800a880:	460c      	mov	r4, r1
 800a882:	d507      	bpl.n	800a894 <__smakebuf_r+0x1c>
 800a884:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	6123      	str	r3, [r4, #16]
 800a88c:	2301      	movs	r3, #1
 800a88e:	6163      	str	r3, [r4, #20]
 800a890:	b003      	add	sp, #12
 800a892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a894:	ab01      	add	r3, sp, #4
 800a896:	466a      	mov	r2, sp
 800a898:	f7ff ffc8 	bl	800a82c <__swhatbuf_r>
 800a89c:	9f00      	ldr	r7, [sp, #0]
 800a89e:	4605      	mov	r5, r0
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7fb ff58 	bl	8006758 <_malloc_r>
 800a8a8:	b948      	cbnz	r0, 800a8be <__smakebuf_r+0x46>
 800a8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8ae:	059a      	lsls	r2, r3, #22
 800a8b0:	d4ee      	bmi.n	800a890 <__smakebuf_r+0x18>
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	f043 0302 	orr.w	r3, r3, #2
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	e7e2      	b.n	800a884 <__smakebuf_r+0xc>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	6020      	str	r0, [r4, #0]
 800a8c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	9b01      	ldr	r3, [sp, #4]
 800a8ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a8ce:	b15b      	cbz	r3, 800a8e8 <__smakebuf_r+0x70>
 800a8d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	f000 f837 	bl	800a948 <_isatty_r>
 800a8da:	b128      	cbz	r0, 800a8e8 <__smakebuf_r+0x70>
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f023 0303 	bic.w	r3, r3, #3
 800a8e2:	f043 0301 	orr.w	r3, r3, #1
 800a8e6:	81a3      	strh	r3, [r4, #12]
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	431d      	orrs	r5, r3
 800a8ec:	81a5      	strh	r5, [r4, #12]
 800a8ee:	e7cf      	b.n	800a890 <__smakebuf_r+0x18>

0800a8f0 <memmove>:
 800a8f0:	4288      	cmp	r0, r1
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	eb01 0402 	add.w	r4, r1, r2
 800a8f8:	d902      	bls.n	800a900 <memmove+0x10>
 800a8fa:	4284      	cmp	r4, r0
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	d807      	bhi.n	800a910 <memmove+0x20>
 800a900:	1e43      	subs	r3, r0, #1
 800a902:	42a1      	cmp	r1, r4
 800a904:	d008      	beq.n	800a918 <memmove+0x28>
 800a906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a90e:	e7f8      	b.n	800a902 <memmove+0x12>
 800a910:	4402      	add	r2, r0
 800a912:	4601      	mov	r1, r0
 800a914:	428a      	cmp	r2, r1
 800a916:	d100      	bne.n	800a91a <memmove+0x2a>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a922:	e7f7      	b.n	800a914 <memmove+0x24>

0800a924 <_fstat_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	@ (800a944 <_fstat_r+0x20>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	4611      	mov	r1, r2
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f7f6 fe9f 	bl	8001674 <_fstat>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d102      	bne.n	800a940 <_fstat_r+0x1c>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b103      	cbz	r3, 800a940 <_fstat_r+0x1c>
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	20000c84 	.word	0x20000c84

0800a948 <_isatty_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d06      	ldr	r5, [pc, #24]	@ (800a964 <_isatty_r+0x1c>)
 800a94c:	2300      	movs	r3, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	f7f6 fe9e 	bl	8001694 <_isatty>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_isatty_r+0x1a>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_isatty_r+0x1a>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000c84 	.word	0x20000c84

0800a968 <__assert_func>:
 800a968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a96a:	4614      	mov	r4, r2
 800a96c:	461a      	mov	r2, r3
 800a96e:	4b09      	ldr	r3, [pc, #36]	@ (800a994 <__assert_func+0x2c>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4605      	mov	r5, r0
 800a974:	68d8      	ldr	r0, [r3, #12]
 800a976:	b14c      	cbz	r4, 800a98c <__assert_func+0x24>
 800a978:	4b07      	ldr	r3, [pc, #28]	@ (800a998 <__assert_func+0x30>)
 800a97a:	9100      	str	r1, [sp, #0]
 800a97c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a980:	4906      	ldr	r1, [pc, #24]	@ (800a99c <__assert_func+0x34>)
 800a982:	462b      	mov	r3, r5
 800a984:	f000 f822 	bl	800a9cc <fiprintf>
 800a988:	f000 f832 	bl	800a9f0 <abort>
 800a98c:	4b04      	ldr	r3, [pc, #16]	@ (800a9a0 <__assert_func+0x38>)
 800a98e:	461c      	mov	r4, r3
 800a990:	e7f3      	b.n	800a97a <__assert_func+0x12>
 800a992:	bf00      	nop
 800a994:	200008b4 	.word	0x200008b4
 800a998:	0800bb9d 	.word	0x0800bb9d
 800a99c:	0800bbaa 	.word	0x0800bbaa
 800a9a0:	0800bbd8 	.word	0x0800bbd8

0800a9a4 <_calloc_r>:
 800a9a4:	b570      	push	{r4, r5, r6, lr}
 800a9a6:	fba1 5402 	umull	r5, r4, r1, r2
 800a9aa:	b934      	cbnz	r4, 800a9ba <_calloc_r+0x16>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7fb fed3 	bl	8006758 <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b928      	cbnz	r0, 800a9c2 <_calloc_r+0x1e>
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	220c      	movs	r2, #12
 800a9bc:	6002      	str	r2, [r0, #0]
 800a9be:	2600      	movs	r6, #0
 800a9c0:	e7f9      	b.n	800a9b6 <_calloc_r+0x12>
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4621      	mov	r1, r4
 800a9c6:	f7fd fc7d 	bl	80082c4 <memset>
 800a9ca:	e7f4      	b.n	800a9b6 <_calloc_r+0x12>

0800a9cc <fiprintf>:
 800a9cc:	b40e      	push	{r1, r2, r3}
 800a9ce:	b503      	push	{r0, r1, lr}
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	4805      	ldr	r0, [pc, #20]	@ (800a9ec <fiprintf+0x20>)
 800a9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9da:	6800      	ldr	r0, [r0, #0]
 800a9dc:	9301      	str	r3, [sp, #4]
 800a9de:	f7ff fd61 	bl	800a4a4 <_vfiprintf_r>
 800a9e2:	b002      	add	sp, #8
 800a9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e8:	b003      	add	sp, #12
 800a9ea:	4770      	bx	lr
 800a9ec:	200008b4 	.word	0x200008b4

0800a9f0 <abort>:
 800a9f0:	b508      	push	{r3, lr}
 800a9f2:	2006      	movs	r0, #6
 800a9f4:	f000 f82c 	bl	800aa50 <raise>
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	f000 f979 	bl	800acf0 <_exit>

0800a9fe <_raise_r>:
 800a9fe:	291f      	cmp	r1, #31
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4605      	mov	r5, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	d904      	bls.n	800aa12 <_raise_r+0x14>
 800aa08:	2316      	movs	r3, #22
 800aa0a:	6003      	str	r3, [r0, #0]
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa14:	b112      	cbz	r2, 800aa1c <_raise_r+0x1e>
 800aa16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa1a:	b94b      	cbnz	r3, 800aa30 <_raise_r+0x32>
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f000 f831 	bl	800aa84 <_getpid_r>
 800aa22:	4622      	mov	r2, r4
 800aa24:	4601      	mov	r1, r0
 800aa26:	4628      	mov	r0, r5
 800aa28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa2c:	f000 b818 	b.w	800aa60 <_kill_r>
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d00a      	beq.n	800aa4a <_raise_r+0x4c>
 800aa34:	1c59      	adds	r1, r3, #1
 800aa36:	d103      	bne.n	800aa40 <_raise_r+0x42>
 800aa38:	2316      	movs	r3, #22
 800aa3a:	6003      	str	r3, [r0, #0]
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	e7e7      	b.n	800aa10 <_raise_r+0x12>
 800aa40:	2100      	movs	r1, #0
 800aa42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aa46:	4620      	mov	r0, r4
 800aa48:	4798      	blx	r3
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e7e0      	b.n	800aa10 <_raise_r+0x12>
	...

0800aa50 <raise>:
 800aa50:	4b02      	ldr	r3, [pc, #8]	@ (800aa5c <raise+0xc>)
 800aa52:	4601      	mov	r1, r0
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f7ff bfd2 	b.w	800a9fe <_raise_r>
 800aa5a:	bf00      	nop
 800aa5c:	200008b4 	.word	0x200008b4

0800aa60 <_kill_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d07      	ldr	r5, [pc, #28]	@ (800aa80 <_kill_r+0x20>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	602b      	str	r3, [r5, #0]
 800aa6e:	f7f6 fe31 	bl	80016d4 <_kill>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d102      	bne.n	800aa7c <_kill_r+0x1c>
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	b103      	cbz	r3, 800aa7c <_kill_r+0x1c>
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000c84 	.word	0x20000c84

0800aa84 <_getpid_r>:
 800aa84:	f7f6 be1e 	b.w	80016c4 <_getpid>

0800aa88 <expf>:
 800aa88:	b508      	push	{r3, lr}
 800aa8a:	ed2d 8b02 	vpush	{d8}
 800aa8e:	eef0 8a40 	vmov.f32	s17, s0
 800aa92:	f000 f85f 	bl	800ab54 <__ieee754_expf>
 800aa96:	eeb0 8a40 	vmov.f32	s16, s0
 800aa9a:	eeb0 0a68 	vmov.f32	s0, s17
 800aa9e:	f000 f829 	bl	800aaf4 <finitef>
 800aaa2:	b160      	cbz	r0, 800aabe <expf+0x36>
 800aaa4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800aae4 <expf+0x5c>
 800aaa8:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab0:	dd0a      	ble.n	800aac8 <expf+0x40>
 800aab2:	f7fd fc7b 	bl	80083ac <__errno>
 800aab6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800aae8 <expf+0x60>
 800aaba:	2322      	movs	r3, #34	@ 0x22
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	eeb0 0a48 	vmov.f32	s0, s16
 800aac2:	ecbd 8b02 	vpop	{d8}
 800aac6:	bd08      	pop	{r3, pc}
 800aac8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800aaec <expf+0x64>
 800aacc:	eef4 8ae7 	vcmpe.f32	s17, s15
 800aad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad4:	d5f3      	bpl.n	800aabe <expf+0x36>
 800aad6:	f7fd fc69 	bl	80083ac <__errno>
 800aada:	2322      	movs	r3, #34	@ 0x22
 800aadc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800aaf0 <expf+0x68>
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	e7ec      	b.n	800aabe <expf+0x36>
 800aae4:	42b17217 	.word	0x42b17217
 800aae8:	7f800000 	.word	0x7f800000
 800aaec:	c2cff1b5 	.word	0xc2cff1b5
 800aaf0:	00000000 	.word	0x00000000

0800aaf4 <finitef>:
 800aaf4:	ee10 3a10 	vmov	r3, s0
 800aaf8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800aafc:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ab00:	bfac      	ite	ge
 800ab02:	2000      	movge	r0, #0
 800ab04:	2001      	movlt	r0, #1
 800ab06:	4770      	bx	lr

0800ab08 <with_errnof>:
 800ab08:	b510      	push	{r4, lr}
 800ab0a:	ed2d 8b02 	vpush	{d8}
 800ab0e:	eeb0 8a40 	vmov.f32	s16, s0
 800ab12:	4604      	mov	r4, r0
 800ab14:	f7fd fc4a 	bl	80083ac <__errno>
 800ab18:	eeb0 0a48 	vmov.f32	s0, s16
 800ab1c:	ecbd 8b02 	vpop	{d8}
 800ab20:	6004      	str	r4, [r0, #0]
 800ab22:	bd10      	pop	{r4, pc}

0800ab24 <xflowf>:
 800ab24:	b130      	cbz	r0, 800ab34 <xflowf+0x10>
 800ab26:	eef1 7a40 	vneg.f32	s15, s0
 800ab2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ab2e:	2022      	movs	r0, #34	@ 0x22
 800ab30:	f7ff bfea 	b.w	800ab08 <with_errnof>
 800ab34:	eef0 7a40 	vmov.f32	s15, s0
 800ab38:	e7f7      	b.n	800ab2a <xflowf+0x6>
	...

0800ab3c <__math_uflowf>:
 800ab3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab44 <__math_uflowf+0x8>
 800ab40:	f7ff bff0 	b.w	800ab24 <xflowf>
 800ab44:	10000000 	.word	0x10000000

0800ab48 <__math_oflowf>:
 800ab48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ab50 <__math_oflowf+0x8>
 800ab4c:	f7ff bfea 	b.w	800ab24 <xflowf>
 800ab50:	70000000 	.word	0x70000000

0800ab54 <__ieee754_expf>:
 800ab54:	ee10 2a10 	vmov	r2, s0
 800ab58:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800ab5c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ab60:	d902      	bls.n	800ab68 <__ieee754_expf+0x14>
 800ab62:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab66:	4770      	bx	lr
 800ab68:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800ab6c:	d106      	bne.n	800ab7c <__ieee754_expf+0x28>
 800ab6e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800aca8 <__ieee754_expf+0x154>
 800ab72:	2900      	cmp	r1, #0
 800ab74:	bf18      	it	ne
 800ab76:	eeb0 0a67 	vmovne.f32	s0, s15
 800ab7a:	4770      	bx	lr
 800ab7c:	484b      	ldr	r0, [pc, #300]	@ (800acac <__ieee754_expf+0x158>)
 800ab7e:	4282      	cmp	r2, r0
 800ab80:	dd02      	ble.n	800ab88 <__ieee754_expf+0x34>
 800ab82:	2000      	movs	r0, #0
 800ab84:	f7ff bfe0 	b.w	800ab48 <__math_oflowf>
 800ab88:	2a00      	cmp	r2, #0
 800ab8a:	da05      	bge.n	800ab98 <__ieee754_expf+0x44>
 800ab8c:	4a48      	ldr	r2, [pc, #288]	@ (800acb0 <__ieee754_expf+0x15c>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d902      	bls.n	800ab98 <__ieee754_expf+0x44>
 800ab92:	2000      	movs	r0, #0
 800ab94:	f7ff bfd2 	b.w	800ab3c <__math_uflowf>
 800ab98:	4a46      	ldr	r2, [pc, #280]	@ (800acb4 <__ieee754_expf+0x160>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800aba0:	d952      	bls.n	800ac48 <__ieee754_expf+0xf4>
 800aba2:	4a45      	ldr	r2, [pc, #276]	@ (800acb8 <__ieee754_expf+0x164>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800abaa:	d834      	bhi.n	800ac16 <__ieee754_expf+0xc2>
 800abac:	4b43      	ldr	r3, [pc, #268]	@ (800acbc <__ieee754_expf+0x168>)
 800abae:	4413      	add	r3, r2
 800abb0:	ed93 7a00 	vldr	s14, [r3]
 800abb4:	4b42      	ldr	r3, [pc, #264]	@ (800acc0 <__ieee754_expf+0x16c>)
 800abb6:	4413      	add	r3, r2
 800abb8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800abbc:	f081 0201 	eor.w	r2, r1, #1
 800abc0:	edd3 7a00 	vldr	s15, [r3]
 800abc4:	1a52      	subs	r2, r2, r1
 800abc6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800abca:	ee20 6a00 	vmul.f32	s12, s0, s0
 800abce:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800acc4 <__ieee754_expf+0x170>
 800abd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800acc8 <__ieee754_expf+0x174>
 800abd6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800abda:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800accc <__ieee754_expf+0x178>
 800abde:	eea6 5a86 	vfma.f32	s10, s13, s12
 800abe2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800acd0 <__ieee754_expf+0x17c>
 800abe6:	eee5 6a06 	vfma.f32	s13, s10, s12
 800abea:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800acd4 <__ieee754_expf+0x180>
 800abee:	eea6 5a86 	vfma.f32	s10, s13, s12
 800abf2:	eef0 6a40 	vmov.f32	s13, s0
 800abf6:	eee5 6a46 	vfms.f32	s13, s10, s12
 800abfa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800abfe:	ee20 5a26 	vmul.f32	s10, s0, s13
 800ac02:	bb92      	cbnz	r2, 800ac6a <__ieee754_expf+0x116>
 800ac04:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ac08:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ac0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ac10:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800ac14:	4770      	bx	lr
 800ac16:	4b30      	ldr	r3, [pc, #192]	@ (800acd8 <__ieee754_expf+0x184>)
 800ac18:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800acdc <__ieee754_expf+0x188>
 800ac1c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800ace0 <__ieee754_expf+0x18c>
 800ac20:	4413      	add	r3, r2
 800ac22:	edd3 7a00 	vldr	s15, [r3]
 800ac26:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ac2a:	eeb0 7a40 	vmov.f32	s14, s0
 800ac2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac32:	ee17 2a90 	vmov	r2, s15
 800ac36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac3a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800ac3e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800ace4 <__ieee754_expf+0x190>
 800ac42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac46:	e7be      	b.n	800abc6 <__ieee754_expf+0x72>
 800ac48:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800ac4c:	d20b      	bcs.n	800ac66 <__ieee754_expf+0x112>
 800ac4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ace8 <__ieee754_expf+0x194>
 800ac52:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ac56:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ac5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5e:	dd02      	ble.n	800ac66 <__ieee754_expf+0x112>
 800ac60:	ee30 0a25 	vadd.f32	s0, s0, s11
 800ac64:	4770      	bx	lr
 800ac66:	2200      	movs	r2, #0
 800ac68:	e7af      	b.n	800abca <__ieee754_expf+0x76>
 800ac6a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800ac6e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800ac72:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800ac76:	bfb8      	it	lt
 800ac78:	3264      	addlt	r2, #100	@ 0x64
 800ac7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac82:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ac86:	ee17 3a90 	vmov	r3, s15
 800ac8a:	bfab      	itete	ge
 800ac8c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800ac90:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800ac94:	ee00 3a10 	vmovge	s0, r3
 800ac98:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800acec <__ieee754_expf+0x198>
 800ac9c:	bfbc      	itt	lt
 800ac9e:	ee00 3a10 	vmovlt	s0, r3
 800aca2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800aca6:	4770      	bx	lr
 800aca8:	00000000 	.word	0x00000000
 800acac:	42b17217 	.word	0x42b17217
 800acb0:	42cff1b5 	.word	0x42cff1b5
 800acb4:	3eb17218 	.word	0x3eb17218
 800acb8:	3f851591 	.word	0x3f851591
 800acbc:	0800be3c 	.word	0x0800be3c
 800acc0:	0800be34 	.word	0x0800be34
 800acc4:	3331bb4c 	.word	0x3331bb4c
 800acc8:	b5ddea0e 	.word	0xb5ddea0e
 800accc:	388ab355 	.word	0x388ab355
 800acd0:	bb360b61 	.word	0xbb360b61
 800acd4:	3e2aaaab 	.word	0x3e2aaaab
 800acd8:	0800be44 	.word	0x0800be44
 800acdc:	3fb8aa3b 	.word	0x3fb8aa3b
 800ace0:	3f317180 	.word	0x3f317180
 800ace4:	3717f7d1 	.word	0x3717f7d1
 800ace8:	7149f2ca 	.word	0x7149f2ca
 800acec:	0d800000 	.word	0x0d800000

0800acf0 <_exit>:
 800acf0:	e7fe      	b.n	800acf0 <_exit>
	...

0800acf4 <_init>:
 800acf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf6:	bf00      	nop
 800acf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acfa:	bc08      	pop	{r3}
 800acfc:	469e      	mov	lr, r3
 800acfe:	4770      	bx	lr

0800ad00 <_fini>:
 800ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad02:	bf00      	nop
 800ad04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad06:	bc08      	pop	{r3}
 800ad08:	469e      	mov	lr, r3
 800ad0a:	4770      	bx	lr
